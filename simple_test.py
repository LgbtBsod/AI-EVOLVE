"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.
"""

import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_basic_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤ ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        from config.settings_manager import settings_manager
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        from core.attributes import AttributeManager, Attribute
        logger.info("‚úÖ –ê—Ç—Ä–∏–±—É—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –±–æ–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        from core.combat_stats import CombatStatsManager, CombatStats
        logger.info("‚úÖ –ë–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        from core.inventory import InventoryManager, Inventory, Equipment
        logger.info("‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        from entities.base_entity import BaseEntity
        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–∞
        from entities.player import Player
        logger.info("‚úÖ –ò–≥—Ä–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –≤—Ä–∞–≥–∞
        from entities.enemy import Enemy
        logger.info("‚úÖ –í—Ä–∞–≥ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("=== –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã ===")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_basic_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        from core.attributes import AttributeManager
        attr_manager = AttributeManager()
        attr_manager.initialize_default_attributes()
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        from core.combat_stats import CombatStatsManager
        combat_manager = CombatStatsManager()
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        from core.inventory import InventoryManager
        inv_manager = InventoryManager()
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å
        from entities.base_entity import BaseEntity
        entity = BaseEntity("test_entity", (0, 0))
        logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        from entities.player import Player
        player = Player((0, 0))
        logger.info("‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
        from entities.enemy import Enemy
        enemy = Enemy("warrior", 1, (100, 0))
        logger.info("‚úÖ –í—Ä–∞–≥ —Å–æ–∑–¥–∞–Ω")
        
        logger.info("=== –í—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ ===")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_basic_interaction():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"""
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è ===")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –≤—Ä–∞–≥–∞
        from entities.player import Player
        from entities.enemy import Enemy
        
        player = Player((0, 0))
        enemy = Enemy("warrior", 1, (100, 0))
        
        logger.info(f"–ò–≥—Ä–æ–∫: –∑–¥–æ—Ä–æ–≤—å–µ {player.health}/{player.max_health}")
        logger.info(f"–í—Ä–∞–≥: –∑–¥–æ—Ä–æ–≤—å–µ {enemy.health}/{enemy.max_health}")
        
        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞
        damage_report = player.attack(enemy)
        if damage_report:
            logger.info(f"–ò–≥—Ä–æ–∫ –Ω–∞–Ω–µ—Å {damage_report.get('damage', 0)} —É—Ä–æ–Ω–∞")
            logger.info(f"–í—Ä–∞–≥: –∑–¥–æ—Ä–æ–≤—å–µ {enemy.health}/{enemy.max_health}")
        
        # –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞
        damage_report = enemy.attack(player)
        if damage_report:
            logger.info(f"–í—Ä–∞–≥ –Ω–∞–Ω–µ—Å {damage_report.get('damage', 0)} —É—Ä–æ–Ω–∞")
            logger.info(f"–ò–≥—Ä–æ–∫: –∑–¥–æ—Ä–æ–≤—å–µ {player.health}/{player.max_health}")
        
        logger.info("=== –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ ===")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if not test_basic_imports():
        logger.error("‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
    if not test_basic_creation():
        logger.error("‚ùå –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    if not test_basic_interaction():
        logger.error("‚ùå –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return
    
    logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    logger.info("üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")

if __name__ == "__main__":
    main()
