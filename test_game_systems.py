"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
"""
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_basic_systems():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –°–ò–°–¢–ï–ú ===")
    
    try:
        # –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        from config.settings_manager import settings_manager
        from core.data_manager import data_manager
        from core.game_state_manager import game_state_manager
        from entities.entity_factory import entity_factory
        from ai.ai_manager import ai_manager
        
        logger.info("‚úì –í—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_manager.reload_settings()
        logger.info("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö
        data_manager.reload_data()
        logger.info("‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç AI —Å–∏—Å—Ç–µ–º—ã
        ai_manager.initialize()
        logger.info("‚úì AI —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        player = entity_factory.create_player("TestPlayer", (100, 100))
        if player:
            logger.info(f"‚úì –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω: {player.name}")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞–≥–∞
        enemy = entity_factory.create_enemy("warrior", 1, (200, 200))
        if enemy:
            logger.info(f"‚úì –í—Ä–∞–≥ —Å–æ–∑–¥–∞–Ω: {enemy.enemy_type}")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–∞–≥–∞")
        
        # –¢–µ—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        game_id = game_state_manager.create_new_game(
            save_name="TestSave",
            player_name="TestPlayer",
            difficulty="normal"
        )
        if game_id:
            logger.info(f"‚úì –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã —Å–æ–∑–¥–∞–Ω–æ: {game_id}")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã")
        
        logger.info("=== –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û ===")
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ui_systems():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI —Å–∏—Å—Ç–µ–º"""
    logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI –°–ò–°–¢–ï–ú ===")
    
    try:
        # –ò–º–ø–æ—Ä—Ç UI –º–æ–¥—É–ª–µ–π
        from ui.main_window import MainWindow
        from ui.game_menu import GameMenu
        from ui.render_manager import RenderManager
        
        logger.info("‚úì UI –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        app = MainWindow()
        logger.info("‚úì –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é
        import tkinter as tk
        root = tk.Tk()
        canvas = tk.Canvas(root, width=800, height=600)
        menu = GameMenu(canvas, 800, 600)
        logger.info("‚úì –ò–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        from core.game_state_manager import game_state_manager
        render_manager = RenderManager(canvas, game_state_manager)
        logger.info("‚úì –†–µ–Ω–¥–µ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        root.destroy()
        logger.info("‚úì UI —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UI: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_ai_systems():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º"""
    logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –°–ò–°–¢–ï–ú ===")
    
    try:
        from ai.ai_manager import ai_manager
        from ai.ai_core import AICore, AIState, AIPriority
        from entities.entity_factory import entity_factory
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å
        enemy = entity_factory.create_enemy("warrior", 1, (100, 100))
        if enemy:
            # –°–æ–∑–¥–∞–µ–º AI —è–¥—Ä–æ
            ai_core = AICore(
                entity=enemy,
                personality_type="aggressive",
                priority=AIPriority.NORMAL
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ AI —Å–∏—Å—Ç–µ–º–µ
            success = ai_manager.register_entity(enemy, ai_core)
            if success:
                logger.info("‚úì AI —Å—É—â–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å AI —Å—É—â–Ω–æ—Å—Ç—å")
            
            # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AI
            ai_manager.update(0.016)  # 16ms
            logger.info("‚úì AI —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = ai_manager.get_performance_stats()
            logger.info(f"‚úì AI —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
            
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å")
        
        logger.info("‚úì AI —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    basic_ok = test_basic_systems()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º UI —Å–∏—Å—Ç–µ–º—ã
    ui_ok = test_ui_systems()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Å–∏—Å—Ç–µ–º—ã
    ai_ok = test_ai_systems()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if basic_ok and ui_ok and ai_ok:
        logger.info("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        logger.info("–ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
    else:
        logger.error("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –°–ò–°–¢–ï–ú–´ –ò–ú–ï–Æ–¢ –ü–†–û–ë–õ–ï–ú–´")
        logger.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
    
    return basic_ok and ui_ok and ai_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
