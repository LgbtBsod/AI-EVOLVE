#!/usr/bin/env python3
"""AI-EVOLVE - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∏–≥—Ä—ã —Å –æ–∫–Ω–æ–º"""

import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
ROOT_DIR = Path(__file__).parent
sys.path.insert(0, str(ROOT_DIR / "src"))

from panda3d.core import *
from direct.showbase.ShowBase import ShowBase
from direct.task import Task

class AIGame(ShowBase):
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –∏–≥—Ä—ã AI-EVOLVE"""
    
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        self.setBackgroundColor(0.1, 0.1, 0.2)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ü–µ–Ω—É
        self.create_scene()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
        self.taskMgr.add(self.game_loop, "game_loop")
        
        print("üéÆ AI-EVOLVE –∑–∞–ø—É—â–µ–Ω! –û–∫–Ω–æ –∏–≥—Ä—ã –æ—Ç–∫—Ä—ã—Ç–æ.")
        print("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        print("   - WASD: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã")
        print("   - –ú—ã—à—å: –ø–æ–≤–æ—Ä–æ—Ç –∫–∞–º–µ—Ä—ã")
        print("   - ESC: –≤—ã—Ö–æ–¥")
    
    def create_scene(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—Ü–µ–Ω—ã"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—É–±
        cube = self.loader.loadModel("models/box")
        if not cube:
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—É–±
            cube = self.create_simple_cube()
        
        cube.setPos(0, 0, 0)
        cube.setScale(1)
        cube.reparentTo(self.render)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
        light = PointLight("light")
        light.setColor((1, 1, 1))
        light.setAttenuation((1, 0, 1))
        
        light_np = self.render.attachNewNode(light)
        light_np.setPos(5, 5, 5)
        self.render.setLight(light_np)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
        self.camera.setPos(0, -10, 5)
        self.camera.lookAt(0, 0, 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        text = TextNode("title")
        text.setText("AI-EVOLVE Enhanced Edition")
        text.setAlign(TextNode.ACenter)
        text.setColor(1, 1, 1, 1)
        
        text_np = self.render.attachNewNode(text)
        text_np.setPos(0, 0, 3)
        text_np.setScale(0.5)
    
    def create_simple_cube(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—É–±–∞"""
        # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∫—É–±–∞
        format = GeomVertexFormat.getV3n3c4()
        vdata = GeomVertexData("cube", format, Geom.UHStatic)
        
        # –í–µ—Ä—à–∏–Ω—ã –∫—É–±–∞
        vertex = GeomVertexWriter(vdata, "vertex")
        normal = GeomVertexWriter(vdata, "normal")
        color = GeomVertexWriter(vdata, "color")
        
        # 8 –≤–µ—Ä—à–∏–Ω –∫—É–±–∞
        vertex.addData3(-1, -1, -1)
        vertex.addData3(1, -1, -1)
        vertex.addData3(1, 1, -1)
        vertex.addData3(-1, 1, -1)
        vertex.addData3(-1, -1, 1)
        vertex.addData3(1, -1, 1)
        vertex.addData3(1, 1, 1)
        vertex.addData3(-1, 1, 1)
        
        # –ù–æ—Ä–º–∞–ª–∏
        for i in range(8):
            normal.addData3(0, 0, 1)
            color.addData4(0.8, 0.8, 0.8, 1)
        
        # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –≥—Ä–∞–Ω–µ–π
        tris = GeomTriangles(Geom.UHStatic)
        
        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å
        tris.addVertices(0, 1, 2)
        tris.addVertices(0, 2, 3)
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å
        tris.addVertices(4, 7, 6)
        tris.addVertices(4, 6, 5)
        # –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
        tris.addVertices(0, 4, 5)
        tris.addVertices(0, 5, 1)
        # –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
        tris.addVertices(2, 6, 7)
        tris.addVertices(2, 7, 3)
        # –õ–µ–≤–∞—è –≥—Ä–∞–Ω—å
        tris.addVertices(0, 3, 7)
        tris.addVertices(0, 7, 4)
        # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å
        tris.addVertices(1, 5, 6)
        tris.addVertices(1, 6, 2)
        
        tris.closePrimitive()
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
        geom = Geom(vdata)
        geom.addPrimitive(tris)
        
        # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
        node = GeomNode("cube")
        node.addGeom(geom)
        
        return node
    
    def game_loop(self, task):
        """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        # –í—Ä–∞—â–µ–Ω–∏–µ –∫—É–±–∞
        cube = self.render.find("cube")
        if cube:
            cube.setH(cube.getH() + 1)
        
        return Task.cont

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üéÆ –ó–∞–ø—É—Å–∫ AI-EVOLVE...")
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Panda3D...")
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        game = AIGame()
        
        print("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üéØ –û–∫–Ω–æ –∏–≥—Ä—ã –æ—Ç–∫—Ä—ã—Ç–æ")
        print("üí° –ù–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        game.run()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
