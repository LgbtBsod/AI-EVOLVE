#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Panda3D
"""

import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def test_panda3d_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç Panda3D"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ Panda3D...")
    
    try:
        from direct.showbase.ShowBase import ShowBase
        logger.info("‚úì ShowBase –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        from panda3d.core import Vec3, Vec4, Point3
        logger.info("‚úì –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã Panda3D –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from direct.gui.OnscreenText import OnscreenText
        logger.info("‚úì OnscreenText –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from direct.gui.DirectButton import DirectButton
        logger.info("‚úì DirectButton –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Panda3D: {e}")
        return False
    except Exception as e:
        logger.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def test_panda3d_window():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ Panda3D"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ Panda3D...")
    
    try:
        from direct.showbase.ShowBase import ShowBase
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        base = ShowBase()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ
        if base.win:
            logger.info("‚úì –û–∫–Ω–æ Panda3D —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
            width = base.win.get_x_size()
            height = base.win.get_y_size()
            logger.info(f"‚úì –†–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞: {width}x{height}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            base.userExit()
            logger.info("‚úì –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            
            return True
        else:
            logger.error("‚úó –û–∫–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            return False
            
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞: {e}")
        return False


def test_simple_scene():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω—ã"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å—Ü–µ–Ω—ã...")
    
    try:
        from direct.showbase.ShowBase import ShowBase
        from panda3d.core import Vec3, Vec4, Point3, CardMaker
        from direct.gui.OnscreenText import OnscreenText
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        base = ShowBase()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–ª–æ—Å–∫–æ—Å—Ç—å
        cm = CardMaker("test_plane")
        cm.set_frame(-1, 1, -1, 1)
        plane = base.render.attach_new_node(cm.generate())
        plane.set_color(Vec4(0.5, 0.5, 0.5, 1.0))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç
        text = OnscreenText(
            text="Panda3D —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            pos=(0, 0),
            scale=0.1,
            fg=(1, 1, 1, 1)
        )
        
        logger.info("‚úì –ü—Ä–æ—Å—Ç–∞—è —Å—Ü–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
        logger.info("‚úì –î–æ–ª–∂–Ω–æ –ø–æ—è–≤–∏—Ç—å—Å—è –æ–∫–Ω–æ —Å —Å–µ—Ä–æ–π –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –∏ —Ç–µ–∫—Å—Ç–æ–º")
        logger.info("‚úì –ù–∞–∂–º–∏—Ç–µ ESC –¥–ª—è –≤—ã—Ö–æ–¥–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        base.run()
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω—ã: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 50)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PANDA3D")
    logger.info("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç Panda3D", test_panda3d_import),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞", test_panda3d_window),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\n--- –¢–µ—Å—Ç: {test_name} ---")
        if test_func():
            passed += 1
            logger.info(f"‚úì {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error(f"‚úó {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    logger.info("\n" + "=" * 50)
    logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Panda3D —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ
        try:
            response = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ —Å—Ü–µ–Ω—ã? (y/n): ").lower().strip()
            if response in ['y', 'yes', '–¥–∞', '–¥']:
                logger.info("–ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å—Ü–µ–Ω—ã...")
                test_simple_scene()
        except KeyboardInterrupt:
            logger.info("–î–µ–º–æ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        return 0
    else:
        logger.error(f"‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. Panda3D –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
