#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å"
"""

import unittest
import sys
import io
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É –∏ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º
PROJECT_ROOT = os.path.join(os.path.dirname(__file__), '..')
SRC_ROOT = os.path.join(PROJECT_ROOT, 'src')
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, SRC_ROOT)

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ '–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å'")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    try:
        from tests.test_basic_architecture import TestBasicArchitecture
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestBasicArchitecture))
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è EvolutionSystem
    try:
        from tests.test_evolution_system import TestEvolutionSystem
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestEvolutionSystem))
        print("‚úÖ EvolutionSystem —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EvolutionSystem —Ç–µ—Å—Ç–æ–≤: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è EmotionSystem
    try:
        from tests.test_emotion_system import TestEmotionSystem
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestEmotionSystem))
        print("‚úÖ EmotionSystem —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EmotionSystem —Ç–µ—Å—Ç–æ–≤: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è CombatSystem
    try:
        from tests.test_combat_system import TestCombatSystem
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestCombatSystem))
        print("‚úÖ CombatSystem —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CombatSystem —Ç–µ—Å—Ç–æ–≤: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º (–∫–æ–≥–¥–∞ –æ–Ω–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã)
    # –¢–µ—Å—Ç—ã —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ü–µ–Ω: —Å–æ–±—ã—Ç–∏–µ/—Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ü–µ–Ω—ã
    try:
        from tests.test_scene_manager_events import TestSceneManagerEvents
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestSceneManagerEvents))
        print("‚úÖ SceneManager events/state —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SceneManager events/state —Ç–µ—Å—Ç–æ–≤: {e}")

    # –õ–µ–≥–∫–∏–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI: —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π AI –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏
    # SystemFactory/Manager ordering
    try:
        from tests.test_system_factory_ordering import TestSystemFactoryOrdering
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestSystemFactoryOrdering))
        print("‚úÖ SystemFactory ordering —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ SystemFactory ordering —Ç–µ—Å—Ç–æ–≤: {e}")

    # Performance metrics toggle
    try:
        from tests.test_performance_metrics_toggle import TestPerformanceMetricsToggle
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestPerformanceMetricsToggle))
        print("‚úÖ Performance metrics toggle —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ performance metrics toggle —Ç–µ—Å—Ç–æ–≤: {e}")

    # Plugin lifecycle
    try:
        from tests.test_plugin_lifecycle import TestPluginLifecycle
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestPluginLifecycle))
        print("‚úÖ Plugin lifecycle —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ plugin lifecycle —Ç–µ—Å—Ç–æ–≤: {e}")

    # Repository perf
    try:
        from tests.test_repository_perf import TestRepositoryPerf
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestRepositoryPerf))
        print("‚úÖ Repository perf —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ repository perf —Ç–µ—Å—Ç–æ–≤: {e}")
    try:
        from tests.test_ai_integration_minimal import TestAIIntegrationMinimal
        test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestAIIntegrationMinimal))
        print("‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
    # –õ–µ–≥–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å on/emit alias –≤ EventSystem
    try:
        from src.core.event_system import EventSystem, EventPriority
        class IntegrationEventAlias(unittest.TestCase):
            def runTest(self):
                es = EventSystem()
                es.initialize()
                hit = {"n": 0}
                def h(ev):
                    hit["n"] += 1
                self.assertTrue(es.on("_alias_test", h, EventPriority.NORMAL))
                self.assertTrue(es.emit_event("_alias_test", {"ok": True}, "test", EventPriority.NORMAL))
                es.process_events()
                self.assertEqual(hit["n"], 1)
        test_suite.addTest(IntegrationEventAlias())
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç: event on/emit alias –¥–æ–±–∞–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç event alias –ø—Ä–æ–ø—É—â–µ–Ω: {e}")
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: {test_suite.countTestCases()}")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    start_time = time.time()
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    end_time = time.time()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
    print(f"‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.errors)}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    
    if result.failures:
        print("\n‚ùå –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´:")
        for test, traceback in result.failures:
            print(f"  - {test}: {traceback.split('AssertionError:')[-1].strip()}")
    
    if result.errors:
        print("\n‚ö†Ô∏è  –¢–ï–°–¢–´ –° –û–®–ò–ë–ö–ê–ú–ò:")
        for test, traceback in result.errors:
            print(f"  - {test}: {traceback.split('Exception:')[-1].strip()}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if result.wasSuccessful():
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
    else:
        print("\nüí• –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
        return False

def run_specific_test(test_name):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    test_suite = unittest.TestSuite()
    
    if test_name.lower() == "evolution":
        try:
            from tests.test_evolution_system import TestEvolutionSystem
            test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestEvolutionSystem))
            print("‚úÖ EvolutionSystem —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EvolutionSystem —Ç–µ—Å—Ç–æ–≤: {e}")
            return False
    
    elif test_name.lower() == "emotion":
        try:
            from tests.test_emotion_system import TestEmotionSystem
            test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestEmotionSystem))
            print("‚úÖ EmotionSystem —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EmotionSystem —Ç–µ—Å—Ç–æ–≤: {e}")
            return False
    
    elif test_name.lower() == "combat":
        try:
            from tests.test_combat_system import TestCombatSystem
            test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestCombatSystem))
            print("‚úÖ CombatSystem —Ç–µ—Å—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ CombatSystem —Ç–µ—Å—Ç–æ–≤: {e}")
            return False
    
    elif test_name.lower() == "basic":
        try:
            from tests.test_basic_architecture import TestBasicArchitecture
            test_suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestBasicArchitecture))
            print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
            return False
    
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ—Å—Ç: {test_name}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã: basic, evolution, emotion, combat")
        return False
    
    print(f"\nüìä –¢–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤: {test_suite.countTestCases()}")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    start_time = time.time()
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    end_time = time.time()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("=" * 80)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(result.failures)}")
    print(f"‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏: {len(result.errors)}")
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {result.testsRun}")
    
    return result.wasSuccessful()

def main():
    # Ensure UTF-8 output on Windows consoles
    try:
        if sys.stdout.encoding.lower() != 'utf-8':
            sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='ignore')
    except Exception:
        pass
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        test_name = sys.argv[1]
        success = run_specific_test(test_name)
    else:
        success = run_all_tests()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)

if __name__ == '__main__':
    main()
