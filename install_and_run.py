#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
"–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å"
"""

import subprocess
import sys
import os
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        logger.error("–¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ!")
        logger.error(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    
    logger.info(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    return True


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    requirements_file = Path("requirements.txt")
    
    if not requirements_file.exists():
        logger.error("–§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º pip
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "--upgrade", "pip"
        ])
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        
        logger.info("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
        return True
        
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False


def check_assets():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    required_dirs = [
        "graphics",
        "audio", 
        "data",
        "config"
    ]
    
    missing_dirs = []
    for dir_name in required_dirs:
        if not Path(dir_name).exists():
            missing_dirs.append(dir_name)
    
    if missing_dirs:
        logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {', '.join(missing_dirs)}")
        logger.warning("–ò–≥—Ä–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        logger.info("–í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞–π–¥–µ–Ω—ã!")
    
    return len(missing_dirs) == 0


def create_missing_configs():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    # –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏–≥—Ä—ã
    game_config = {
        "display": {
            "window_width": 1280,
            "window_height": 720,
            "fullscreen": False,
            "vsync": True,
            "render_fps": 60
        },
        "audio": {
            "master_volume": 0.8,
            "music_volume": 0.6,
            "effects_volume": 0.8
        },
        "gameplay": {
            "difficulty": "normal",
            "auto_save": True,
            "save_interval": 300
        }
    }
    
    game_config_path = config_dir / "game_settings.json"
    if not game_config_path.exists():
        import json
        with open(game_config_path, 'w', encoding='utf-8') as f:
            json.dump(game_config, f, indent=2, ensure_ascii=False)
        logger.info("–°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏–≥—Ä—ã")


def run_game():
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        main_file = Path("run_game.py")
        if not main_file.exists():
            logger.error("–§–∞–π–ª run_game.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        result = subprocess.run([sys.executable, "run_game.py"], 
                               capture_output=False)
        
        if result.returncode == 0:
            logger.info("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {result.returncode}")
            return False
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å")
    print("=" * 60)
    print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if not check_python_version():
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not install_dependencies():
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Å—É—Ä—Å—ã
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
    check_assets()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–Ω—Ñ–∏–≥–∏
    print("\n‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    create_missing_configs()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
    success = run_game()
    
    if success:
        print("\n‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüõë –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)
