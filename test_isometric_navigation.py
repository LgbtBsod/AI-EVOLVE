#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –º–∞—è–∫–∞–º
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.isometric_system import (
    IsometricProjection, BeaconNavigationSystem, BeaconType, 
    AStarPathfinder, IsometricRenderer
)
from core.advanced_entity import AdvancedGameEntity
from core.ai_system import AdaptiveAISystem

def test_isometric_projection():
    """–¢–µ—Å—Ç –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏"""
    print("=== –¢–µ—Å—Ç –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ ===")
    
    projection = IsometricProjection(tile_width=64, tile_height=32)
    
    # –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    world_coords = [(0, 0, 0), (10, 5, 0), (-5, 10, 2)]
    
    for world_x, world_y, world_z in world_coords:
        iso_x, iso_y = projection.world_to_iso(world_x, world_y, world_z)
        back_x, back_y = projection.iso_to_world(iso_x, iso_y, world_z)
        
        print(f"–ú–∏—Ä ({world_x}, {world_y}, {world_z}) -> –ò–∑–æ ({iso_x:.1f}, {iso_y:.1f}) -> –û–±—Ä–∞—Ç–Ω–æ ({back_x:.1f}, {back_y:.1f})")
    
    # –¢–µ—Å—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    projection.set_zoom(2.0)
    iso_x, iso_y = projection.world_to_iso(10, 10, 0)
    print(f"–° –º–∞—Å—à—Ç–∞–±–æ–º 2.0: (10, 10, 0) -> ({iso_x:.1f}, {iso_y:.1f})")
    
    print("–¢–µ—Å—Ç –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_beacon_navigation():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞—è–∫–∞–º"""
    print("=== –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–∞—è–∫–∞–º ===")
    
    nav_system = BeaconNavigationSystem(world_width=1000, world_height=1000)
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞
    player_pos = (50, 50, 0)
    
    print(f"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: {player_pos}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—è–∫–æ–≤: {len(nav_system.beacons)}")
    
    # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –º–∞—è–∫–æ–≤
    discovered_beacon = nav_system.discover_beacon(player_pos)
    if discovered_beacon:
        print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—è–∫: {discovered_beacon.id}")
    
    # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–∞—è–∫–∞
    nearest_beacon = nav_system.get_nearest_beacon(player_pos, BeaconType.NAVIGATION)
    if nearest_beacon:
        print(f"–ë–ª–∏–∂–∞–π—à–∏–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π –º–∞—è–∫: {nearest_beacon.id} –≤ –ø–æ–∑–∏—Ü–∏–∏ {nearest_beacon.position}")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        success = nav_system.set_navigation_target(nearest_beacon.id)
        print(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {'–£—Å–ø–µ—à–Ω–æ' if success else '–ù–µ—É–¥–∞—á–Ω–æ'}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        direction = nav_system.get_navigation_direction(player_pos)
        if direction:
            print(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –º–∞—è–∫—É: ({direction[0]:.2f}, {direction[1]:.2f})")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—è–∫–∞—Ö
    beacon_info = nav_system.get_beacon_info()
    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –º–∞—è–∫–æ–≤: {beacon_info['discovered_beacons']}/{beacon_info['total_beacons']}")
    
    print("–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_pathfinding():
    """–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ A*"""
    print("=== –¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ A* ===")
    
    pathfinder = AStarPathfinder(20, 20)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
    obstacles = [(5, 5), (5, 6), (5, 7), (6, 7), (7, 7)]
    for obs_x, obs_y in obstacles:
        pathfinder.add_obstacle(obs_x, obs_y)
    
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: {len(obstacles)}")
    
    # –ü–æ–∏—Å–∫ –ø—É—Ç–∏
    start = (3, 3)
    target = (8, 8)
    
    path = pathfinder.find_path(start[0], start[1], target[0], target[1])
    
    if path:
        print(f"–ü—É—Ç—å –Ω–∞–π–¥–µ–Ω –æ—Ç {start} –¥–æ {target}:")
        print(f"–î–ª–∏–Ω–∞ –ø—É—Ç–∏: {len(path)} —à–∞–≥–æ–≤")
        print(f"–ü—É—Ç—å: {path[:5]}..." if len(path) > 5 else f"–ü—É—Ç—å: {path}")
    else:
        print(f"–ü—É—Ç—å –æ—Ç {start} –¥–æ {target} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("–¢–µ—Å—Ç –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_ai_beacon_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—è–∫–æ–≤"""
    print("=== –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—è–∫–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    player = AdvancedGameEntity(
        entity_id="TEST_PLAYER",
        entity_type="player",
        name="–¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫",
        position=(100, 100, 0)
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ò–ò
    ai = AdaptiveAISystem("TEST_PLAYER")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∏—Ä–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∞—è–∫–æ–≤
    world = type('MockWorld', (), {})()
    world.beacon_system = BeaconNavigationSystem(world_width=1000, world_height=1000)
    world.entities = []
    world.items = []
    world.obstacles = []
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    world.beacon_system.set_navigation_target("BEACON_MAIN")
    
    print(f"–ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: {player.position}")
    print(f"–ê–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å: {world.beacon_system.active_target}")
    
    # –¢–µ—Å—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    for i in range(3):
        dx, dy = ai.get_autonomous_movement(player, world)
        print(f"–®–∞–≥ {i+1}: –¥–≤–∏–∂–µ–Ω–∏–µ ({dx:.2f}, {dy:.2f})")
        
        if dx != 0 or dy != 0:
            player.move_pygame(dx, dy)
            print(f"–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞: {player.position}")
    
    print("–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ò–ò —Å –º–∞—è–∫–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

def test_beacon_discovery():
    """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—è–∫–æ–≤"""
    print("=== –¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—è–∫–æ–≤ ===")
    
    nav_system = BeaconNavigationSystem()
    
    # –ü–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_positions = [
        (50, 50, 0),    # –î–∞–ª–µ–∫–æ –æ—Ç –º–∞—è–∫–æ–≤
        (500, 500, 0),  # –†—è–¥–æ–º —Å –≥–ª–∞–≤–Ω—ã–º –º–∞—è–∫–æ–º
        (200, 300, 0),  # –†—è–¥–æ–º —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –º–∞—è–∫–æ–º
        (800, 200, 0),  # –†—è–¥–æ–º —Å —Ä–µ—Å—É—Ä—Å–Ω—ã–º –º–∞—è–∫–æ–º
    ]
    
    for pos in test_positions:
        discovered = nav_system.discover_beacon(pos)
        if discovered:
            print(f"–í –ø–æ–∑–∏—Ü–∏–∏ {pos} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –º–∞—è–∫: {discovered.id} ({discovered.beacon_type.value})")
        else:
            print(f"–í –ø–æ–∑–∏—Ü–∏–∏ {pos} –º–∞—è–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    beacon_info = nav_system.get_beacon_info()
    print(f"\n–ò—Ç–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {beacon_info['discovered_beacons']}/{beacon_info['total_beacons']} –º–∞—è–∫–æ–≤")
    
    print("–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–∞—è–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω\n")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...\n")
    
    try:
        test_isometric_projection()
        test_beacon_navigation()
        test_pathfinding()
        test_ai_beacon_integration()
        test_beacon_discovery()
        
        print("üéØ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
