#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥ –∏–∑ Spelunky –∏ Hades.
–£–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π.
"""

import time
import random
import math
import logging
from typing import Dict, List, Optional, Any, Tuple, Set
from dataclasses import dataclass, field
from enum import Enum
import uuid

logger = logging.getLogger(__name__)


class RiskLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞"""
    MINIMAL = "minimal"      # 0.5x –Ω–∞–≥—Ä–∞–¥—ã, 0.7x —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    LOW = "low"              # 0.8x –Ω–∞–≥—Ä–∞–¥—ã, 0.9x —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    NORMAL = "normal"        # 1.0x –Ω–∞–≥—Ä–∞–¥—ã, 1.0x —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    HIGH = "high"            # 1.3x –Ω–∞–≥—Ä–∞–¥—ã, 1.2x —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    EXTREME = "extreme"      # 1.8x –Ω–∞–≥—Ä–∞–¥—ã, 1.5x —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    NIGHTMARE = "nightmare"  # 2.5x –Ω–∞–≥—Ä–∞–¥—ã, 2.0x —Å–ª–æ–∂–Ω–æ—Å—Ç—å


class RiskCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∏—Å–∫–æ–≤"""
    COMBAT = "combat"              # –ë–æ–µ–≤—ã–µ —Ä–∏—Å–∫–∏
    EXPLORATION = "exploration"    # –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–∏—Å–∫–∏
    TIME_PRESSURE = "time_pressure" # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    RESOURCE_SCARCITY = "resource_scarcity" # –ù–µ—Ö–≤–∞—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    ENVIRONMENTAL = "environmental" # –≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    CURSE = "curse"               # –ü—Ä–æ–∫–ª—è—Ç–∏—è
    SACRIFICE = "sacrifice"       # –ñ–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏—è
    GAMBLE = "gamble"             # –ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã


@dataclass
class RiskFactor:
    """–§–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞"""
    factor_id: str
    name: str
    description: str
    category: RiskCategory
    risk_multiplier: float  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∏—Å–∫–∞ (1.0 = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
    reward_multiplier: float  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã
    duration: float = -1  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (-1 = –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π)
    start_time: float = field(default_factory=time.time)
    stacks: int = 1
    
    # –£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    activation_conditions: Dict[str, Any] = field(default_factory=dict)
    deactivation_conditions: Dict[str, Any] = field(default_factory=dict)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    special_effects: List[str] = field(default_factory=list)
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–∏—Å–∫–∞"""
        if self.duration < 0:
            return False
        return time.time() - self.start_time >= self.duration
    
    def get_effective_risk_multiplier(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Ä–∏—Å–∫–∞ —Å —É—á—ë—Ç–æ–º —Å—Ç–∞–∫–æ–≤"""
        base_multiplier = self.risk_multiplier
        
        if self.stacks > 1:
            # –£–±—ã–≤–∞—é—â–∞—è –æ—Ç–¥–∞—á–∞ –æ—Ç —Å—Ç–∞–∫–æ–≤
            stack_bonus = (self.stacks - 1) * 0.2
            return base_multiplier * (1.0 + stack_bonus)
        
        return base_multiplier
    
    def get_effective_reward_multiplier(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞–≥—Ä–∞–¥—ã —Å —É—á—ë—Ç–æ–º —Å—Ç–∞–∫–æ–≤"""
        base_multiplier = self.reward_multiplier
        
        if self.stacks > 1:
            # –£–±—ã–≤–∞—é—â–∞—è –æ—Ç–¥–∞—á–∞ –æ—Ç —Å—Ç–∞–∫–æ–≤
            stack_bonus = (self.stacks - 1) * 0.15
            return base_multiplier * (1.0 + stack_bonus)
        
        return base_multiplier


@dataclass
class RiskRewardEvent:
    """–°–æ–±—ã—Ç–∏–µ —Ä–∏—Å–∫–∞ –∏ –Ω–∞–≥—Ä–∞–¥—ã"""
    event_id: str
    event_type: str
    risk_level: RiskLevel
    potential_rewards: List[Dict[str, Any]]
    risk_factors: List[str]  # ID —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞
    timestamp: float = field(default_factory=time.time)
    completed: bool = False
    success: bool = False
    actual_rewards: List[Dict[str, Any]] = field(default_factory=list)


class RiskRewardSystem:
    """–°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥"""
    
    def __init__(self, memory_system, curse_blessing_system):
        self.memory_system = memory_system
        self.curse_blessing_system = curse_blessing_system
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
        self.active_risk_factors: Dict[str, RiskFactor] = {}
        
        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–±—ã—Ç–∏–π
        self.event_history: List[RiskRewardEvent] = []
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_risks_taken = 0
        self.total_rewards_earned = 0
        self.successful_risk_events = 0
        self.failed_risk_events = 0
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self._initialize_risk_configs()
        
        # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
        self._current_risk_level = RiskLevel.NORMAL
        
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def calculate_current_risk(self) -> float:
        """–†–∞—Å—á—ë—Ç —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        if not self.active_risk_factors:
            return 1.0
        
        total_risk = 1.0
        
        for factor in self.active_risk_factors.values():
            total_risk *= factor.get_effective_risk_multiplier()
        
        return total_risk
    
    def calculate_reward_multiplier(self) -> float:
        """–†–∞—Å—á—ë—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è –Ω–∞–≥—Ä–∞–¥—ã"""
        if not self.active_risk_factors:
            return 1.0
        
        total_reward = 1.0
        
        for factor in self.active_risk_factors.values():
            total_reward *= factor.get_effective_reward_multiplier()
        
        return total_reward
    
    def add_risk_factor(self, name: str, description: str = None, 
                       multiplier: float = 1.2, duration: float = 300.0,
                       category: RiskCategory = RiskCategory.COMBAT) -> str:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–∏—Å–∫–∞"""
        factor_id = str(uuid.uuid4())
        
        factor = RiskFactor(
            factor_id=factor_id,
            name=name,
            description=description or f"–§–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞: {name}",
            category=category,
            risk_multiplier=multiplier,
            reward_multiplier=1.0,
            duration=duration
        )
        
        self.active_risk_factors[factor_id] = factor
        self._update_risk_level()
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞: {name} (–º–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier})")
        return factor_id
    
    def remove_risk_factor(self, factor_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∞ —Ä–∏—Å–∫–∞"""
        if factor_id in self.active_risk_factors:
            del self.active_risk_factors[factor_id]
            self._update_risk_level()
            logger.info(f"–£–¥–∞–ª—ë–Ω —Ñ–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞: {factor_id}")
    
    def trigger_risk_event(self, event_type: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–∫–∞"""
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
        suitable_events = self._find_suitable_events(event_type)
        
        if not suitable_events:
            return {"success": False, "reason": "No suitable events"}
        
        # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        event = random.choice(suitable_events)
        
        # –†–∞—Å—á—ë—Ç —à–∞–Ω—Å–∞ —É—Å–ø–µ—Ö–∞
        base_success_rate = 0.5
        risk_modifier = self.calculate_current_risk()
        final_success_rate = max(0.1, min(0.9, base_success_rate / risk_modifier))
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success = random.random() < final_success_rate
        
        # –†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä–∞–¥
        if success:
            reward_multiplier = self.calculate_reward_multiplier()
            enhanced_rewards = []
            
            for reward in event.potential_rewards:
                enhanced_reward = self._enhance_reward(reward, reward_multiplier)
                enhanced_rewards.append(enhanced_reward)
            
            result = {
                "event_id": event.event_id,
                "event_type": event.event_type,
                "success": True,
                "rewards": enhanced_rewards,
                "risk_level": event.risk_level.value
            }
        else:
            result = {
                "event_id": event.event_id,
                "event_type": event.event_type,
                "success": False,
                "risk_level": event.risk_level.value
            }
        
        # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å
        self._record_risk_event(event, result, context)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        self._update_risk_level()
        
        return result
    
    def suggest_risk_opportunities(self, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Ä–∏—Å–∫–∞"""
        current_risk = self.calculate_current_risk()
        opportunities = []
        
        # –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        successful_risks = self.memory_system.search_memories(
            memory_type=MemoryType.RISK_ASSESSMENT,
            search_criteria={"success": True}
        )
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–ø—ã—Ç–∞
        for memory in successful_risks[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —É—Å–ø–µ—à–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤
            if memory.content.get("risk_level", 1.0) <= current_risk * 1.2:
                opportunities.append({
                    "type": "memory_based",
                    "description": f"–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {memory.content.get('event_name', 'Unknown')}",
                    "expected_success": memory.content.get("success_rate", 0.5) * 1.1,
                    "potential_reward": memory.content.get("reward_value", 1.0) * self.calculate_reward_multiplier()
                })
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —É—Å–ª–æ–≤–∏–π
        if current_risk > 2.0:
            opportunities.append({
                "type": "high_risk_high_reward",
                "description": "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
                "expected_success": 0.3,
                "potential_reward": 5.0 * self.calculate_reward_multiplier()
            })
        
        if len(self.active_risk_factors) == 0:
            opportunities.append({
                "type": "safe_exploration",
                "description": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏",
                "expected_success": 0.9,
                "potential_reward": 1.2 * self.calculate_reward_multiplier()
            })
        
        return opportunities
    
    def _initialize_risk_configs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Ä–∏—Å–∫–æ–≤"""
        self.risk_events = [
            RiskRewardEvent(
                event_id="cursed_treasure",
                event_type="treasure",
                risk_level=RiskLevel.HIGH,
                potential_rewards=[{"type": "legendary_item", "value": 1000}],
                risk_factors=["corruption", "curse_application"]
            ),
            RiskRewardEvent(
                event_id="boss_challenge",
                event_type="boss",
                risk_level=RiskLevel.EXTREME,
                potential_rewards=[{"type": "boss_essence", "value": 2000}],
                risk_factors=["mortal_danger", "equipment_damage"]
            ),
            RiskRewardEvent(
                event_id="dimensional_rift",
                event_type="rift",
                risk_level=RiskLevel.NIGHTMARE,
                potential_rewards=[{"type": "dimensional_artifact", "value": 1500}],
                risk_factors=["dimensional_instability", "reality_distortion"]
            ),
            RiskRewardEvent(
                event_id="evolution_gamble",
                event_type="gamble",
                risk_level=RiskLevel.HIGH,
                potential_rewards=[{"type": "rapid_evolution", "value": 800}],
                risk_factors=["evolution_instability", "genetic_damage"]
            )
        ]
    
    def _find_suitable_events(self, event_type: str) -> List[RiskRewardEvent]:
        """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        suitable_events = []
        
        for event in self.risk_events:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
            if event_type != "any" and event_type not in event.event_type:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            if event.risk_level.value <= self._current_risk_level.value:
                suitable_events.append(event)
        
        return suitable_events
    
    def _risk_level_to_value(self, risk_level: RiskLevel) -> float:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –≤ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
        mapping = {
            RiskLevel.MINIMAL: 0.5,
            RiskLevel.LOW: 0.8,
            RiskLevel.NORMAL: 1.0,
            RiskLevel.HIGH: 1.3,
            RiskLevel.EXTREME: 1.8,
            RiskLevel.NIGHTMARE: 2.5
        }
        return mapping.get(risk_level, 1.0)
    
    def _enhance_reward(self, reward: Dict[str, Any], multiplier: float) -> Dict[str, Any]:
        """–£—Å–∏–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã"""
        base_value = reward.get("value", 100)
        enhanced_value = base_value * multiplier
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –Ω–∞–≥—Ä–∞–¥—ã
        if enhanced_value < 200:
            tier = "common"
        elif enhanced_value < 500:
            tier = "uncommon"
        elif enhanced_value < 1000:
            tier = "rare"
        elif enhanced_value < 2000:
            tier = "epic"
        elif enhanced_value < 5000:
            tier = "legendary"
        else:
            tier = "mythic"
        
        return {
            "type": reward["type"],
            "tier": tier,
            "value": enhanced_value,
            "original_value": base_value,
            "multiplier": multiplier
        }
    
    def _record_risk_event(self, event: RiskRewardEvent, result: Dict[str, Any], 
                          context: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç—å"""
        try:
            memory_content = {
                "event_id": event.event_id,
                "event_type": event.event_type,
                "success": result["success"],
                "risk_level": event.risk_level.value,
                "context": context
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.event_history.append(event)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–∫–∞: {e}")
    
    def _update_risk_level(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞"""
        current_risk = self.calculate_current_risk()
        self._current_risk_level = self._calculate_risk_level(current_risk)
    
    def _calculate_risk_level(self, risk_value: float) -> RiskLevel:
        """–†–∞—Å—á—ë—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
        if risk_value < 0.8:
            return RiskLevel.MINIMAL
        elif risk_value < 1.1:
            return RiskLevel.LOW
        elif risk_value < 1.3:
            return RiskLevel.NORMAL
        elif risk_value < 1.7:
            return RiskLevel.HIGH
        elif risk_value < 2.2:
            return RiskLevel.EXTREME
        else:
            return RiskLevel.NIGHTMARE
    
    def get_risk_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∏—Å–∫–æ–≤"""
        return {
            "current_risk_level": self._current_risk_level.value,
            "risk_multiplier": self.calculate_current_risk(),
            "reward_multiplier": self.calculate_reward_multiplier(),
            "active_risk_factors": len(self.active_risk_factors),
            "total_events": len(self.event_history),
            "success_rate": sum(1 for event in self.event_history if event.success) / max(1, len(self.event_history)),
            "average_risk": sum(self._risk_level_to_value(event.risk_level) for event in self.event_history) / max(1, len(self.event_history))
        }
