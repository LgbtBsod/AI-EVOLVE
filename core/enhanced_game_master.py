#!/usr/bin/env python3
"""
–ú–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º–∞ Enhanced Edition.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑ –∫—É–ª—å—Ç–æ–≤—ã—Ö –∏–≥—Ä.
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
"""

import time
import random
import logging
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
from .generational_memory_system import GenerationalMemorySystem
from .emotional_ai_influence import EmotionalAIInfluenceSystem
from .enhanced_combat_learning import EnhancedCombatLearningSystem
from .enhanced_content_generator import EnhancedContentGenerator
from .enhanced_skill_system import SkillManager, SkillLearningAI
from .curse_blessing_system import CurseBlessingSystem, CurseType, BlessingType
from .risk_reward_system import RiskRewardSystem, RiskLevel
from .meta_progression_system import MetaProgressionSystem, MetaCurrency
from .enhanced_inventory_system import EnhancedInventorySystem
from .enhanced_ui_system import EnhancedUISystem, UIState
from .emotion_system import AdvancedEmotionSystem, EmotionCode

logger = logging.getLogger(__name__)


class GamePhase(Enum):
    """–§–∞–∑—ã –∏–≥—Ä—ã"""
    INITIALIZATION = "initialization"
    MAIN_MENU = "main_menu"
    CHARACTER_CREATION = "character_creation"
    GAMEPLAY = "gameplay"
    EVOLUTION = "evolution"
    DEATH = "death"
    META_PROGRESSION = "meta_progression"
    CREDITS = "credits"


class DifficultyMode(Enum):
    """–†–µ–∂–∏–º—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    STORY = "story"           # –°—é–∂–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    NORMAL = "normal"         # –û–±—ã—á–Ω—ã–π
    HARD = "hard"             # –°–ª–æ–∂–Ω—ã–π
    NIGHTMARE = "nightmare"   # –ö–æ—à–º–∞—Ä
    HELL = "hell"             # –ê–¥
    CUSTOM = "custom"         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π


@dataclass
class GameSession:
    """–ò–≥—Ä–æ–≤–∞—è —Å–µ—Å—Å–∏—è"""
    session_id: str
    start_time: float
    current_phase: GamePhase
    difficulty: DifficultyMode
    player_stats: Dict[str, Any] = field(default_factory=dict)
    run_statistics: Dict[str, Any] = field(default_factory=dict)
    achievements_earned: List[str] = field(default_factory=list)
    
    def get_playtime(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥—Ä—ã"""
        return time.time() - self.start_time


class EnhancedGameMaster:
    """–ú–∞—Å—Ç–µ—Ä-—Å–∏—Å—Ç–µ–º–∞ Enhanced Edition"""
    
    def __init__(self, screen_width: int = 1600, screen_height: int = 900):
        logger.info("üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Enhanced Game Master...")
        
        self.screen_width = screen_width
        self.screen_height = screen_height
        
        # –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è
        self.current_session: Optional[GameSession] = None
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.memory_system = GenerationalMemorySystem()
        self.emotional_ai_system = EmotionalAIInfluenceSystem(self.memory_system)
        self.emotion_system = AdvancedEmotionSystem(None)  # effect_db –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
        
        # –°–∏—Å—Ç–µ–º—ã –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ —Ä–∏—Å–∫–æ–≤
        self.curse_blessing_system = CurseBlessingSystem(self.memory_system)
        self.risk_reward_system = RiskRewardSystem(self.memory_system, self.curse_blessing_system)
        
        # –ë–æ–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.combat_learning_system = EnhancedCombatLearningSystem(
            self.memory_system,
            self.emotional_ai_system,
            self.curse_blessing_system,
            self.risk_reward_system
        )
        
        # –°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤
        self.content_generator = EnhancedContentGenerator(self.memory_system)
        self.skill_manager = SkillManager(self.memory_system, self.emotional_ai_system)
        self.skill_learning_ai = SkillLearningAI(self.skill_manager, None)
        
        # –°–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        self.meta_progression_system = MetaProgressionSystem(self.memory_system)
        self.inventory_system = EnhancedInventorySystem(self.memory_system)
        
        # –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.ui_system = EnhancedUISystem(screen_width, screen_height)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.event_coordinator = EventCoordinator()
        self.synergy_manager = SynergyManager()
        self.balance_controller = BalanceController()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.analytics_system = AnalyticsSystem()
        
        logger.info("‚úÖ Enhanced Game Master –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def start_new_session(self, difficulty: DifficultyMode = DifficultyMode.NORMAL) -> str:
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        session_id = f"session_{int(time.time())}"
        
        self.current_session = GameSession(
            session_id=session_id,
            start_time=time.time(),
            current_phase=GamePhase.CHARACTER_CREATION,
            difficulty=difficulty
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        self._initialize_session()
        
        logger.info(f"üéØ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_id} (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty.value})")
        return session_id
    
    def update(self, delta_time: float, input_events: List[Any]) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if not self.current_session:
            return {"status": "no_session"}
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        self._update_core_systems(delta_time)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
        self.ui_system.update(delta_time, input_events)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
        events = self.event_coordinator.process_events(delta_time)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º–∞–º–∏
        self._process_system_events(events)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω–µ—Ä–≥–∏–π
        self.synergy_manager.update(delta_time)
        
        # –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.balance_controller.update(delta_time)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.analytics_system.record_frame_data(delta_time)
        
        return {
            "status": "running",
            "phase": self.current_session.current_phase.value,
            "playtime": self.current_session.get_playtime(),
            "events": events
        }
    
    def trigger_evolution_event(self, entity_id: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è —ç–≤–æ–ª—é—Ü–∏–∏"""
        logger.info(f"üß¨ –°–æ–±—ã—Ç–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ –¥–ª—è {entity_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —ç–≤–æ–ª—é—Ü–∏–∏
        evolution_ready = self._check_evolution_conditions(entity_id, context)
        if not evolution_ready:
            return {"success": False, "reason": "Evolution conditions not met"}
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        evolution_options = self._generate_evolution_options(entity_id, context)
        
        # –í–ª–∏—è–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π –Ω–∞ —ç–≤–æ–ª—é—Ü–∏—é
        memory_influence = self.memory_system.influence_decision(
            context, [opt["id"] for opt in evolution_options]
        )
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
        emotional_state = self.emotion_system.current_state
        emotional_influence = self._calculate_emotional_evolution_influence(emotional_state)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏
        selected_option = self._select_evolution_option(
            evolution_options, memory_influence, emotional_influence
        )
        
        evolution_result = self._apply_evolution(entity_id, selected_option, context)
        
        # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π
        self.memory_system.add_memory(
            memory_type="evolutionary_success",
            content={
                "entity_id": entity_id,
                "evolution_option": selected_option,
                "result": evolution_result,
                "context": context
            },
            intensity=0.8,
            emotional_impact=0.6
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞-–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
        self.meta_progression_system.award_currency(
            MetaCurrency.EVOLUTION_POINTS, 
            evolution_result.get("evolution_points", 10),
            "evolution_event"
        )
        
        return evolution_result
    
    def trigger_combat_encounter(self, enemy_data: Dict[str, Any], 
                                context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ–µ–≤–æ–≥–æ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è"""
        logger.info(f"‚öîÔ∏è –ë–æ–µ–≤–æ–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ: {enemy_data.get('name', 'Unknown')}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–∞–≥–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        enemy = self.content_generator.generate_enemy(
            enemy_data["biome"], enemy_data["level"], context
        )
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        risk_level = self.risk_reward_system.calculate_current_risk()
        enemy = self._apply_risk_modifiers_to_enemy(enemy, risk_level)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        combat_context = self.combat_learning_system.CombatContext(
            entity_id="player",
            target_id=enemy.guid,
            current_phase=self.combat_learning_system.CombatPhase.ENGAGE,
            active_tactic=self.combat_learning_system.CombatTactic.AGGRESSIVE_RUSH,
            health_percent=context.get("player_health", 1.0),
            stamina_percent=context.get("player_stamina", 1.0),
            distance_to_target=context.get("distance", 100.0),
            target_health_percent=1.0,
            environmental_hazards=context.get("hazards", []),
            available_cover=context.get("cover", []),
            emotional_state=self.emotion_system.current_state.get_dominant_emotion() or "neutral",
            combat_duration=0.0,
            pattern_success_history=[]
        )
        
        # –ü—Ä–∏–Ω—è—Ç–∏–µ –±–æ–µ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ò–ò
        combat_decision = self.combat_learning_system.make_combat_decision("player", combat_context)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—è
        combat_result = self._execute_combat(enemy, combat_context, combat_decision)
        
        # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        self.combat_learning_system.learn_from_combat_result(
            "player", combat_context, combat_decision, combat_result
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è
        self._process_combat_results(combat_result, context)
        
        return combat_result
    
    def trigger_item_discovery(self, item_type: str, context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞"""
        logger.info(f"üíé –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item_type}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º —Ä–∏—Å–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥
        reward_multiplier = self.risk_reward_system.calculate_reward_multiplier()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        item_added = self.inventory_system.add_item(item_type, {
            "reward_multiplier": reward_multiplier,
            "context": context
        })
        
        if item_added:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω–µ—Ä–≥–∏–π
            suggestions = self.inventory_system.suggest_item_combinations()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ UI
            self.ui_system.show_notification(
                f"–ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item_type}",
                "item_discovery",
                3.0
            )
            
            return {
                "success": True,
                "item_type": item_type,
                "reward_multiplier": reward_multiplier,
                "synergy_suggestions": suggestions
            }
        
        return {"success": False, "reason": "Could not add item"}
    
    def trigger_curse_blessing_event(self, event_type: str, 
                                    context: Dict[str, Any]) -> Dict[str, Any]:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–∫–ª—è—Ç–∏—è/–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è"""
        logger.info(f"‚ú® –°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è/–±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è: {event_type}")
        
        if event_type.startswith("curse_"):
            curse_type = getattr(CurseType, event_type.replace("curse_", "").upper(), None)
            if curse_type:
                effect_id = self.curse_blessing_system.apply_curse(
                    curse_type, 
                    context.get("intensity", 1.0),
                    context.get("duration", -1),
                    context.get("source", "event")
                )
                
                return {
                    "success": True,
                    "type": "curse",
                    "effect_id": effect_id,
                    "curse_type": curse_type.value
                }
        
        elif event_type.startswith("blessing_"):
            blessing_type = getattr(BlessingType, event_type.replace("blessing_", "").upper(), None)
            if blessing_type:
                effect_id = self.curse_blessing_system.apply_blessing(
                    blessing_type,
                    context.get("intensity", 1.0),
                    context.get("duration", -1),
                    context.get("source", "event")
                )
                
                return {
                    "success": True,
                    "type": "blessing",
                    "effect_id": effect_id,
                    "blessing_type": blessing_type.value
                }
        
        return {"success": False, "reason": "Unknown event type"}
    
    def end_session(self, reason: str = "player_quit") -> Dict[str, Any]:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if not self.current_session:
            return {"success": False, "reason": "No active session"}
        
        logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {reason}")
        
        # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏
        session_stats = self._collect_session_statistics()
        
        # –†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä–∞–¥
        rewards = self.meta_progression_system.calculate_run_rewards(session_stats)
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç
        for currency, amount in rewards.items():
            self.meta_progression_system.award_currency(currency, amount, "session_end")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        new_achievements = self.meta_progression_system.check_achievements(session_stats)
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        if reason == "death" or reason == "completed":
            survival_rate = 1.0 if reason == "completed" else 0.0
            self.memory_system.advance_generation(
                survival_rate, 
                [ach.id for ach in new_achievements]
            )
        
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        self.curse_blessing_system.cleanup_expired_effects()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self._save_session_progress()
        
        session_summary = {
            "session_id": self.current_session.session_id,
            "playtime": self.current_session.get_playtime(),
            "reason": reason,
            "statistics": session_stats,
            "rewards": rewards,
            "new_achievements": [ach.name for ach in new_achievements],
            "generation": self.memory_system.current_generation
        }
        
        self.current_session = None
        
        return session_summary
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        return {
            "memory_system": self.memory_system.get_memory_statistics(),
            "risk_reward": self.risk_reward_system.get_risk_statistics(),
            "curse_blessing": self.curse_blessing_system.get_active_effects_summary(),
            "meta_progression": self.meta_progression_system.get_meta_statistics(),
            "inventory": len(self.inventory_system.inventory),
            "ui_state": self.ui_system.current_state.value,
            "session": {
                "active": self.current_session is not None,
                "phase": self.current_session.current_phase.value if self.current_session else None,
                "playtime": self.current_session.get_playtime() if self.current_session else 0
            }
        }
    
    def _initialize_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–∞-–±–æ–Ω—É—Å–æ–≤
        meta_bonuses = self.meta_progression_system.get_meta_bonuses()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–µ—Ä—Ç
        inheritance_traits = self.meta_progression_system.get_inheritance_traits()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.current_session.run_statistics = {
            "enemies_defeated": 0,
            "bosses_defeated": 0,
            "items_found": 0,
            "evolution_events": 0,
            "deaths": 0,
            "secrets_found": 0,
            "meta_bonuses": meta_bonuses,
            "inheritance_traits": inheritance_traits
        }
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è UI
        self.ui_system.change_state(UIState.IN_GAME)
    
    def _update_core_systems(self, delta_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        self.emotion_system.update(delta_time)
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        self.curse_blessing_system.cleanup_expired_effects()
        
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if random.random() < 0.001:  # 0.1% —à–∞–Ω—Å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
            self.memory_system.cleanup_expired_memories()
    
    def _process_system_events(self, events: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        for event in events:
            event_type = event.get("type")
            
            if event_type == "emotion_trigger":
                self.emotion_system.trigger_emotion(
                    event["emotion_code"],
                    event.get("intensity", 1.0),
                    event.get("source", "system")
                )
            
            elif event_type == "risk_factor_added":
                self.risk_reward_system.add_risk_factor(
                    event["factor_name"],
                    event["description"],
                    event["multiplier"]
                )
            
            elif event_type == "skill_learned":
                self.skill_manager.learn_skill(
                    event["skill_id"],
                    event["entity_id"],
                    event.get("context", {})
                )
    
    def _check_evolution_conditions(self, entity_id: str, context: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —ç–≤–æ–ª—é—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        required_experience = context.get("required_experience", 100)
        current_experience = context.get("current_experience", 0)
        
        if current_experience < required_experience:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        emotional_state = self.emotion_system.current_state
        if emotional_state.emotional_stability < 0.3:
            return False  # –°–ª–∏—à–∫–æ–º –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        
        return True
    
    def _generate_evolution_options(self, entity_id: str, context: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏
        base_options = [
            {
                "id": "combat_evolution",
                "name": "–ë–æ–µ–≤–∞—è —ç–≤–æ–ª—é—Ü–∏—è",
                "description": "–£–ª—É—á—à–µ–Ω–∏–µ –±–æ–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
                "bonuses": {"attack": 10, "defense": 5},
                "requirements": {"combat_experience": 50}
            },
            {
                "id": "mental_evolution",
                "name": "–ú–µ–Ω—Ç–∞–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è",
                "description": "–£–ª—É—á—à–µ–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –ø–∞–º—è—Ç–∏",
                "bonuses": {"intelligence": 15, "memory_capacity": 20},
                "requirements": {"learning_points": 30}
            },
            {
                "id": "adaptive_evolution",
                "name": "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è",
                "description": "–£–ª—É—á—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç–∏",
                "bonuses": {"adaptability": 20, "survival_instinct": 10},
                "requirements": {"survival_time": 1800}  # 30 –º–∏–Ω—É—Ç
            }
        ]
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        available_options = []
        for option in base_options:
            requirements_met = True
            for req, value in option["requirements"].items():
                if context.get(req, 0) < value:
                    requirements_met = False
                    break
            
            if requirements_met:
                available_options.append(option)
        
        return available_options or base_options[:1]  # –ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç
    
    def _calculate_emotional_evolution_influence(self, emotional_state) -> Dict[str, float]:
        """–†–∞—Å—á—ë—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è –Ω–∞ —ç–≤–æ–ª—é—Ü–∏—é"""
        influence = {}
        
        dominant_emotion = emotional_state.get_dominant_emotion()
        if dominant_emotion:
            if dominant_emotion in ["rage", "excitement"]:
                influence["combat_bias"] = 0.3
            elif dominant_emotion in ["curiosity", "trust"]:
                influence["mental_bias"] = 0.3
            elif dominant_emotion in ["fear", "calmness"]:
                influence["adaptive_bias"] = 0.3
        
        return influence
    
    def _select_evolution_option(self, options: List[Dict[str, Any]], 
                                memory_influence: Dict[str, float],
                                emotional_influence: Dict[str, float]) -> Dict[str, Any]:
        """–í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        if not options:
            return {}
        
        # –ü—Ä–æ—Å—Ç–æ–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
        weights = []
        for option in options:
            weight = 1.0
            
            # –í–ª–∏—è–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if option["id"] in memory_influence:
                weight *= memory_influence[option["id"]]
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ
            option_type = option["id"].split("_")[0]
            bias_key = f"{option_type}_bias"
            if bias_key in emotional_influence:
                weight += emotional_influence[bias_key]
            
            weights.append(weight)
        
        # –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        return random.choices(options, weights=weights)[0]
    
    def _apply_evolution(self, entity_id: str, evolution_option: Dict[str, Any], 
                        context: Dict[str, Any]) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏"""
        bonuses = evolution_option.get("bonuses", {})
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ —ç—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏–ª–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—É—â–Ω–æ—Å—Ç–∏)
        applied_bonuses = {}
        for bonus_type, value in bonuses.items():
            applied_bonuses[bonus_type] = value
        
        return {
            "success": True,
            "evolution_id": evolution_option["id"],
            "evolution_name": evolution_option["name"],
            "applied_bonuses": applied_bonuses,
            "evolution_points": sum(bonuses.values())
        }
    
    def _apply_risk_modifiers_to_enemy(self, enemy, risk_level: float):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –∫ –≤—Ä–∞–≥—É"""
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤—Ä–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        multiplier = 1.0 + (risk_level - 1.0) * 0.5
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–∞–≥–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é
        enemy_stats = getattr(enemy, 'stats', {})
        if not enemy_stats:
            enemy_stats = {"health": 100, "damage": 20, "speed": 1.0}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        for stat in enemy_stats:
            enemy_stats[stat] *= multiplier
        
        return enemy
    
    def _execute_combat(self, enemy, combat_context, combat_decision) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ—è"""
        # –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—è
        player_power = 100  # –ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞ –∏–≥—Ä–æ–∫–∞
        enemy_power = getattr(enemy, 'power_level', 50)  # –ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É –≤—Ä–∞–≥–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –í–ª–∏—è–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –ò–ò
        decision_confidence = getattr(combat_decision, 'confidence', 0.5)
        decision_modifier = decision_confidence * 0.5 + 0.5
        effective_player_power = player_power * decision_modifier
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        success = effective_player_power > enemy_power * 0.8
        
        return {
            "success": success,
            "player_power": effective_player_power,
            "enemy_power": enemy_power,
            "decision_quality": decision_confidence,
            "experience_gained": int(enemy_power * 0.1),
            "damage_dealt": int(effective_player_power * 0.8),
            "damage_taken": int(enemy_power * 0.3) if not success else 0
        }
    
    def _process_combat_results(self, combat_result: Dict[str, Any], context: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ—è"""
        if combat_result["success"]:
            # –£—Å–ø–µ—à–Ω—ã–π –±–æ–π
            self.current_session.run_statistics["enemies_defeated"] += 1
            
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
            experience = combat_result.get("experience_gained", 0)
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ–±–µ–¥—É
            self.emotion_system.trigger_emotion(
                "joy", 0.6, "combat_victory"
            )
            
        else:
            # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
            self.current_session.run_statistics["deaths"] += 1
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
            self.emotion_system.trigger_emotion(
                "fear", 0.8, "combat_defeat"
            )
    
    def _collect_session_statistics(self) -> Dict[str, Any]:
        """–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–∏"""
        if not self.current_session:
            return {}
        
        stats = self.current_session.run_statistics.copy()
        stats.update({
            "playtime": self.current_session.get_playtime(),
            "phase": self.current_session.current_phase.value,
            "difficulty": self.current_session.difficulty.value,
            "survived": self.current_session.current_phase != GamePhase.DEATH
        })
        
        return stats
    
    def _save_session_progress(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–µ—Å—Å–∏–∏"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        logger.info("üíæ –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω")


class EventCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏"""
    
    def __init__(self):
        self.pending_events: List[Dict[str, Any]] = []
        self.event_history: List[Dict[str, Any]] = []
    
    def process_events(self, delta_time: float) -> List[Dict[str, Any]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        processed_events = self.pending_events.copy()
        self.pending_events.clear()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.event_history.extend(processed_events)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.event_history) > 1000:
            self.event_history = self.event_history[-500:]
        
        return processed_events
    
    def queue_event(self, event: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –æ—á–µ—Ä–µ–¥—å"""
        event["timestamp"] = time.time()
        self.pending_events.append(event)


class SynergyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω–µ—Ä–≥–∏–π –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏"""
    
    def __init__(self):
        self.active_synergies: List[str] = []
        self.synergy_effects: Dict[str, Dict[str, Any]] = {}
    
    def update(self, delta_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–Ω–µ—Ä–≥–∏–π"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–Ω–µ—Ä–≥–∏–π
        pass
    
    def check_synergy(self, systems: List[str]) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω–µ—Ä–≥–∏–∏ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏"""
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω–µ—Ä–≥–∏–π
        return None


class BalanceController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä—ã"""
    
    def __init__(self):
        self.difficulty_adjustments: Dict[str, float] = {}
        self.balance_history: List[Dict[str, Any]] = []
    
    def update(self, delta_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        # –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        pass
    
    def adjust_difficulty(self, system: str, adjustment: float):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        self.difficulty_adjustments[system] = adjustment


class AnalyticsSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self):
        self.frame_data: List[Dict[str, Any]] = []
        self.performance_metrics: Dict[str, float] = {}
    
    def record_frame_data(self, delta_time: float):
        """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–∞"""
        self.frame_data.append({
            "timestamp": time.time(),
            "delta_time": delta_time,
            "fps": 1.0 / delta_time if delta_time > 0 else 0
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.frame_data) > 1000:
            self.frame_data = self.frame_data[-500:]
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.frame_data:
            return {}
        
        recent_fps = [frame["fps"] for frame in self.frame_data[-60:]]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 60 –∫–∞–¥—Ä–æ–≤
        
        return {
            "average_fps": sum(recent_fps) / len(recent_fps),
            "min_fps": min(recent_fps),
            "max_fps": max(recent_fps),
            "frame_count": len(self.frame_data)
        }
