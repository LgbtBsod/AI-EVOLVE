#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –∏–∑ The Binding of Isaac.
–î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∏—Å–∫–∞ –∏ –Ω–∞–≥—Ä–∞–¥—ã –≤ –∏–≥—Ä—É.
"""

import time
import random
import logging
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import uuid

logger = logging.getLogger(__name__)


class CurseType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–∫–ª—è—Ç–∏–π"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è –∏–∑ Isaac
    CURSE_OF_DARKNESS = "curse_of_darkness"      # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
    CURSE_OF_LABYRINTH = "curse_of_labyrinth"    # –°–ª–æ–∂–Ω—ã–µ –ª–∞–±–∏—Ä–∏–Ω—Ç—ã
    CURSE_OF_LOST = "curse_of_lost"              # –°–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–∞
    CURSE_OF_UNKNOWN = "curse_of_unknown"        # –°–∫—Ä—ã—Ç—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    CURSE_OF_CURSED = "curse_of_cursed"          # –°–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    CURSE_OF_MAZE = "curse_of_maze"              # –ü–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ –¥–≤–µ—Ä–∏
    CURSE_OF_BLIND = "curse_of_blind"            # –°–ª–µ–ø–æ—Ç–∞ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    CURSE_OF_GIANT = "curse_of_giant"            # –ì–∏–≥–∞–Ω—Ç—Å–∫–∏–µ –∫–æ–º–Ω–∞—Ç—ã
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è
    CURSE_OF_FRAGILITY = "curse_of_fragility"    # –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
    CURSE_OF_EXHAUSTION = "curse_of_exhaustion"  # –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å
    CURSE_OF_CONFUSION = "curse_of_confusion"    # –û–±—Ä–∞—â—ë–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    CURSE_OF_SILENCE = "curse_of_silence"        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤
    CURSE_OF_SLOWNESS = "curse_of_slowness"      # –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
    CURSE_OF_WEAKNESS = "curse_of_weakness"      # –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    CURSE_OF_AMNESIA = "curse_of_amnesia"        # –ü–æ—Ç–µ—Ä—è –ø–∞–º—è—Ç–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π


class BlessingType(Enum):
    """–¢–∏–ø—ã –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
    BLESSING_OF_LIGHT = "blessing_of_light"      # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–¥–∏–º–æ—Å—Ç—å
    BLESSING_OF_STRENGTH = "blessing_of_strength" # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
    BLESSING_OF_SPEED = "blessing_of_speed"       # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    BLESSING_OF_HEALTH = "blessing_of_health"     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    BLESSING_OF_LUCK = "blessing_of_luck"         # –£–ª—É—á—à–µ–Ω–Ω–∞—è —É–¥–∞—á–∞
    BLESSING_OF_WISDOM = "blessing_of_wisdom"     # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø—ã—Ç
    BLESSING_OF_PROTECTION = "blessing_of_protection" # –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
    BLESSING_OF_REGENERATION = "blessing_of_regeneration" # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
    BLESSING_OF_ABUNDANCE = "blessing_of_abundance"   # –ë–æ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    BLESSING_OF_CLARITY = "blessing_of_clarity"       # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
    BLESSING_OF_HARMONY = "blessing_of_harmony"       # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    BLESSING_OF_EVOLUTION = "blessing_of_evolution"   # –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
    BLESSING_OF_MASTERY = "blessing_of_mastery"       # –ë—ã—Å—Ç—Ä–æ–µ –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    BLESSING_OF_FORTUNE = "blessing_of_fortune"       # –õ—É—á—à–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
    BLESSING_OF_RESILIENCE = "blessing_of_resilience" # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è–º


@dataclass
class CurseBlessingEffect:
    """–≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∫–ª—è—Ç–∏—è –∏–ª–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è"""
    effect_id: str
    effect_type: str  # "curse" –∏–ª–∏ "blessing"
    curse_type: Optional[CurseType] = None
    blessing_type: Optional[BlessingType] = None
    intensity: float = 1.0
    duration: float = -1  # -1 –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    start_time: float = field(default_factory=time.time)
    source: str = "unknown"
    stacks: int = 1
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    stat_modifiers: Dict[str, float] = field(default_factory=dict)
    behavior_modifiers: Dict[str, Any] = field(default_factory=dict)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    special_effects: List[str] = field(default_factory=list)
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        if self.duration < 0:
            return False
        return time.time() - self.start_time >= self.duration
    
    def get_remaining_time(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏"""
        if self.duration < 0:
            return float('inf')
        return max(0, self.duration - (time.time() - self.start_time))
    
    def get_effective_intensity(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á—ë—Ç–æ–º —Å—Ç–∞–∫–æ–≤"""
        base_intensity = self.intensity
        
        # –£–±—ã–≤–∞—é—â–∞—è –æ—Ç–¥–∞—á–∞ –æ—Ç —Å—Ç–∞–∫–æ–≤
        if self.stacks > 1:
            stack_bonus = (self.stacks - 1) * 0.3  # 30% –∑–∞ –∫–∞–∂–¥—ã–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞–∫
            return base_intensity * (1.0 + stack_bonus)
        
        return base_intensity


class CurseBlessingSystem:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π"""
    
    def __init__(self, memory_system):
        self.memory_system = memory_system
        self.active_effects: Dict[str, CurseBlessingEffect] = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        self._initialize_effect_configs()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_curses_applied = 0
        self.total_blessings_applied = 0
        self.effect_history: List[Dict[str, Any]] = []
        
        logger.info("üé≠ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_effect_configs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫–ª—è—Ç–∏–π
        self.curse_configs = {
            CurseType.CURSE_OF_DARKNESS: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ —Ç—å–º—ã",
                "description": "–û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞",
                "stat_modifiers": {"vision_range": -0.5},
                "behavior_modifiers": {"darken_screen": True},
                "base_duration": 300.0  # 5 –º–∏–Ω—É—Ç
            },
            CurseType.CURSE_OF_LABYRINTH: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞",
                "description": "–£—Å–ª–æ–∂–Ω—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é",
                "behavior_modifiers": {"complex_layout": True, "hidden_paths": True},
                "base_duration": 600.0  # 10 –º–∏–Ω—É—Ç
            },
            CurseType.CURSE_OF_LOST: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ø–æ—Ç–µ—Ä–∏",
                "description": "–°–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É",
                "behavior_modifiers": {"hide_minimap": True, "disable_map": True},
                "base_duration": 180.0  # 3 –º–∏–Ω—É—Ç—ã
            },
            CurseType.CURSE_OF_UNKNOWN: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç–∏",
                "description": "–°–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö",
                "behavior_modifiers": {"hide_item_info": True, "mystery_items": True},
                "base_duration": 240.0  # 4 –º–∏–Ω—É—Ç—ã
            },
            CurseType.CURSE_OF_FRAGILITY: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ —Ö—Ä—É–ø–∫–æ—Å—Ç–∏",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω",
                "stat_modifiers": {"damage_taken_multiplier": 1.5},
                "base_duration": 120.0  # 2 –º–∏–Ω—É—Ç—ã
            },
            CurseType.CURSE_OF_EXHAUSTION: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –∏—Å—Ç–æ—â–µ–Ω–∏—è",
                "description": "–£—Å–∫–æ—Ä—è–µ—Ç —Ç—Ä–∞—Ç—É –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏",
                "stat_modifiers": {"stamina_drain_rate": 2.0},
                "base_duration": 180.0  # 3 –º–∏–Ω—É—Ç—ã
            },
            CurseType.CURSE_OF_CONFUSION: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ —Å–º—è—Ç–µ–Ω–∏—è",
                "description": "–û–±—Ä–∞—â–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                "behavior_modifiers": {"reverse_controls": True},
                "base_duration": 60.0  # 1 –º–∏–Ω—É—Ç–∞
            },
            CurseType.CURSE_OF_SLOWNESS: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –º–µ–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                "description": "–ó–∞–º–µ–¥–ª—è–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ",
                "stat_modifiers": {"movement_speed": -0.3},
                "base_duration": 150.0  # 2.5 –º–∏–Ω—É—Ç—ã
            },
            CurseType.CURSE_OF_WEAKNESS: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ —Å–ª–∞–±–æ—Å—Ç–∏",
                "description": "–°–Ω–∏–∂–∞–µ—Ç –Ω–∞–Ω–æ—Å–∏–º—ã–π —É—Ä–æ–Ω",
                "stat_modifiers": {"damage_multiplier": -0.4},
                "base_duration": 120.0  # 2 –º–∏–Ω—É—Ç—ã
            },
            CurseType.CURSE_OF_AMNESIA: {
                "name": "–ü—Ä–æ–∫–ª—è—Ç–∏–µ –∑–∞–±–≤–µ–Ω–∏—è",
                "description": "–°–Ω–∏–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π",
                "behavior_modifiers": {"memory_interference": 0.5},
                "base_duration": 300.0  # 5 –º–∏–Ω—É—Ç
            }
        }
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π
        self.blessing_configs = {
            BlessingType.BLESSING_OF_LIGHT: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ç–∞",
                "description": "–£–ª—É—á—à–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å",
                "stat_modifiers": {"vision_range": 0.5},
                "behavior_modifiers": {"brighten_screen": True},
                "base_duration": 300.0  # 5 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_STRENGTH: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å–∏–ª—ã",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞–Ω–æ—Å–∏–º—ã–π —É—Ä–æ–Ω",
                "stat_modifiers": {"damage_multiplier": 0.5},
                "base_duration": 180.0  # 3 –º–∏–Ω—É—Ç—ã
            },
            BlessingType.BLESSING_OF_SPEED: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è",
                "stat_modifiers": {"movement_speed": 0.3},
                "base_duration": 240.0  # 4 –º–∏–Ω—É—Ç—ã
            },
            BlessingType.BLESSING_OF_HEALTH: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                "stat_modifiers": {"max_health": 0.25},
                "base_duration": 600.0  # 10 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_LUCK: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —É–¥–∞—á–∏",
                "description": "–£–ª—É—á—à–∞–µ—Ç —à–∞–Ω—Å—ã –Ω–∞ —É–¥–∞—á—É",
                "stat_modifiers": {"luck_modifier": 0.2},
                "base_duration": 300.0  # 5 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_WISDOM: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –º—É–¥—Ä–æ—Å—Ç–∏",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π –æ–ø—ã—Ç",
                "stat_modifiers": {"experience_multiplier": 1.5},
                "base_duration": 600.0  # 10 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_PROTECTION: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∑–∞—â–∏—Ç—ã",
                "description": "–°–Ω–∏–∂–∞–µ—Ç –ø–æ–ª—É—á–∞–µ–º—ã–π —É—Ä–æ–Ω",
                "stat_modifiers": {"damage_taken_multiplier": -0.25},
                "base_duration": 300.0  # 5 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_REGENERATION: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è",
                "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º",
                "behavior_modifiers": {"health_regen_rate": 0.5},  # 0.5 HP/—Å–µ–∫
                "base_duration": 180.0  # 3 –º–∏–Ω—É—Ç—ã
            },
            BlessingType.BLESSING_OF_ABUNDANCE: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –∏–∑–æ–±–∏–ª–∏—è",
                "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã",
                "stat_modifiers": {"item_find_chance": 0.3},
                "base_duration": 450.0  # 7.5 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_CLARITY: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —è—Å–Ω–æ—Å—Ç–∏",
                "description": "–£–ª—É—á—à–∞–µ—Ç –ø–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π",
                "behavior_modifiers": {"memory_enhancement": 1.5},
                "base_duration": 600.0  # 10 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_HARMONY: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –≥–∞—Ä–º–æ–Ω–∏–∏",
                "description": "–°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                "behavior_modifiers": {"emotional_stability": 0.8},
                "base_duration": 300.0  # 5 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_EVOLUTION: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏",
                "description": "–£—Å–∫–æ—Ä—è–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã",
                "behavior_modifiers": {"evolution_speed": 1.3},
                "base_duration": 420.0  # 7 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_MASTERY: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞",
                "description": "–£—Å–∫–æ—Ä—è–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤",
                "stat_modifiers": {"skill_learning_speed": 1.4},
                "base_duration": 360.0  # 6 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_FORTUNE: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Ñ–æ—Ä—Ç—É–Ω—ã",
                "description": "–£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥",
                "behavior_modifiers": {"reward_quality": 1.25},
                "base_duration": 480.0  # 8 –º–∏–Ω—É—Ç
            },
            BlessingType.BLESSING_OF_RESILIENCE: {
                "name": "–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ —Å—Ç–æ–π–∫–æ—Å—Ç–∏",
                "description": "–ü–æ–≤—ã—à–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è–º",
                "behavior_modifiers": {"curse_resistance": 0.4},
                "base_duration": 900.0  # 15 –º–∏–Ω—É—Ç
            }
        }
    
    def apply_curse(self, curse_type: CurseType, intensity: float = 1.0, 
                   duration: float = -1, source: str = "system") -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–∫–ª—è—Ç–∏—è"""
        if curse_type not in self.curse_configs:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫–ª—è—Ç–∏—è: {curse_type}")
            return ""
        
        config = self.curse_configs[curse_type]
        effect_id = str(uuid.uuid4())
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫–ª—è—Ç–∏—è–º
        resistance = self._get_curse_resistance()
        if random.random() < resistance:
            logger.info(f"–ü—Ä–æ–∫–ª—è—Ç–∏–µ {curse_type.value} –±—ã–ª–æ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–æ")
            return ""
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration < 0:
            duration = config["base_duration"] * random.uniform(0.8, 1.2)
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
        effective_intensity = intensity * (1.0 - resistance * 0.5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        effect = CurseBlessingEffect(
            effect_id=effect_id,
            effect_type="curse",
            curse_type=curse_type,
            intensity=effective_intensity,
            duration=duration,
            source=source,
            stat_modifiers=config.get("stat_modifiers", {}).copy(),
            behavior_modifiers=config.get("behavior_modifiers", {}).copy()
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        existing_effect = self._find_existing_effect("curse", curse_type)
        if existing_effect:
            # –°—Ç–∞–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            existing_effect.stacks += 1
            existing_effect.duration = max(existing_effect.duration, duration)
            existing_effect.intensity = max(existing_effect.intensity, effective_intensity)
            effect_id = existing_effect.effect_id
            logger.info(f"–ü—Ä–æ–∫–ª—è—Ç–∏–µ {curse_type.value} —Å—Ç–∞–∫–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞–∫–∏: {existing_effect.stacks})")
        else:
            # –ù–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            self.active_effects[effect_id] = effect
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–æ–∫–ª—è—Ç–∏–µ: {config['name']} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {effective_intensity:.2f})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_curses_applied += 1
        
        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._record_effect_history("curse_applied", curse_type.value, effective_intensity)
        
        # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π
        self.memory_system.add_memory(
            memory_type=self.memory_system.MemoryType.NEGATIVE_EVENT,
            content={
                "event_type": "curse_applied",
                "curse_type": curse_type.value,
                "intensity": effective_intensity,
                "source": source
            },
            intensity=0.7,
            emotional_impact=0.8
        )
        
        return effect_id
    
    def apply_blessing(self, blessing_type: BlessingType, intensity: float = 1.0,
                      duration: float = -1, source: str = "system") -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è"""
        if blessing_type not in self.blessing_configs:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è: {blessing_type}")
            return ""
        
        config = self.blessing_configs[blessing_type]
        effect_id = str(uuid.uuid4())
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration < 0:
            duration = config["base_duration"] * random.uniform(0.8, 1.2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        effect = CurseBlessingEffect(
            effect_id=effect_id,
            effect_type="blessing",
            blessing_type=blessing_type,
            intensity=intensity,
            duration=duration,
            source=source,
            stat_modifiers=config.get("stat_modifiers", {}).copy(),
            behavior_modifiers=config.get("behavior_modifiers", {}).copy()
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
        existing_effect = self._find_existing_effect("blessing", blessing_type)
        if existing_effect:
            # –°—Ç–∞–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
            existing_effect.stacks += 1
            existing_effect.duration = max(existing_effect.duration, duration)
            existing_effect.intensity = max(existing_effect.intensity, intensity)
            effect_id = existing_effect.effect_id
            logger.info(f"–ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ {blessing_type.value} —Å—Ç–∞–∫–∏—Ä–æ–≤–∞–Ω–æ (—Å—Ç–∞–∫–∏: {existing_effect.stacks})")
        else:
            # –ù–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
            self.active_effects[effect_id] = effect
            logger.info(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ: {config['name']} (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {intensity:.2f})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_blessings_applied += 1
        
        # –ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._record_effect_history("blessing_applied", blessing_type.value, intensity)
        
        # –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π
        self.memory_system.add_memory(
            memory_type=self.memory_system.MemoryType.POSITIVE_EVENT,
            content={
                "event_type": "blessing_applied",
                "blessing_type": blessing_type.value,
                "intensity": intensity,
                "source": source
            },
            intensity=0.6,
            emotional_impact=0.7
        )
        
        return effect_id
    
    def remove_effect(self, effect_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞"""
        if effect_id in self.active_effects:
            effect = self.active_effects[effect_id]
            del self.active_effects[effect_id]
            
            effect_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç"
            if effect.curse_type:
                effect_name = self.curse_configs[effect.curse_type]["name"]
            elif effect.blessing_type:
                effect_name = self.blessing_configs[effect.blessing_type]["name"]
            
            logger.info(f"–£–¥–∞–ª—ë–Ω —ç—Ñ—Ñ–µ–∫—Ç: {effect_name}")
            return True
        
        return False
    
    def cleanup_expired_effects(self) -> List[str]:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        expired_effects = []
        
        for effect_id, effect in list(self.active_effects.items()):
            if effect.is_expired():
                expired_effects.append(effect_id)
                self.remove_effect(effect_id)
        
        if expired_effects:
            logger.info(f"–û—á–∏—â–µ–Ω–æ –∏—Å—Ç—ë–∫—à–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {len(expired_effects)}")
        
        return expired_effects
    
    def get_active_stat_modifiers(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        combined_modifiers = {}
        
        for effect in self.active_effects.values():
            effective_intensity = effect.get_effective_intensity()
            
            for stat, modifier in effect.stat_modifiers.items():
                if stat not in combined_modifiers:
                    combined_modifiers[stat] = 0.0
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å —É—á—ë—Ç–æ–º –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
                combined_modifiers[stat] += modifier * effective_intensity
        
        return combined_modifiers
    
    def get_active_behavior_modifiers(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
        combined_modifiers = {}
        
        for effect in self.active_effects.values():
            effective_intensity = effect.get_effective_intensity()
            
            for behavior, modifier in effect.behavior_modifiers.items():
                if behavior not in combined_modifiers:
                    if isinstance(modifier, bool):
                        combined_modifiers[behavior] = modifier
                    elif isinstance(modifier, (int, float)):
                        combined_modifiers[behavior] = modifier * effective_intensity
                    else:
                        combined_modifiers[behavior] = modifier
                else:
                    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
                    if isinstance(modifier, bool):
                        combined_modifiers[behavior] = combined_modifiers[behavior] or modifier
                    elif isinstance(modifier, (int, float)):
                        combined_modifiers[behavior] += modifier * effective_intensity
        
        return combined_modifiers
    
    def get_active_effects_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        curses = []
        blessings = []
        
        for effect in self.active_effects.values():
            effect_info = {
                "id": effect.effect_id,
                "intensity": effect.get_effective_intensity(),
                "remaining_time": effect.get_remaining_time(),
                "stacks": effect.stacks,
                "source": effect.source
            }
            
            if effect.effect_type == "curse" and effect.curse_type:
                config = self.curse_configs[effect.curse_type]
                effect_info.update({
                    "name": config["name"],
                    "description": config["description"],
                    "type": effect.curse_type.value
                })
                curses.append(effect_info)
            
            elif effect.effect_type == "blessing" and effect.blessing_type:
                config = self.blessing_configs[effect.blessing_type]
                effect_info.update({
                    "name": config["name"],
                    "description": config["description"],
                    "type": effect.blessing_type.value
                })
                blessings.append(effect_info)
        
        return {
            "curses": curses,
            "blessings": blessings,
            "total_effects": len(self.active_effects),
            "curse_count": len(curses),
            "blessing_count": len(blessings)
        }
    
    def apply_random_curse(self, intensity_range: Tuple[float, float] = (0.5, 1.5),
                          source: str = "random") -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è"""
        curse_type = random.choice(list(CurseType))
        intensity = random.uniform(*intensity_range)
        return self.apply_curse(curse_type, intensity, source=source)
    
    def apply_random_blessing(self, intensity_range: Tuple[float, float] = (0.5, 1.5),
                             source: str = "random") -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è"""
        blessing_type = random.choice(list(BlessingType))
        intensity = random.uniform(*intensity_range)
        return self.apply_blessing(blessing_type, intensity, source=source)
    
    def get_curse_blessing_balance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π"""
        curse_weight = 0.0
        blessing_weight = 0.0
        
        for effect in self.active_effects.values():
            weight = effect.get_effective_intensity()
            
            if effect.effect_type == "curse":
                curse_weight += weight
            elif effect.effect_type == "blessing":
                blessing_weight += weight
        
        # –ë–∞–ª–∞–Ω—Å –æ—Ç -1 (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è) –¥–æ +1 (—Ç–æ–ª—å–∫–æ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è)
        total_weight = curse_weight + blessing_weight
        if total_weight == 0:
            return 0.0
        
        return (blessing_weight - curse_weight) / total_weight
    
    def suggest_counter_effects(self) -> List[Dict[str, Any]]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        suggestions = []
        
        # –ê–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–∫–ª—è—Ç–∏–π
        active_curses = [e for e in self.active_effects.values() if e.effect_type == "curse"]
        
        for curse_effect in active_curses:
            if curse_effect.curse_type == CurseType.CURSE_OF_DARKNESS:
                suggestions.append({
                    "counter_type": "blessing",
                    "blessing_type": BlessingType.BLESSING_OF_LIGHT,
                    "reason": "–ü—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–∫–ª—è—Ç–∏—é —Ç—å–º—ã",
                    "effectiveness": 0.8
                })
            
            elif curse_effect.curse_type == CurseType.CURSE_OF_FRAGILITY:
                suggestions.append({
                    "counter_type": "blessing",
                    "blessing_type": BlessingType.BLESSING_OF_PROTECTION,
                    "reason": "–ü—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ–≤—ã—à–µ–Ω–Ω–æ–º—É —É—Ä–æ–Ω—É",
                    "effectiveness": 0.7
                })
            
            elif curse_effect.curse_type == CurseType.CURSE_OF_SLOWNESS:
                suggestions.append({
                    "counter_type": "blessing",
                    "blessing_type": BlessingType.BLESSING_OF_SPEED,
                    "reason": "–ü—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –∑–∞–º–µ–¥–ª–µ–Ω–∏—é",
                    "effectiveness": 0.9
                })
            
            elif curse_effect.curse_type == CurseType.CURSE_OF_WEAKNESS:
                suggestions.append({
                    "counter_type": "blessing",
                    "blessing_type": BlessingType.BLESSING_OF_STRENGTH,
                    "reason": "–ü—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏—é —É—Ä–æ–Ω–∞",
                    "effectiveness": 0.8
                })
            
            elif curse_effect.curse_type == CurseType.CURSE_OF_AMNESIA:
                suggestions.append({
                    "counter_type": "blessing",
                    "blessing_type": BlessingType.BLESSING_OF_CLARITY,
                    "reason": "–ü—Ä–æ—Ç–∏–≤–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –ø–æ—Ç–µ—Ä–µ –ø–∞–º—è—Ç–∏",
                    "effectiveness": 0.6
                })
        
        return suggestions
    
    def _get_curse_resistance(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫–ª—è—Ç–∏—è–º"""
        resistance = 0.0
        
        # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ—Ç –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π
        for effect in self.active_effects.values():
            if (effect.effect_type == "blessing" and 
                effect.blessing_type == BlessingType.BLESSING_OF_RESILIENCE):
                resistance += effect.behavior_modifiers.get("curse_resistance", 0.0)
        
        # –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –æ—Ç –ø–∞–º—è—Ç–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–π
        memory_resistance = self.memory_system.get_resistance_to_negative_events()
        resistance += memory_resistance * 0.2
        
        return min(resistance, 0.8)  # –ú–∞–∫—Å–∏–º—É–º 80% —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
    
    def _find_existing_effect(self, effect_type: str, specific_type) -> Optional[CurseBlessingEffect]:
        """–ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        for effect in self.active_effects.values():
            if effect.effect_type == effect_type:
                if (effect_type == "curse" and effect.curse_type == specific_type) or \
                   (effect_type == "blessing" and effect.blessing_type == specific_type):
                    return effect
        return None
    
    def _record_effect_history(self, event_type: str, effect_type: str, intensity: float):
        """–ó–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        self.effect_history.append({
            "timestamp": time.time(),
            "event_type": event_type,
            "effect_type": effect_type,
            "intensity": intensity
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.effect_history) > 1000:
            self.effect_history = self.effect_history[-500:]
    
    def get_effect_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        return {
            "total_curses_applied": self.total_curses_applied,
            "total_blessings_applied": self.total_blessings_applied,
            "active_effects_count": len(self.active_effects),
            "curse_blessing_balance": self.get_curse_blessing_balance(),
            "curse_resistance": self._get_curse_resistance(),
            "history_size": len(self.effect_history)
        }