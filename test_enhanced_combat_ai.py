#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–æ–µ–≤–æ–≥–æ –ò–ò –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤—ã–∫–æ–≤, –∏—Ö –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–º–Ω–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –≤ –±–æ—é.
"""

import sys
import os
import random
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from core.skill_system import (
    SkillManager, SkillLearningAI, SkillFactory, 
    SkillType, SkillElement, SkillTarget
)
from core.enhanced_combat_ai import (
    EnhancedCombatAI, EnhancedCombatContext, 
    CombatPhase, CombatTactic
)
from core.advanced_weapon_system import WeaponFactory, WeaponManager
from core.combat_learning_system import CombatLearningSystem


def test_skill_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤—ã–∫–æ–≤"""
    print("üîÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ù–ê–í–´–ö–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ã–∫–æ–≤
    skill_manager = SkillManager()
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    ice_shard = SkillFactory.create_magic_skill(
        "ice_shard", "–õ–µ–¥—è–Ω–æ–π –æ—Å–∫–æ–ª–æ–∫", 20.0, SkillElement.ICE, 12.0
    )
    
    lightning_bolt = SkillFactory.create_magic_skill(
        "lightning_bolt", "–£–¥–∞—Ä –º–æ–ª–Ω–∏–∏", 35.0, SkillElement.LIGHTNING, 18.0
    )
    
    poison_dart = SkillFactory.create_magic_skill(
        "poison_dart", "–û—Ç—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –¥—Ä–æ—Ç–∏–∫", 15.0, SkillElement.POISON, 10.0
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏
    skill_manager.add_skill(ice_shard)
    skill_manager.add_skill(lightning_bolt)
    skill_manager.add_skill(poison_dart)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –æ–≥–Ω—è –∏ –ª—å–¥–∞
    fire_ice_combo = skill_manager.get_skill_combo("fire_ice_combo")
    if fire_ice_combo:
        print(f"‚úÖ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –Ω–∞–≤—ã–∫–æ–≤: {fire_ice_combo.name}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {fire_ice_combo.description}")
        print(f"   –ù–∞–≤—ã–∫–∏: {', '.join(fire_ice_combo.skills)}")
        print(f"   –ë–æ–Ω—É—Å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏: x{fire_ice_combo.combo_bonus}")
        print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    print("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏:")
    for skill_id, skill in skill_manager.skills.items():
        print(f"   {skill.name} ({skill.skill_type.value})")
        print(f"     –≠–ª–µ–º–µ–Ω—Ç: {skill.element.value}")
        print(f"     –£—Ä–æ–Ω: {skill.base_damage}")
        print(f"     –ú–∞–Ω–∞: {skill.mana_cost}")
        print(f"     –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {skill.cooldown}—Å")
        print()
    
    return skill_manager


def test_skill_learning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –ò–ò"""
    print("üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–£–ß–ï–ù–ò–Ø –ù–ê–í–´–ö–û–í")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ò–ò –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤
    skill_ai = SkillLearningAI("test_entity")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
    skills_to_learn = ["basic_attack", "fire_ball", "heal", "ice_shard"]
    
    for skill_id in skills_to_learn:
        success_rate = 0.6 + (hash(skill_id) % 40) / 100.0  # –°–ª—É—á–∞–π–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        skill_ai.learn_skill(skill_id, success_rate)
        print(f"‚úÖ –ò–∑—É—á–µ–Ω –Ω–∞–≤—ã–∫: {skill_id} (—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {success_rate:.2f})")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    skill_ai.discover_combo(["fire_ball", "ice_shard"], 0.85)
    print(f"üéØ –û—Ç–∫—Ä—ã—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä + –ª–µ–¥—è–Ω–æ–π –æ—Å–∫–æ–ª–æ–∫")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è
    progress = skill_ai.get_learning_progress()
    print(f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è:")
    print(f"   –ò–∑—É—á–µ–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {progress['learned_skills']}")
    print(f"   –û—Ç–∫—Ä—ã—Ç–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {progress['discovered_combos']}")
    print(f"   –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {progress['learning_stats']['total_skill_usage']}")
    
    print()
    return skill_ai


def test_enhanced_combat_ai():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–æ–µ–≤–æ–≥–æ –ò–ò"""
    print("‚öîÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ë–û–ï–í–û–ì–û –ò–ò")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ–µ–≤–æ–π –ò–ò
    combat_ai = EnhancedCombatAI("test_combat_entity")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—è
    combat_context = EnhancedCombatContext(
        enemy_type="–æ–≥–Ω–µ–Ω–Ω—ã–π –¥–µ–º–æ–Ω",
        enemy_health=80.0,
        enemy_max_health=100.0,
        enemy_distance=3.0,
        enemy_behavior="aggressive",
        enemy_element="fire",
        enemy_resistances={"fire": 0.5, "ice": -0.3, "lightning": 0.0, "physical": 0.2},
        
        own_health=70.0,
        own_max_health=100.0,
        own_stamina=80.0,
        own_max_stamina=100.0,
        own_mana=60.0,
        own_max_mana=100.0,
        
        available_weapons=["sword", "bow", "staff"],
        available_skills=["basic_attack", "fire_ball", "ice_shard", "heal"],
        available_items=["health_potion", "mana_potion"],
        available_combos=["fire_ice_combo"],
        
        allies_nearby=1,
        enemies_nearby=2,
        terrain_type="volcanic",
        time_of_day="day",
        weather="clear",
        
        combat_phase=CombatPhase.ENGAGEMENT,
        current_tactic=CombatTactic.ADAPTIVE_RESPONSE,
        threat_level=0.0,
        advantage_ratio=0.0,
        
        recent_actions=[],
        successful_attacks=[],
        failed_attacks=[],
        damage_taken=0.0,
        damage_dealt=0.0
    )
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ –æ –±–æ–µ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    decision = combat_ai.make_combat_decision(combat_context)
    
    print(f"üéØ –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ: {decision}")
    print(f"   –¢–∞–∫—Ç–∏–∫–∞: {decision.tactic.value}")
    print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {decision.action_type}")
    print(f"   –¶–µ–ª—å: {decision.target}")
    print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {decision.priority}")
    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {decision.confidence}")
    print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {decision.reasoning}")
    print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {decision.expected_outcome}")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
    outcome = {
        "damage_dealt": 45.0,
        "success": True,
        "critical_hit": False,
        "enemy_status": "normal"
    }
    
    # –ò–ò —É—á–∏—Ç—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    combat_ai.learn_from_combat_result(decision, True, outcome)
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è:")
    print(f"   –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {outcome['damage_dealt']}")
    print(f"   –£—Å–ø–µ—Ö: {outcome['success']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò
    ai_state = combat_ai.get_combat_ai_state()
    print(f"\nü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ–µ–≤–æ–≥–æ –ò–ò:")
    print(f"   –§–∞–∑–∞ –±–æ—è: {ai_state['combat_phase']}")
    print(f"   –¢–µ–∫—É—â–∞—è —Ç–∞–∫—Ç–∏–∫–∞: {ai_state['current_tactic']}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–∏: {ai_state['aggression_level']}")
    print(f"   –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏: {ai_state['caution_level']}")
    print(f"   –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å: {ai_state['adaptability']}")
    
    print()
    return combat_ai


def test_tactical_decision_making():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π"""
    print("üéñÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–ê–ö–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–ò–ù–Ø–¢–ò–Ø –†–ï–®–ï–ù–ò–ô")
    print("=" * 60)
    
    combat_ai = EnhancedCombatAI("tactical_test_entity")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –±–æ–µ–≤—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
    scenarios = [
        {
            "name": "–í—ã—Å–æ–∫–∞—è —É–≥—Ä–æ–∑–∞ - –Ω–∏–∑–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
            "context": EnhancedCombatContext(
                enemy_type="—Å–∏–ª—å–Ω—ã–π –≤—Ä–∞–≥",
                enemy_health=90.0,
                enemy_max_health=100.0,
                enemy_distance=2.0,
                enemy_behavior="aggressive",
                enemy_element="physical",
                enemy_resistances={},
                own_health=25.0,
                own_max_health=100.0,
                own_stamina=30.0,
                own_max_stamina=100.0,
                own_mana=20.0,
                own_max_mana=100.0,
                available_weapons=["sword"],
                available_skills=["heal", "defend"],
                available_items=["health_potion"],
                available_combos=[],
                allies_nearby=0,
                enemies_nearby=2,
                terrain_type="cave",
                time_of_day="night",
                weather="dark",
                combat_phase=CombatPhase.PREPARATION,
                current_tactic=CombatTactic.ADAPTIVE_RESPONSE,
                threat_level=0.0,
                advantage_ratio=0.0,
                recent_actions=[],
                successful_attacks=[],
                failed_attacks=[],
                damage_taken=0.0,
                damage_dealt=0.0
            )
        },
        {
            "name": "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ - –º–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–æ–≤",
            "context": EnhancedCombatContext(
                enemy_type="—Å–ª–∞–±—ã–π –≤—Ä–∞–≥",
                enemy_health=30.0,
                enemy_max_health=100.0,
                enemy_distance=5.0,
                enemy_behavior="defensive",
                enemy_element="ice",
                enemy_resistances={"ice": 0.3, "fire": -0.2},
                own_health=90.0,
                own_max_health=100.0,
                own_stamina=85.0,
                own_max_stamina=100.0,
                own_mana=80.0,
                own_max_mana=100.0,
                available_weapons=["sword", "bow", "staff"],
                available_skills=["fire_ball", "ice_shard", "lightning_bolt", "basic_attack"],
                available_items=["mana_potion"],
                available_combos=["fire_ice_combo"],
                allies_nearby=1,
                enemies_nearby=1,
                terrain_type="forest",
                time_of_day="day",
                weather="clear",
                combat_phase=CombatPhase.PREPARATION,
                current_tactic=CombatTactic.ADAPTIVE_RESPONSE,
                threat_level=0.0,
                advantage_ratio=0.0,
                recent_actions=[],
                successful_attacks=[],
                failed_attacks=[],
                damage_taken=0.0,
                damage_dealt=0.0
            )
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π {i}: {scenario['name']}")
        print("-" * 40)
        
        context = scenario['context']
        decision = combat_ai.make_combat_decision(context)
        
        print(f"   –§–∞–∑–∞ –±–æ—è: {context.combat_phase.value}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã: {context.threat_level:.2f}")
        print(f"   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤: {context.advantage_ratio:.2f}")
        print(f"   –í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–∞–∫—Ç–∏–∫–∞: {decision.tactic.value}")
        print(f"   –î–µ–π—Å—Ç–≤–∏–µ: {decision.action_type}")
        print(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {decision.reasoning}")
    
    print()


def test_skill_combinations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤"""
    print("üîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ë–ò–ù–ê–¶–ò–ô –ù–ê–í–´–ö–û–í")
    print("=" * 60)
    
    skill_manager = SkillManager()
    
    # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    wind_slash = SkillFactory.create_combat_skill(
        "wind_slash", "–í–µ—Ç—Ä—è–Ω–æ–π —É–¥–∞—Ä", 18.0, SkillElement.COSMIC
    )
    
    earth_shield = SkillFactory.create_support_skill(
        "earth_shield", "–ó–µ–º–ª—è–Ω–æ–π —â–∏—Ç", 25.0, 15.0
    )
    
    skill_manager.add_skill(wind_slash)
    skill_manager.add_skill(earth_shield)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    from core.skill_system import SkillCombo, SkillRequirement, SkillEffect
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –≤–µ—Ç—Ä–∞ –∏ –∑–µ–º–ª–∏
    wind_earth_combo = SkillCombo(
        combo_id="wind_earth_combo",
        name="–ë—É—Ä—è",
        description="–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –≤–µ—Ç—Ä–∞ –∏ –∑–µ–º–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω—É—é –±—É—Ä—é",
        skills=["wind_slash", "earth_shield"],
        requirements=SkillRequirement(intelligence=10, magic=20),
        effects=[
            SkillEffect("damage", 60.0, element=SkillElement.COSMIC),
            SkillEffect("stun", 3.0, duration=3.0, element=SkillElement.COSMIC)
        ],
        cooldown=15.0,
        mana_cost=40.0,
        combo_bonus=2.5
    )
    
    skill_manager.add_skill_combo(wind_earth_combo)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    print("üé≠ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤:")
    for combo_id, combo in skill_manager.skill_combos.items():
        print(f"\n   {combo.name}")
        print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {combo.description}")
        print(f"     –ù–∞–≤—ã–∫–∏: {', '.join(combo.skills)}")
        print(f"     –ë–æ–Ω—É—Å: x{combo.combo_bonus}")
        print(f"     –ü–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∞: {combo.cooldown}—Å")
        print(f"     –°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞–Ω—ã: {combo.mana_cost}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Ä–æ–Ω –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        entity_stats = {"intelligence": 15, "magic": 25}
        combo_damage = skill_manager.calculate_combo_damage(combo, entity_stats)
        print(f"     –û–∂–∏–¥–∞–µ–º—ã–π —É—Ä–æ–Ω: {combo_damage:.1f}")
    
    print()


def test_evolutionary_learning():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    print("üß¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –≠–í–û–õ–Æ–¶–ò–û–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ò–ò –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —ç–≤–æ–ª—é—Ü–∏–∏
    ai_entities = []
    
    for i in range(3):
        entity_id = f"evolutionary_ai_{i}"
        combat_ai = EnhancedCombatAI(entity_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if i == 0:
            combat_ai.aggression_level = 0.8
            combat_ai.caution_level = 0.2
        elif i == 1:
            combat_ai.aggression_level = 0.3
            combat_ai.caution_level = 0.8
        else:
            combat_ai.aggression_level = 0.5
            combat_ai.caution_level = 0.5
        
        ai_entities.append(combat_ai)
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–æ–µ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ò–ò
    battle_scenarios = [
        {"enemy_type": "–æ–≥–Ω–µ–Ω–Ω—ã–π –¥–µ–º–æ–Ω", "difficulty": "hard"},
        {"enemy_type": "–ª–µ–¥—è–Ω–æ–π –≥–æ–ª–µ–º", "difficulty": "medium"},
        {"enemy_type": "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –¥—É—Ö", "difficulty": "easy"}
    ]
    
    for i, ai in enumerate(ai_entities):
        print(f"\nü§ñ –ò–ò {i+1} (–ê–≥—Ä–µ—Å—Å–∏—è: {ai.aggression_level:.1f}, –û—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å: {ai.caution_level:.1f})")
        print("-" * 50)
        
        for j, scenario in enumerate(battle_scenarios):
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—è
            context = EnhancedCombatContext(
                enemy_type=scenario["enemy_type"],
                enemy_health=80.0,
                enemy_max_health=100.0,
                enemy_distance=4.0,
                enemy_behavior="aggressive",
                enemy_element="fire",
                enemy_resistances={},
                own_health=70.0,
                own_max_health=100.0,
                own_stamina=80.0,
                own_max_stamina=100.0,
                own_mana=60.0,
                own_max_mana=100.0,
                available_weapons=["sword", "bow"],
                available_skills=["basic_attack", "fire_ball", "heal"],
                available_items=["health_potion"],
                available_combos=[],
                allies_nearby=0,
                enemies_nearby=1,
                terrain_type="plains",
                time_of_day="day",
                weather="clear",
                combat_phase=CombatPhase.PREPARATION,
                current_tactic=CombatTactic.ADAPTIVE_RESPONSE,
                threat_level=0.0,
                advantage_ratio=0.0,
                recent_actions=[],
                successful_attacks=[],
                failed_attacks=[],
                damage_taken=0.0,
                damage_dealt=0.0
            )
            
            # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            decision = ai.make_combat_decision(context)
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            success = random.random() > 0.3  # 70% —É—Å–ø–µ—Ö
            damage = random.uniform(20.0, 60.0) if success else random.uniform(5.0, 15.0)
            
            outcome = {"damage_dealt": damage, "success": success}
            
            # –ò–ò —É—á–∏—Ç—Å—è
            ai.learn_from_combat_result(decision, success, outcome)
            
            print(f"   –ë–æ–π {j+1} –ø—Ä–æ—Ç–∏–≤ {scenario['enemy_type']}:")
            print(f"     –¢–∞–∫—Ç–∏–∫–∞: {decision.tactic.value}")
            print(f"     –î–µ–π—Å—Ç–≤–∏–µ: {decision.action_type}")
            print(f"     –£—Å–ø–µ—Ö: {'‚úÖ' if success else '‚ùå'}")
            print(f"     –£—Ä–æ–Ω: {damage:.1f}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–≤–æ–ª—é—Ü–∏–∏
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –≠–í–û–õ–Æ–¶–ò–û–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    
    for i, ai in enumerate(ai_entities):
        ai_state = ai.get_combat_ai_state()
        print(f"\nü§ñ –ò–ò {i+1}:")
        print(f"   –£—Å–ø–µ—à–Ω—ã—Ö —Ç–∞–∫—Ç–∏–∫: {sum(ai_state['successful_tactics'].values())}")
        print(f"   –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–π: {ai_state['decision_history_length']}")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤: {ai_state['skill_learning_progress']['learned_skills']}")
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å –∏–∑—É—á–µ–Ω–∏—è –±–æ—è: {ai_state['combat_learning_progress']['combat_history_length']}")
    
    print()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("–≠–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ë–û–ï–í–û–ì–û –ò–ò")
    print("=" * 80)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞–≤—ã–∫–æ–≤
        skill_manager = test_skill_system()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
        skill_ai = test_skill_learning()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–æ–µ–≤–æ–π –ò–ò
        combat_ai = test_enhanced_combat_ai()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
        test_tactical_decision_making()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
        test_skill_combinations()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        test_evolutionary_learning()
        
        print("\n" + "=" * 80)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("=" * 80)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        print("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        
        skill_ai.save_learning_state("test_skill_learning_state.json")
        combat_ai.save_combat_ai_state("test_enhanced_combat_ai_state.json")
        
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print("   - test_skill_learning_state.json")
        print("   - test_enhanced_combat_ai_state.json")
        
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –∏–≥—Ä–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
