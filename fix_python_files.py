import os
import re
import ast
import tokenize
import io
from collections import defaultdict
from typing import List, Tuple
import shutil
import tempfile

def fix_corrupted_files(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏."""
    # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –º—É—Å–æ—Ä
    content = re.sub(r'[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]', '', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = re.sub(r'\\\s*\n\s*', ' ', content)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
    content = re.sub(r'^\s+', '', content, flags=re.MULTILINE)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    content = re.sub(r'#\s*\n\s*', '# ', content)
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
    content = re.sub(r'^\n+', '', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
    content = re.sub(r'["\']\s*\n\s*["\']', '""', content)
    
    return content

def fix_broken_imports(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ."""
    lines = content.splitlines()
    fixed_lines = []
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
    imports = []
    other_lines = []
    
    for line in lines:
        stripped = line.strip()
        if stripped.startswith(('import ', 'from ')) and 'import' in stripped:
            imports.append(line)
        else:
            other_lines.append(line)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    fixed_imports = []
    for imp in imports:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        imp = re.sub(r'\s+', ' ', imp.strip())
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        if imp.count('import') > 1:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
            parts = imp.split('import')
            for i, part in enumerate(parts[1:], 1):
                if part.strip():
                    fixed_imports.append(f"import{part.strip()}")
        else:
            fixed_imports.append(imp)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    basic_imports = [
        'import os',
        'import sys',
        'import re',
        'import time',
        'import logging',
        'from typing import *',
        'from dataclasses import dataclass, field',
        'from enum import Enum',
        'from pathlib import Path'
    ]
    
    existing_imports = set()
    for imp in fixed_imports:
        for basic in basic_imports:
            if basic.split()[1] in imp:
                existing_imports.add(basic.split()[1])
    
    for basic in basic_imports:
        if basic.split()[1] not in existing_imports:
            fixed_imports.append(basic)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
    fixed_imports.sort()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fixed_lines.extend(fixed_imports)
    fixed_lines.append('')  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    fixed_lines.extend(other_lines)
    
    return '\n'.join(fixed_lines)

def fix_broken_classes_and_functions(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏."""
    lines = content.splitlines()
    fixed_lines = []
    i = 0
    n = len(lines)
    
    while i < n:
        line = lines[i]
        stripped = line.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        if re.match(r'^(class|def)\s+\w+', stripped):
            indent = len(line) - len(line.lstrip())
            fixed_lines.append(line)
            i += 1
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content_lines = []
            while i < n:
                next_line = lines[i]
                next_indent = len(next_line) - len(next_line.lstrip())
                
                # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–º –∂–µ –∏–ª–∏ –º–µ–Ω—å—à–∏–º –æ—Ç—Å—Ç—É–ø–æ–º –∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                if next_indent <= indent and next_line.strip() != '':
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º/—Ñ—É–Ω–∫—Ü–∏–µ–π
                    if re.match(r'^(class|def)\s+\w+', next_line.strip()):
                        break
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
                    if next_line.strip().startswith('@'):
                        break
                
                content_lines.append(next_line)
                i += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            non_empty = [l for l in content_lines if l.strip() and not l.strip().startswith('#')]
            if not non_empty:
                fixed_lines.append(' ' * (indent + 4) + 'pass')
            else:
                fixed_lines.extend(content_lines)
        else:
            fixed_lines.append(line)
            i += 1
    
    return '\n'.join(fixed_lines)

def fix_broken_dataclasses(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ dataclass –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ dataclass
    content = re.sub(r'@dataclass\s*\n\s*class', '@dataclass\nclass', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ field()
    content = re.sub(r'field\s*\(\s*\n\s*\)', 'field()', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
    content = re.sub(r'(\w+)\s*:\s*\n\s*(\w+)', r'\1: \2', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    content = re.sub(r'=\s*\n\s*([^,\n]+)', r'= \1', content)
    
    return content

def fix_broken_enums(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ enum –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è."""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ enum
    content = re.sub(r'class\s+(\w+)\s*\(\s*\n\s*Enum\s*\)', r'class \1(Enum)', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum
    content = re.sub(r'(\w+)\s*=\s*\n\s*([^,\n]+)', r'\1 = \2', content)
    
    return content

def fix_broken_strings(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏."""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = re.sub(r'"""\s*\n\s*([^"]*)\s*\n\s*"""', r'"""\1"""', content)
    content = re.sub(r"'''\s*\n\s*([^']*)\s*\n\s*'''", r"'''\1'''", content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    content = re.sub(r'(["\'])\s*\n\s*([^"\']*)\s*\n\s*\1', r'\1\2\1', content)
    
    return content

def fix_broken_brackets(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã."""
    lines = content.splitlines()
    fixed_lines = []
    
    for line in lines:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏
        line = re.sub(r'\(\s*\n\s*', '(', line)
        line = re.sub(r'\s*\n\s*\)', ')', line)
        line = re.sub(r'\[\s*\n\s*', '[', line)
        line = re.sub(r'\s*\n\s*\]', ']', line)
        line = re.sub(r'{\s*\n\s*', '{', line)
        line = re.sub(r'\s*\n\s*}', '}', line)
        
        fixed_lines.append(line)
    
    return '\n'.join(fixed_lines)

def create_backup_with_timestamp(filepath):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π."""
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .backups –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    backup_dir = ".backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
    
    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º
    relative_path = os.path.relpath(filepath, '.')
    safe_filename = relative_path.replace('/', '_').replace('\\', '_')
    backup_filename = f"{safe_filename}.backup_{timestamp}"
    backup_path = os.path.join(backup_dir, backup_filename)
    
    try:
        shutil.copy2(filepath, backup_path)
        return backup_path
    except Exception as e:
        print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return None

def emergency_repair(content):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    print("    üö® –ü—Ä–∏–º–µ–Ω—è—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç...")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    content = fix_corrupted_files(content)
    content = fix_broken_strings(content)
    content = fix_broken_brackets(content)
    content = fix_broken_dataclasses(content)
    content = fix_broken_enums(content)
    content = fix_broken_imports(content)
    content = fix_broken_classes_and_functions(content)
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –≤—Å–µ –µ—â–µ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if not validate_python_syntax(content):
        print("    üî• –ü—Ä–∏–º–µ–Ω—è—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
        content = aggressive_repair(content)
    
    return content

def aggressive_repair(content):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print("    üí• –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–º–æ–Ω—Ç...")
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    content = re.sub(r'[^\x20-\x7E\n\t]', '', content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
    lines = content.splitlines()
    fixed_lines = []
    
    for line in lines:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        line = line.strip()
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏
        line = re.sub(r'[^\x20-\x7E]', '', line)  # –¢–æ–ª—å–∫–æ –ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if line:
            fixed_lines.append(line)
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
    content = '\n'.join(fixed_lines)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
    if not content.strip():
        content = '''# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
# –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—ã–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    pass

if __name__ == "__main__":
    main()
'''
    
    return content

def apply_preventive_fixes(content):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º."""
    print("    üõ°Ô∏è –ü—Ä–∏–º–µ–Ω—è—é –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
    if 'from typing import *' not in content:
        content = 'from typing import *\n' + content
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    basic_imports = [
        'import os',
        'import sys',
        'import logging',
        'from pathlib import Path'
    ]
    
    for imp in basic_imports:
        if imp not in content:
            content = imp + '\n' + content
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
    content = re.sub(r'(import .*)\n(?!\n)', r'\1\n\n', content)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ç—Ä–æ–∫
    content = content.replace('\r\n', '\n').replace('\r', '\n')
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞
    content = content.rstrip() + '\n'
    
    return content

def create_file_integrity_check(filepath):
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤ –±—É–¥—É—â–µ–º."""
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        import hashlib
        content_hash = hashlib.md5(content.encode('utf-8')).hexdigest()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
        check_file = filepath + '.integrity'
        with open(check_file, 'w', encoding='utf-8') as f:
            f.write(f"# –§–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è {filepath}\n")
            f.write(f"# –°–æ–∑–¥–∞–Ω: {__import__('datetime').datetime.now()}\n")
            f.write(f"# MD5 —Ö–µ—à: {content_hash}\n")
            f.write(f"# –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤\n")
        
        return True
    except Exception as e:
        print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {e}")
        return False

def cleanup_backup_files():
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    
    backup_files = []
    integrity_files = []
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    for root, _, files in os.walk('.'):
        for file in files:
            filepath = os.path.join(root, file)
            if file.endswith('.backup_'):
                backup_files.append(filepath)
            elif file.endswith('.integrity'):
                integrity_files.append(filepath)
    
    print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backup_files)}")
    print(f"  üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {len(integrity_files)}")
    
    if not backup_files:
        print("  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö Python —Ñ–∞–π–ª–æ–≤
    python_files = []
    for root, _, files in os.walk('.'):
        for file in files:
            if file.endswith('.py') and not file.startswith('.'):
                filepath = os.path.join(root, file)
                python_files.append(filepath)
    
    print(f"  üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å {len(python_files)} Python —Ñ–∞–π–ª–æ–≤...")
    
    healthy_files = 0
    problematic_files = []
    
    for filepath in python_files:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å
            ast.parse(content)
            healthy_files += 1
            
        except Exception as e:
            problematic_files.append((filepath, str(e)))
    
    print(f"  ‚úÖ –ó–¥–æ—Ä–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {healthy_files}")
    print(f"  ‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(problematic_files)}")
    
    # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–¥–æ—Ä–æ–≤—ã, —É–¥–∞–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    if len(problematic_files) == 0:
        print("  üéâ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–¥–æ—Ä–æ–≤! –£–¥–∞–ª—è—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏...")
        
        deleted_backups = 0
        for backup_file in backup_files:
            try:
                os.remove(backup_file)
                deleted_backups += 1
            except Exception as e:
                print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {backup_file}: {e}")
        
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted_backups}")
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        deleted_integrity = 0
        for integrity_file in integrity_files:
            try:
                os.remove(integrity_file)
                deleted_integrity += 1
            except Exception as e:
                print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {integrity_file}: {e}")
        
        print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {deleted_integrity}")
        
    else:
        print("  ‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        print("  üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:")
        for filepath, error in problematic_files[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"    - {filepath}: {error}")
        if len(problematic_files) > 5:
            print(f"    ... –∏ –µ—â–µ {len(problematic_files) - 5} —Ñ–∞–π–ª–æ–≤")

def smart_backup_management():
    """–£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π."""
    print("üß† –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    backup_dir = ".backups"
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        print(f"  üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {backup_dir}")
    
    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    moved_backups = 0
    for root, _, files in os.walk('.'):
        for file in files:
            if file.endswith('.backup_') and root != backup_dir:
                old_path = os.path.join(root, file)
                new_path = os.path.join(backup_dir, file)
                try:
                    shutil.move(old_path, new_path)
                    moved_backups += 1
                except Exception as e:
                    print(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å {old_path}: {e}")
    
    if moved_backups > 0:
        print(f"  üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –≤ {backup_dir}: {moved_backups}")
    
    return backup_dir

def fix_indentation(content):
    """–ó–∞–º–µ–Ω—è–µ—Ç —Ç–∞–±—ã –Ω–∞ 4 –ø—Ä–æ–±–µ–ª–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –æ—Ç—Å—Ç—É–ø—ã."""
    lines = content.splitlines()
    fixed_lines = []
    
    for line in lines:
        fixed_line = line.replace('\t', '    ')
        stripped = fixed_line.lstrip()
        if stripped:
            indent = len(fixed_line) - len(stripped)
            if indent % 4 != 0:
                new_indent = (indent // 4) * 4
                fixed_line = ' ' * new_indent + stripped
        fixed_lines.append(fixed_line)
    
    return '\n'.join(fixed_lines)

def fix_try_except(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ–ª—ã–µ except –∏ –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏."""
    lines = content.splitlines()
    fixed_lines = []
    i = 0
    n = len(lines)
    
    while i < n:
        line = lines[i]
        stripped = line.strip()
        
        if stripped.startswith('try:'):
            # –ù–∞–π–¥–µ–º –±–ª–æ–∫ try
            try_indent = len(line) - len(line.lstrip())
            fixed_lines.append(line)
            i += 1
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –±–ª–æ–∫ try
            try_block = []
            while i < n:
                next_line = lines[i]
                next_indent = len(next_line) - len(next_line.lstrip())
                if next_indent <= try_indent and next_line.strip() != '':
                    break
                try_block.append(next_line)
                i += 1
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫ except
            if i < n and lines[i].strip().startswith('except'):
                except_line = lines[i]
                except_stripped = except_line.strip()
                except_indent = len(except_line) - len(except_line.lstrip())
                
                if except_stripped == 'except:':
                    fixed_lines.append(' ' * except_indent + 'except Exception:')
                else:
                    fixed_lines.append(except_line)
                i += 1
                
                # –°–æ–±–∏—Ä–∞–µ–º –±–ª–æ–∫ except
                except_block = []
                while i < n:
                    next_line = lines[i]
                    next_indent = len(next_line) - len(next_line.lstrip())
                    if next_indent <= except_indent and next_line.strip() != '':
                        break
                    except_block.append(next_line)
                    i += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ –±–ª–æ–∫ except
                non_empty = [l for l in except_block if l.strip() and not l.strip().startswith('#')]
                if not non_empty:
                    fixed_lines.append(' ' * (except_indent + 4) + 'pass')
                else:
                    fixed_lines.extend(except_block)
            else:
                fixed_lines.extend(try_block)
        else:
            fixed_lines.append(line)
            i += 1
    
    return '\n'.join(fixed_lines)

def fix_empty_blocks(content):
    """–£–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç pass –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
    lines = content.splitlines()
    fixed_lines = []
    i = 0
    n = len(lines)
    
    while i < n:
        line = lines[i]
        stripped = line.strip()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        block_keywords = ['if', 'elif', 'else:', 'for', 'while', 'with', 'def', 'class']
        if any(stripped.startswith(keyword) for keyword in block_keywords):
            indent = len(line) - len(line.lstrip())
            fixed_lines.append(line)
            i += 1
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
            block_content = []
            while i < n:
                next_line = lines[i]
                next_indent = len(next_line) - len(next_line.lstrip())
                if next_indent <= indent and next_line.strip() != '':
                    break
                block_content.append(next_line)
                i += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ –±–ª–æ–∫
            non_empty = [l for l in block_content if l.strip() and not l.strip().startswith('#')]
            if not non_empty:
                fixed_lines.append(' ' * (indent + 4) + 'pass')
            else:
                fixed_lines.extend(block_content)
        else:
            fixed_lines.append(line)
            i += 1
    
    return '\n'.join(fixed_lines)

def fix_redundant_else(content):
    """–£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –±–ª–æ–∫–∏ else –≤ try-except."""
    lines = content.splitlines()
    fixed_lines = []
    i = 0
    n = len(lines)
    
    while i < n:
        line = lines[i]
        stripped = line.strip()
        
        if stripped == 'else:':
            indent = len(line) - len(line.lstrip())
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ except
            has_except = False
            for j in range(i-1, max(i-10, -1), -1):
                prev_line = lines[j]
                prev_indent = len(prev_line) - len(prev_line.lstrip())
                if prev_indent < indent and 'except' in prev_line:
                    has_except = True
                    break
            
            if has_except:
                # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞ else
                j = i + 1
                block_content = []
                while j < n:
                    next_line = lines[j]
                    next_indent = len(next_line) - len(next_line.lstrip())
                    if next_indent <= indent and next_line.strip() != '':
                        break
                    block_content.append(next_line)
                    j += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç –ª–∏ –±–ª–æ–∫ else
                non_empty = [l for l in block_content if l.strip() and not l.strip().startswith('#')]
                if not non_empty:
                    i = j  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫ else
                    continue
                else:
                    fixed_lines.append(line)
                    fixed_lines.extend(block_content)
                    i = j
                    continue
            else:
                fixed_lines.append(line)
                i += 1
        else:
            fixed_lines.append(line)
            i += 1
    
    return '\n'.join(fixed_lines)

def fix_imports(content):
    """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ —Ç–∏–ø–∞–º."""
    try:
        tree = ast.parse(content)
    except SyntaxError:
        return content

    imports = defaultdict(list)
    import_nodes = []
    last_import_line = 0

    for node in ast.walk(tree):
        if isinstance(node, (ast.Import, ast.ImportFrom)):
            if hasattr(node, 'lineno') and node.lineno > last_import_line:
                import_nodes.append(node)
                last_import_line = node.lineno

    for node in import_nodes:
        if isinstance(node, ast.Import):
            for alias in node.names:
                imports['standard'].append(f"import {alias.name}")
        elif isinstance(node, ast.ImportFrom):
            module = node.module or ''
            for alias in node.names:
                imports['third_party'].append(f"from {module} import {alias.name}")

    sorted_imports = []
    for category in ['standard', 'third_party']:
        if imports[category]:
            sorted_imports.extend(sorted(set(imports[category])))
            sorted_imports.append('')

    if not import_nodes:
        return content

    lines = content.splitlines()
    start_line = min(node.lineno for node in import_nodes) - 1
    end_line = max(node.end_lineno for node in import_nodes if hasattr(node, 'end_lineno')) - 1

    new_content = (
        '\n'.join(lines[:start_line]) + '\n' +
        '\n'.join(sorted_imports) +
        '\n'.join(lines[end_line + 1:])
    )
    
    return new_content

def fix_syntax_errors(content):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏."""
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö
    replacements = {
        r'imp or t': 'import',
        r'logg in g': 'logging',
        r' in sert': 'insert',
        r' in g': 'ing',
        r' in ': 'in ',
        r'f or mat': 'format',
        r'f or ': 'for ',
        r' and ': 'and ',
        r' is ': 'is ',
        r'pr in t': 'print',
        r'==': '=',
        r'= =': '==',
        r': =': ':=',
        r'=:': '=',
        r' % ': '%',
        r' %': '%',
        r'% ': '%',
    }
    
    for pattern, replacement in replacements.items():
        content = re.sub(pattern, replacement, content)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤–æ–µ—Ç–æ—á–∏–π –ø–æ—Å–ª–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    content = re.sub(r'(if|elif|else|for|while|with|def|class)\s*(\([^)]*\))?\s*$(?=\s*[^#\s])', r'\1\2:', content, flags=re.MULTILINE)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∑–∞–ø—è—Ç—ã—Ö –≤ –≤—ã–∑–æ–≤–∞—Ö —Ñ—É–Ω–∫—Ü–∏–π
    content = re.sub(r',(\s*[\]\}])', r'\1', content)
    
    return content

def validate_python_syntax(content):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞–ª–∏–¥–Ω—ã–º Python-–∫–æ–¥–æ–º."""
    try:
        ast.parse(content)
        return True
    except SyntaxError as e:
        print(f"    –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    except Exception as e:
        print(f"    –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {e}")
        return False

def create_backup(filepath):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞."""
    backup_path = filepath + '.bak'
    try:
        with open(filepath, 'r', encoding='utf-8') as src:
            with open(backup_path, 'w', encoding='utf-8') as dst:
                dst.write(src.read())
        return True
    except Exception:
        return False

def process_file(filepath):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω Python-—Ñ–∞–π–ª."""
    print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filepath}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–∞–º–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
    if os.path.abspath(filepath) == os.path.abspath(__file__):
        print(f"–ü—Ä–æ–ø—É—Å–∫ —Å–∞–º–æ–≥–æ —Å–µ–±—è: {filepath}")
        return
        
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
    backup_path = create_backup_with_timestamp(filepath)
    if not backup_path:
        print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {filepath}")
        return
        
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filepath}: {e}")
        return

    original_content = content
    print(f"  üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    original_valid = validate_python_syntax(content)
    print(f"  üîç –ò—Å—Ö–æ–¥–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: {'‚úÖ –≤–∞–ª–∏–¥–µ–Ω' if original_valid else '‚ùå –ù–ï –í–ê–õ–ò–î–ï–ù'}")
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç
    if not original_valid:
        print("  üö® –§–∞–π–ª —Å–∏–ª—å–Ω–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø—Ä–∏–º–µ–Ω—è—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç...")
        content = emergency_repair(content)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞
        emergency_valid = validate_python_syntax(content)
        if emergency_valid:
            print("  ‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç —É—Å–ø–µ—à–µ–Ω!")
        else:
            print("  ‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –Ω–µ –ø–æ–º–æ–≥, –ø—Ä–∏–º–µ–Ω—è—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    print("  üîß –ü—Ä–∏–º–µ–Ω—è—é —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    content = fix_indentation(content)
    content = fix_syntax_errors(content)
    content = fix_try_except(content)
    content = fix_empty_blocks(content)
    content = fix_redundant_else(content)
    content = fix_imports(content)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    content = apply_preventive_fixes(content)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    final_valid = validate_python_syntax(content)
    print(f"  üîç –ò—Ç–æ–≥–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: {'‚úÖ –≤–∞–ª–∏–¥–µ–Ω' if final_valid else '‚ùå –ù–ï –í–ê–õ–ò–î–ï–ù'}")
    
    if not final_valid and original_valid:
        print(f"  ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–º–∞–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: {filepath}. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        try:
            with open(backup_path, 'r', encoding='utf-8') as f:
                backup_content = f.read()
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(backup_content)
            print(f"  ‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {filepath}: {e}")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —Ñ–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω
    if content != original_content:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if final_valid:
            try:
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"  ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω: {filepath}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {filepath}: {e}")
        else:
            print(f"  ‚ö†Ô∏è –§–∞–π–ª –∏–∑–º–µ–Ω–µ–Ω, –Ω–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {filepath}")
            print(f"  üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
            try:
                with open(backup_path, 'r', encoding='utf-8') as f:
                    backup_content = f.read()
                with open(filepath, 'w', encoding='utf-8') as f:
                    f.write(backup_content)
                print(f"  ‚úÖ –§–∞–π–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    else:
        print(f"  ‚ûñ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {filepath}")
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    print(f"  üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {backup_path}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if final_valid:
        create_file_integrity_check(filepath)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    current_dir = os.getcwd()
    print(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É Python-—Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {current_dir}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
    backup_dir = smart_backup_management()
    
    python_files = []
    for root, _, files in os.walk(current_dir):
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                python_files.append(filepath)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ Python-—Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    
    for i, filepath in enumerate(python_files, 1):
        print(f"\n[{i}/{len(python_files)}] ", end="")
        process_file(filepath)
    
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(python_files)}")
    
    # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ø—Ä–æ–µ–∫—Ç–∞
    print("\n" + "=" * 50)
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –∑–¥–æ—Ä–æ–≤
    cleanup_backup_files()

def setup_file_monitoring():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π."""
    print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É
    monitor_file = "file_monitoring_guide.md"
    with open(monitor_file, 'w', encoding='utf-8') as f:
        f.write("""# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É —Ñ–∞–π–ª–æ–≤

## –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π

### 1. –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
- –ó–∞–ø—É—Å–∫–∞–π—Ç–µ `python fix_python_files.py` –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Å–µ–∞–Ω—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ñ–∞–π–ª—ã `.integrity` –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π

### 2. –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
- –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `python -m py_compile <—Ñ–∞–π–ª>` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

### 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
- –ü—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ `.backups/`
- –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–º–æ–Ω—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π

### 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
- –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–æ–≤
- –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ö–µ—à–∏ –≤ —Ñ–∞–π–ª–∞—Ö `.integrity`
- –û–±—Ä–∞—â–∞–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è Python

### 5. –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
- –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ `.backups/`
- –ü—Ä–∏ –∑–¥–æ—Ä–æ–≤–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –±—ç–∫–∞–ø—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
- –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: `python -c "from fix_python_files import cleanup_backup_files; cleanup_backup_files()"`
""")
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞: {monitor_file}")

def manual_cleanup():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
    print("üßπ –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    cleanup_backup_files()

def show_backup_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π."""
    print("üìä –°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    
    backup_dir = ".backups"
    if not os.path.exists(backup_dir):
        print("  üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    backup_files = []
    for file in os.listdir(backup_dir):
        if file.endswith('.backup_'):
            backup_files.append(file)
    
    if not backup_files:
        print("  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backup_files)}")
    print("  üìã –°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–∞–º
    file_groups = {}
    for backup_file in backup_files:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        parts = backup_file.split('.backup_')
        if len(parts) >= 2:
            original_file = parts[0].replace('_', '/').replace('_', '\\')
            timestamp = parts[1]
            if original_file not in file_groups:
                file_groups[original_file] = []
            file_groups[original_file].append(timestamp)
    
    for original_file, timestamps in file_groups.items():
        print(f"    üìÑ {original_file}: {len(timestamps)} –≤–µ—Ä—Å–∏–π")
        for timestamp in sorted(timestamps)[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            print(f"      - {timestamp}")
        if len(timestamps) > 3:
            print(f"      ... –∏ –µ—â–µ {len(timestamps) - 3} –≤–µ—Ä—Å–∏–π")
    
    print(f"\n  üí° –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cleanup_backup_files()")

def force_cleanup_all_backups():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç –í–°–ï —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    print("üßπ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –í–°–ï–• –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô...")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏!")
    
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –±—ç–∫–∞–ø–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ
    all_backup_files = []
    all_integrity_files = []
    
    for root, _, files in os.walk('.'):
        for file in files:
            filepath = os.path.join(root, file)
            if file.endswith('.backup_') or file.endswith('.bak'):
                all_backup_files.append(filepath)
            elif file.endswith('.integrity'):
                all_integrity_files.append(filepath)
    
    print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(all_backup_files)}")
    print(f"  üìã –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {len(all_integrity_files)}")
    
    if not all_backup_files and not all_integrity_files:
        print("  ‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    print("\n  üìã –§–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    for backup_file in all_backup_files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"    - {backup_file}")
    if len(all_backup_files) > 10:
        print(f"    ... –∏ –µ—â–µ {len(all_backup_files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input("\n  ‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –í–°–ï–• —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π? (yes/NO): ").strip().lower()
    if response != 'yes':
        print("  ‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    deleted_backups = 0
    deleted_integrity = 0
    
    print("\n  üóëÔ∏è –£–¥–∞–ª—è—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏...")
    for backup_file in all_backup_files:
        try:
            os.remove(backup_file)
            deleted_backups += 1
            print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω: {backup_file}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {backup_file}: {e}")
    
    print("\n  üóëÔ∏è –£–¥–∞–ª—è—é —Ñ–∞–π–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏...")
    for integrity_file in all_integrity_files:
        try:
            os.remove(integrity_file)
            deleted_integrity += 1
            print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω: {integrity_file}")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {integrity_file}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ .backups
    backup_dirs = ['.backups']
    for backup_dir in backup_dirs:
        if os.path.exists(backup_dir):
            try:
                os.rmdir(backup_dir)
                print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø—É—Å—Ç–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {backup_dir}")
            except Exception:
                pass  # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
    
    print(f"\n  üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted_backups}")
    print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {deleted_integrity}")
    print(f"  üí° –¢–µ–ø–µ—Ä—å –ø—Ä–æ–µ–∫—Ç —á–∏—Å—Ç –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π!")

def cleanup_old_backups_by_age(days_old=7):
    """–£–¥–∞–ª—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π."""
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π...")
    
    from datetime import datetime, timedelta
    cutoff_date = datetime.now() - timedelta(days=days_old)
    
    all_backup_files = []
    for root, _, files in os.walk('.'):
        for file in files:
            if file.endswith('.backup_') or file.endswith('.bak'):
                filepath = os.path.join(root, file)
                try:
                    file_time = datetime.fromtimestamp(os.path.getmtime(filepath))
                    if file_time < cutoff_date:
                        all_backup_files.append((filepath, file_time))
                except Exception:
                    pass
    
    if not all_backup_files:
        print("  ‚úÖ –°—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"  üìÅ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(all_backup_files)}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    all_backup_files.sort(key=lambda x: x[1])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    print("  üìã –°—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    for backup_file, file_time in all_backup_files[:10]:
        age_days = (datetime.now() - file_time).days
        print(f"    - {backup_file} (–≤–æ–∑—Ä–∞—Å—Ç: {age_days} –¥–Ω–µ–π)")
    
    if len(all_backup_files) > 10:
        print(f"    ... –∏ –µ—â–µ {len(all_backup_files) - 10} —Ñ–∞–π–ª–æ–≤")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n  ‚ùì –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—à–µ {days_old} –¥–Ω–µ–π? (y/N): ").strip().lower()
    if response != 'y':
        print("  ‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    deleted_count = 0
    for backup_file, file_time in all_backup_files:
        try:
            os.remove(backup_file)
            deleted_count += 1
            age_days = (datetime.now() - file_time).days
            print(f"    ‚úÖ –£–¥–∞–ª–µ–Ω: {backup_file} (–≤–æ–∑—Ä–∞—Å—Ç: {age_days} –¥–Ω–µ–π)")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {backup_file}: {e}")
    
    print(f"\n  üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"  ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {deleted_count}")

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è Python —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    setup_file_monitoring()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    main()
    
    print("\n" + "=" * 60)
    print("üéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    show_backup_status()
    
    print("\nüí° –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ –±—É–¥—É—â–µ–º:")
    print("   - –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç—É —É—Ç–∏–ª–∏—Ç—É")
    print("   - –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
    print("   - –ü—Ä–∏ –∑–¥–æ—Ä–æ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ –±—ç–∫–∞–ø—ã —É–¥–∞–ª—è—é—Ç—Å—è")
    print("   - –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: manual_cleanup()")
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π:")
    print("   - force_cleanup_all_backups() - —É–¥–∞–ª–∏—Ç—å –í–°–ï –±—ç–∫–∞–ø—ã")
    print("   - cleanup_old_backups_by_age(7) - —É–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π")
    print("   - show_backup_status() - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤")
    
    print("=" * 60)