"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã —Å –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é.
"""

import sys
import logging
import time
import random
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
from config.settings_manager import settings_manager
from entities.player import Player
from entities.enemy import Enemy
from entities.entity_factory import EntityFactory

class SimpleGame:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã"""
    
    def __init__(self):
        self.running = False
        self.player = None
        self.enemies = []
        self.game_time = 0
        self.delta_time = 0
        self.last_frame_time = 0
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É
        self.factory = EntityFactory()
        
        logger.info("–ü—Ä–æ—Å—Ç–∞—è –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def start_new_game(self, player_name: str = "–ì–µ—Ä–æ–π"):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã: {player_name}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
            self.player = self.factory.create_player("player", (0, 0))
            self.player.name = player_name
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–æ–≤
            self.spawn_enemies()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            self.running = True
            self.game_time = 0
            self.last_frame_time = time.time()
            
            logger.info("–ù–æ–≤–∞—è –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã: {e}")
            return False
    
    def spawn_enemies(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–∞–≥–æ–≤"""
        enemy_types = ["warrior", "archer", "mage"]
        
        for i in range(3):
            enemy_type = random.choice(enemy_types)
            enemy = self.factory.create_enemy(
                enemy_type=enemy_type,
                level=random.randint(1, 3),
                position=(random.randint(100, 300), random.randint(100, 300))
            )
            self.enemies.append(enemy)
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(self.enemies)} –≤—Ä–∞–≥–æ–≤")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞")
            
            while self.running:
                # –í—ã—á–∏—Å–ª—è–µ–º delta time
                current_time = time.time()
                self.delta_time = current_time - self.last_frame_time
                self.last_frame_time = current_time
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏–≥—Ä—ã
                self.game_time += int(self.delta_time * 1000)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
                self.handle_input()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É
                self.update()
                
                # –†–µ–Ω–¥–µ—Ä–∏–º
                self.render()
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º FPS
                time.sleep(max(0, 1/30 - self.delta_time))
            
            logger.info("–ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∏–≥—Ä–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    def handle_input(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
            # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π pygame
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
            if self.player and self.player.health < self.player.max_health * 0.5:
                self.player.use_item_intelligently()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
    
    def update(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—É—é –ª–æ–≥–∏–∫—É"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞
            if self.player:
                self.player.update(self.delta_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤
            for enemy in self.enemies[:]:  # –ö–æ–ø–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                enemy.update(self.delta_time)
                
                # –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
                if not enemy.alive:
                    self.enemies.remove(enemy)
                    logger.info(f"–í—Ä–∞–≥ {enemy.enemy_type} –ø–æ–±–µ–∂–¥–µ–Ω!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏
            self.check_collisions()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É/–ø–æ—Ä–∞–∂–µ–Ω–∏–µ
            self.check_game_state()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def check_collisions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–ª–∏–∑–∏–∏"""
        try:
            if not self.player or not self.player.alive:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –∏–≥—Ä–æ–∫–∞ —Å –≤—Ä–∞–≥–∞–º–∏
            for enemy in self.enemies:
                if enemy.alive:
                    distance = self.player.distance_to(enemy)
                    if distance < 50:  # –†–∞–¥–∏—É—Å –∫–æ–ª–ª–∏–∑–∏–∏
                        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –≤—Ä–∞–≥–∞
                        if self.player.can_attack():
                            damage_report = self.player.attack(enemy)
                            if damage_report:
                                logger.info(f"–ò–≥—Ä–æ–∫ –Ω–∞–Ω–µ—Å {damage_report.get('damage', 0)} —É—Ä–æ–Ω–∞ –≤—Ä–∞–≥—É {enemy.enemy_type}")
                        
                        # –í—Ä–∞–≥ –∞—Ç–∞–∫—É–µ—Ç –∏–≥—Ä–æ–∫–∞
                        if enemy.can_attack():
                            damage_report = enemy.attack(self.player)
                            if damage_report:
                                logger.info(f"–í—Ä–∞–≥ {enemy.enemy_type} –Ω–∞–Ω–µ—Å {damage_report.get('damage', 0)} —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–ª–∏–∑–∏–π: {e}")
    
    def check_game_state(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥—É
            if not self.enemies:
                logger.info("üéâ –ü–æ–±–µ–¥–∞! –í—Å–µ –≤—Ä–∞–≥–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã!")
                self.running = False
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
            if self.player and not self.player.alive:
                logger.info("üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –ò–≥—Ä–æ–∫ –ø–æ–≥–∏–±!")
                self.running = False
                return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã: {e}")
    
    def render(self):
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –∏–≥—Ä—É"""
        try:
            # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
            self.print_game_state()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {e}")
    
    def print_game_state(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if not self.player:
            return
        
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω (–ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±)
        print("\n" * 50)
        
        print("=" * 60)
        print(f"üéÆ –ò–ì–†–ê –í–†–ï–ú–Ø: {self.game_time//1000}—Å")
        print("=" * 60)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ
        print(f"üë§ –ò–ì–†–û–ö: {self.player.name}")
        print(f"   ‚ù§Ô∏è  –ó–¥–æ—Ä–æ–≤—å–µ: {self.player.health:.1f}/{self.player.max_health:.1f} ({self.player.get_health_percentage()*100:.1f}%)")
        print(f"   üîÆ –ú–∞–Ω–∞: {self.player.mana:.1f}/{self.player.max_mana:.1f} ({self.player.get_mana_percentage()*100:.1f}%)")
        print(f"   ‚ö° –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {self.player.stamina:.1f}/{self.player.max_stamina:.1f} ({self.player.get_stamina_percentage()*100:.1f}%)")
        print(f"   üìä –£—Ä–æ–≤–µ–Ω—å: {self.player.level} | –û–ø—ã—Ç: {self.player.experience}/{self.player.experience_to_next}")
        print(f"   üó°Ô∏è  –£—Ä–æ–Ω: {self.player.damage_output:.1f} | üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {self.player.defense:.1f}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞–≥–∞—Ö
        print(f"\nüëπ –í–†–ê–ì–ò ({len(self.enemies)}):")
        for i, enemy in enumerate(self.enemies, 1):
            if enemy.alive:
                health_percent = enemy.get_health_percentage() * 100
                print(f"   {i}. {enemy.enemy_type.title()} (–£—Ä.{enemy.level}) - ‚ù§Ô∏è {enemy.health:.1f}/{enemy.max_health:.1f} ({health_percent:.1f}%)")
            else:
                print(f"   {i}. {enemy.enemy_type.title()} - üíÄ –ú–ï–†–¢–í")
        
        # AI –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nü§ñ AI –°–ò–°–¢–ï–ú–´:")
        print(f"   üß† –ü–∞–º—è—Ç—å: {len(self.player.ai_memory.memory)} —Å–æ–±—ã—Ç–∏–π")
        print(f"   üìà –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ –æ—Ä—É–∂–∏—è: {self.player.weapon_mastery}")
        print(f"   üéØ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {self.player.item_preferences}")
        
        print("\n" + "=" * 60)
        print("üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º (AI —É–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–º)")
        print("=" * 60)
        
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
            
            logger.info("–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    game = SimpleGame()
    
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_manager.reload_settings()
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
        if game.start_new_game("–ì–µ—Ä–æ–π"):
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
            game.run()
        
    except KeyboardInterrupt:
        logger.info("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        game.cleanup()
        logger.info("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    main()
