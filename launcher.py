#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ª–∞—É–Ω—á–µ—Ä –¥–ª—è –∏–≥—Ä—ã "–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
"""

import sys
import os
import traceback
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version_info}")
        return False
    logger.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}")
    return True


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = {
        'pygame': '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫',
        'numpy': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è', 
        'sqlite3': '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö',
    }
    
    missing = []
    for dep, desc in dependencies.items():
        try:
            __import__(dep)
            logger.info(f"‚úÖ {dep} - {desc}")
        except ImportError:
            logger.warning(f"‚ö†Ô∏è {dep} –Ω–µ –Ω–∞–π–¥–µ–Ω - {desc}")
            missing.append(dep)
    
    if missing:
        logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(missing)}")
        logger.info("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install pygame numpy")
    
    return len(missing) == 0


def check_game_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'run_game.py',
        'core/__init__.py',
        'ui/__init__.py',
        'config/game_settings.json'
    ]
    
    missing = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing.append(file_path)
        else:
            logger.info(f"‚úÖ {file_path}")
    
    if missing:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing)}")
        return False
    
    return True


def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    dirs = ['logs', 'save', 'screenshots']
    for dir_name in dirs:
        Path(dir_name).mkdir(exist_ok=True)
        logger.info(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}")


def run_game_safe():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏–≥—Ä–µ
        game_dir = Path(__file__).parent
        if str(game_dir) not in sys.path:
            sys.path.insert(0, str(game_dir))
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        from run_game import main as game_main
        return game_main()
        
    except KeyboardInterrupt:
        logger.info("üõë –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return 1
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:")
        logger.error(traceback.format_exc())
        return 1


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∞—É–Ω—á–µ—Ä–∞"""
    print("üéÆ AI-EVOLVE: –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É
    if not check_python_version():
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_game_files():
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    deps_ok = check_dependencies()
    if not deps_ok:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        logger.info("–ò–≥—Ä–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ").lower()
        if choice != 'y':
            return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    result = run_game_safe()
    
    if result == 0:
        logger.info("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return result


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)
