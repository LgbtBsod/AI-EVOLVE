#!/usr/bin/env python3
"""
AI-EVOLVE: Enhanced Edition - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import sys
import os
import time
import subprocess
import platform
import psutil
import logging
from pathlib import Path
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class PerformanceChecker:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.system_info = self._get_system_info()
        self.performance_score = 0
        self.recommended_settings = {}
    
    def _get_system_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            info = {
                'platform': platform.system(),
                'platform_version': platform.version(),
                'architecture': platform.architecture()[0],
                'processor': platform.processor(),
                'python_version': sys.version,
                'memory_total': psutil.virtual_memory().total // (1024**3),  # GB
                'cpu_count': psutil.cpu_count(),
                'cpu_freq': psutil.cpu_freq().current if psutil.cpu_freq() else 0,
                'disk_free': psutil.disk_usage('/').free // (1024**3),  # GB
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Windows
            if platform.system() == 'Windows':
                try:
                    import winreg
                    with winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 
                                      r"SOFTWARE\Microsoft\Windows NT\CurrentVersion") as key:
                        info['windows_version'] = winreg.QueryValueEx(key, "ProductName")[0]
                except Exception:
                    info['windows_version'] = "Unknown"
            
            return info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")
            return {}
    
    def check_performance(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            score = 0
            recommendations = {}
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
            memory_gb = self.system_info.get('memory_total', 0)
            if memory_gb >= 16:
                score += 30
                recommendations['memory'] = 'excellent'
            elif memory_gb >= 8:
                score += 20
                recommendations['memory'] = 'good'
            elif memory_gb >= 4:
                score += 10
                recommendations['memory'] = 'adequate'
            else:
                recommendations['memory'] = 'insufficient'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
            cpu_count = self.system_info.get('cpu_count', 1)
            if cpu_count >= 8:
                score += 25
                recommendations['cpu'] = 'excellent'
            elif cpu_count >= 4:
                score += 20
                recommendations['cpu'] = 'good'
            elif cpu_count >= 2:
                score += 15
                recommendations['cpu'] = 'adequate'
            else:
                recommendations['cpu'] = 'insufficient'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
            disk_free = self.system_info.get('disk_free', 0)
            if disk_free >= 10:
                score += 15
                recommendations['disk'] = 'excellent'
            elif disk_free >= 5:
                score += 10
                recommendations['disk'] = 'good'
            elif disk_free >= 1:
                score += 5
                recommendations['disk'] = 'adequate'
            else:
                recommendations['disk'] = 'insufficient'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –≤–µ—Ä—Å–∏–∏
            python_version = sys.version_info
            if python_version >= (3, 10):
                score += 10
                recommendations['python'] = 'excellent'
            elif python_version >= (3, 8):
                score += 5
                recommendations['python'] = 'good'
            else:
                recommendations['python'] = 'outdated'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
            lib_score = self._check_libraries()
            score += lib_score
            recommendations['libraries'] = lib_score
            
            self.performance_score = score
            self.recommended_settings = self._get_recommended_settings(score)
            
            return {
                'score': score,
                'recommendations': recommendations,
                'recommended_settings': self.recommended_settings,
                'system_info': self.system_info
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {'score': 0, 'error': str(e)}
    
    def _check_libraries(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
        score = 0
        required_libs = ['pygame', 'numpy', 'sqlite3']
        optional_libs = ['psutil', 'PIL', 'cv2', 'sklearn']
        
        for lib in required_libs:
            try:
                __import__(lib)
                score += 5
            except ImportError:
                pass
        
        for lib in optional_libs:
            try:
                __import__(lib)
                score += 2
            except ImportError:
                pass
        
        return score
    
    def _get_recommended_settings(self, score: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if score >= 80:
            return {
                'render_fps': 120,
                'texture_quality': 'ultra',
                'shadow_quality': 'high',
                'particle_limit': 2000,
                'enable_post_processing': True,
                'enable_advanced_ai': True,
                'enable_physics': True
            }
        elif score >= 60:
            return {
                'render_fps': 60,
                'texture_quality': 'high',
                'shadow_quality': 'medium',
                'particle_limit': 1000,
                'enable_post_processing': True,
                'enable_advanced_ai': True,
                'enable_physics': True
            }
        elif score >= 40:
            return {
                'render_fps': 60,
                'texture_quality': 'medium',
                'shadow_quality': 'low',
                'particle_limit': 500,
                'enable_post_processing': False,
                'enable_advanced_ai': False,
                'enable_physics': True
            }
        else:
            return {
                'render_fps': 30,
                'texture_quality': 'low',
                'shadow_quality': 'off',
                'particle_limit': 200,
                'enable_post_processing': False,
                'enable_advanced_ai': False,
                'enable_physics': False
            }


class GameLauncher:
    """–õ–∞—É–Ω—á–µ—Ä –∏–≥—Ä—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.performance_checker = PerformanceChecker()
        self.game_process = None
    
    def launch_game(self, mode: str = "gui", auto_optimize: bool = True) -> bool:
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ AI-EVOLVE: Enhanced Edition")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if auto_optimize:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
                performance = self.performance_checker.check_performance()
                
                logger.info(f"üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {performance['score']}/100")
                logger.info(f"üíæ –ü–∞–º—è—Ç—å: {performance['system_info'].get('memory_total', 0)} GB")
                logger.info(f"üñ•Ô∏è CPU: {performance['system_info'].get('cpu_count', 0)} —è–¥–µ—Ä")
                logger.info(f"üíø –°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: {performance['system_info'].get('disk_free', 0)} GB")
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                if performance['score'] < 40:
                    logger.warning("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã. –ò–≥—Ä–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ.")
                elif performance['score'] >= 80:
                    logger.info("‚ú® –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å! –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                self._update_config(performance['recommended_settings'])
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            logger.info(f"üéÆ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {mode}")
            
            if mode == "gui":
                return self._launch_gui_mode()
            elif mode == "console":
                return self._launch_console_mode()
            elif mode == "test":
                return self._launch_test_mode()
            elif mode == "demo":
                return self._launch_demo_mode()
            else:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
                return False
                
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
            return False
    
    def _launch_gui_mode(self) -> bool:
        """–ó–∞–ø—É—Å–∫ GUI —Ä–µ–∂–∏–º–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ main.py
            if not Path("main.py").exists():
                logger.error("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
            cmd = [sys.executable, "main.py", "gui"]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –≤—ã–≤–æ–¥ –≤ —Ç–µ–∫—É—â–∏–π —Ç–µ—Ä–º–∏–Ω–∞–ª
            self.game_process = subprocess.Popen(
                cmd,
                cwd=os.getcwd()
            )
            
            logger.info(f"‚úÖ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ (PID: {self.game_process.pid})")
            logger.info("üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def _launch_console_mode(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            cmd = [sys.executable, "main.py", "console"]
            self.game_process = subprocess.Popen(
                cmd,
                cwd=os.getcwd()
            )
            
            logger.info(f"‚úÖ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω (PID: {self.game_process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def _launch_test_mode(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            cmd = [sys.executable, "main.py", "test"]
            self.game_process = subprocess.Popen(
                cmd,
                cwd=os.getcwd()
            )
            
            logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω (PID: {self.game_process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def _launch_demo_mode(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            cmd = [sys.executable, "main.py", "demo"]
            self.game_process = subprocess.Popen(
                cmd,
                cwd=os.getcwd()
            )
            
            logger.info(f"‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–ø—É—â–µ–Ω (PID: {self.game_process.pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
            return False
    
    def _update_config(self, settings: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–≥—Ä—ã"""
        try:
            config_path = Path("config/game_settings.json")
            if not config_path.exists():
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            logger.info("‚öôÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def stop_game(self) -> bool:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã"""
        try:
            if self.game_process and self.game_process.poll() is None:
                self.game_process.terminate()
                self.game_process.wait(timeout=5)
                logger.info("‚úÖ –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                return True
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã: {e}")
            return False
    
    def get_game_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–≥—Ä—ã"""
        if not self.game_process:
            return {'status': 'not_running'}
        
        try:
            returncode = self.game_process.poll()
            if returncode is None:
                return {
                    'status': 'running',
                    'pid': self.game_process.pid,
                    'memory': self._get_process_memory()
                }
            else:
                return {
                    'status': 'finished',
                    'returncode': returncode
                }
                
        except Exception as e:
            return {'status': 'error', 'error': str(e)}
    
    def _get_process_memory(self) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
        try:
            if self.game_process and self.game_process.pid:
                process = psutil.Process(self.game_process.pid)
                memory_info = process.memory_info()
                return memory_info.rss / (1024 * 1024)  # MB
        except Exception:
            pass
        return None


def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üéÆ AI-EVOLVE: Enhanced Edition - –õ–∞—É–Ω—á–µ—Ä

üìã –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python launcher.py [—Ä–µ–∂–∏–º] [–æ–ø—Ü–∏–∏]

üéØ –†–ï–ñ–ò–ú–´:
    gui     - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    console - –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    test    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
    demo    - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

‚öôÔ∏è –û–ü–¶–ò–ò:
    --no-optimize  - –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    --help         - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üöÄ –ü–†–ò–ú–ï–†–´:
    python launcher.py              # –ó–∞–ø—É—Å–∫ GUI —Å –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
    python launcher.py console      # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    python launcher.py --no-optimize # –ë–µ–∑ –∞–≤—Ç–æ–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    python launcher.py test         # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

üîß –§–£–ù–ö–¶–ò–ò:
    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    ‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É
    ‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤
    ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏–≥—Ä—ã
"""
    print(help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–∞—É–Ω—á–µ—Ä–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        mode = "gui"
        auto_optimize = True
        
        if len(sys.argv) > 1:
            if sys.argv[1] == "--help":
                show_help()
                return 0
            
            if "--no-optimize" in sys.argv:
                auto_optimize = False
                sys.argv.remove("--no-optimize")
            
            if len(sys.argv) > 1:
                mode = sys.argv[1]
        
        # –°–æ–∑–¥–∞–µ–º –ª–∞—É–Ω—á–µ—Ä
        launcher = GameLauncher()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        success = launcher.launch_game(mode, auto_optimize)
        
        if success:
            logger.info("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
            
            if mode == "gui":
                logger.info("üéÆ –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ")
                logger.info("üí° –õ–æ–≥–∏ –∏–≥—Ä—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å")
                logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
                time.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = launcher.get_game_status()
                if status['status'] == 'running':
                    logger.info("‚úÖ –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã: {status['status']}")
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                try:
                    while True:
                        time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                        status = launcher.get_game_status()
                        if status['status'] == 'finished':
                            logger.info("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                            break
                        elif status['status'] == 'running':
                            logger.debug("üéÆ –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å...")
                        else:
                            break
                            
                except KeyboardInterrupt:
                    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã...")
                    launcher.stop_game()
            else:
                # –î–ª—è –Ω–µ-GUI —Ä–µ–∂–∏–º–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å
                try:
                    while True:
                        status = launcher.get_game_status()
                        if status['status'] == 'finished':
                            logger.info("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                            break
                        elif status['status'] == 'running':
                            time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                        else:
                            break
                            
                except KeyboardInterrupt:
                    logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä—ã...")
                    launcher.stop_game()
            
            return 0
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã")
            return 1
            
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ª–∞—É–Ω—á–µ—Ä–∞: {e}")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        logger.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)
