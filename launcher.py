#!/usr/bin/env python3
"""AI-EVOLVE Enhanced Edition - Launcher
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –Ω–∞ Panda3D"""

import logging
import os
import sys
import time
import traceback
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
ROOT_DIR = Path(__file__).parent
sys.path.insert(0, str(ROOT_DIR / "src"))

def _configure_console_encoding():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows/PowerShell"""
    try:
        if os.name == 'nt':
            os.system('chcp 65001 > nul')
    except Exception:
        pass

_configure_console_encoding()

def _configure_python_io_encoding():
    """Forces UTF-8 encoding for Python stdio on Windows to avoid Unicode errors."""
    try:
        os.environ.setdefault("PYTHONIOENCODING", "utf-8")
        # Python 3.7+ supports reconfigure on text IO wrappers
        if hasattr(sys.stdout, "reconfigure"):
            sys.stdout.reconfigure(encoding="utf-8", errors="replace")
        if hasattr(sys.stderr, "reconfigure"):
            sys.stderr.reconfigure(encoding="utf-8", errors="replace")
    except Exception:
        pass

_configure_python_io_encoding()

def load_logging_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_path = ROOT_DIR / "config" / "logging_config.json"
        if config_path.exists():
            import json
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ {config_path}")
                return config.get("logging", {})
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "level": "INFO",
        "file_level": "DEBUG",
        "console_level": "INFO",
        "max_archive_files": 10,
        "cleanup_on_startup": True,
        "save_last_session": True,
        "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        "date_format": "%Y-%m-%d %H:%M:%S",
        "external_libraries": {
            "panda3d": "WARNING",
            "numpy": "WARNING",
            "PIL": "WARNING",
            "direct": "WARNING",
            "panda3d.core": "WARNING"
        },
        "suppress_warnings": [
            "setVerticalSync –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
            "setAntialias –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è",
            "LODManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "OcclusionCuller –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        ]
    }

def cleanup_old_logs(log_dir: Path, archive_dir: Path, config: dict):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É archive)
        log_files = [f for f in log_dir.glob("*.log") if f.parent == log_dir]
        
        if not log_files:
            print("üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞")
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤
        if config.get("save_last_session", True) and log_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            log_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            latest_log = log_files[0]
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤
            try:
                import shutil
                archive_name = f"last_session_{time.strftime('%Y%m%d_%H%M%S')}.log"
                archive_path = archive_dir / archive_name
                shutil.copy2(latest_log, archive_path)
                print(f"üíæ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        for log_file in log_files:
            try:
                log_file.unlink()
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥ {log_file.name}: {e}")
        
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {len(log_files)} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
        
        # –û—á–∏—â–∞–µ–º –∞—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        cleanup_log_archive(archive_dir, config)
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

def cleanup_log_archive(archive_dir: Path, config: dict):
    """–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"""
    try:
        archive_files = list(archive_dir.glob("*.log"))
        if len(archive_files) > config.get("max_archive_files", 10):
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            archive_files.sort(key=lambda x: x.stat().st_mtime)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            files_to_remove = archive_files[:-config.get("max_archive_files", 10)]
            for file in files_to_remove:
                try:
                    file.unlink()
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–æ–≥: {file.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–æ–≥ {file.name}: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤: {e}")

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    log_dir = ROOT_DIR / "logs"
    log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤
    archive_dir = ROOT_DIR / "logs" / "archive"
    archive_dir.mkdir(exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging_config = load_logging_config()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if logging_config.get("cleanup_on_startup", True):
        cleanup_old_logs(log_dir, archive_dir, logging_config)
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        logging_config.get("format", '%(asctime)s - %(name)s - %(levelname)s - %(message)s'),
        datefmt=logging_config.get("date_format", '%Y-%m-%d %H:%M:%S')
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    current_log_file = log_dir / f"ai_evolve_{time.strftime('%Y%m%d_%H%M%S')}.log"
    file_handler = logging.FileHandler(
        current_log_file,
        encoding='utf-8'
    )
    file_handler.setLevel(getattr(logging, logging_config.get("file_level", "DEBUG")))
    file_handler.setFormatter(formatter)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setLevel(getattr(logging, logging_config.get("console_level", "INFO")))
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, logging_config.get("level", "DEBUG")))
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    external_libs = logging_config.get("external_libraries", {})
    for lib_name, level in external_libs.items():
        try:
            logging.getLogger(lib_name).setLevel(getattr(logging, level))
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {lib_name}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    suppress_warnings = logging_config.get("suppress_warnings", [])
    if suppress_warnings:
        class WarningFilter(logging.Filter):
            def filter(self, record):
                message = record.getMessage()
                return not any(warning in message for warning in suppress_warnings)
        
        warning_filter = WarningFilter()
        file_handler.addFilter(warning_filter)
        console_handler.addFilter(warning_filter)
        print(f"üîá –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è {len(suppress_warnings)} —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    root_logger.current_log_file = current_log_file
    
    print(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {current_log_file.name}")
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ñ–∞–π–ª–∞: {logging_config.get('file_level', 'DEBUG')}")
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Å–æ–ª–∏: {logging_config.get('console_level', 'INFO')}")

def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    required_packages = [
        "panda3d",
        "numpy"
    ]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    optional_packages = [
        "PIL",
        "cv2",
        "matplotlib"
    ]
    
    missing_required = []
    missing_optional = []
    
    for package in required_packages:
        try:
            if package == "panda3d":
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Panda3D
                import panda3d
                print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: {panda3d.__version__})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
                try:
                    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ Panda3D...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ ShowBase
                    try:
                        from panda3d.core import ShowBase, WindowProperties
                        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ panda3d.core —É—Å–ø–µ—à–µ–Ω")
                    except ImportError:
                        try:
                            from direct.showbase.ShowBase import ShowBase
                            print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ direct.showbase.ShowBase —É—Å–ø–µ—à–µ–Ω")
                        except ImportError:
                            try:
                                from direct.showbase import ShowBase
                                print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ direct.showbase —É—Å–ø–µ—à–µ–Ω")
                            except ImportError:
                                raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ShowBase –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
                    test_base = ShowBase()
                    test_base.destroy()
                    print("‚úÖ Panda3D –æ–∫–Ω–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as window_e:
                    print(f"‚ö†Ô∏è  Panda3D –æ–∫–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è: {window_e}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, —Ç–∞–∫ –∫–∞–∫ Panda3D –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ
                    
            else:
                __import__(package)
                print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError as e:
            missing_required.append(package)
            print(f"‚ùå {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {e}")
        except Exception as e:
            missing_required.append(package)
            print(f"‚ùå {package} - –æ—à–∏–±–∫–∞: {e}")
    
    for package in optional_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_optional.append(package)
            print(f"‚ö†Ô∏è  {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    if missing_required:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_required)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_required)}")
        return False
    
    if missing_optional:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_optional)}")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
        print(f"pip install {' '.join(missing_optional)}")
    
    print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        "logs",
        "saves",
        "config",
        "assets/audio",
        "assets/graphics",
        "assets/data",
        "assets/maps",
        "assets/models",
        "assets/textures",
        "assets/shaders"
    ]
    
    for directory in directories:
        dir_path = ROOT_DIR / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def initialize_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º"""
    try:
        print("\nüîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ì–†–´")
        print("=" * 50)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("üì¶ –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        try:
            from src.main import EnhancedGame
            print("‚úÖ EnhancedGame –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EnhancedGame: {e}")
            raise
        
        print("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã...")
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–≥—Ä—É
        try:
            enhanced_game = EnhancedGame()
            print("‚úÖ EnhancedGame —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EnhancedGame: {e}")
            raise
        
        print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã...")
        try:
            # –ò–≥—Ä–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã: {e}")
            raise
        
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if hasattr(enhanced_game, 'showbase'):
                print("‚úÖ ShowBase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                print("‚ùå ShowBase –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            if hasattr(enhanced_game, 'render_system'):
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
            if hasattr(enhanced_game, 'state_manager'):
                print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            else:
                print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã: {e}")
        
        return enhanced_game
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
        print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        return None

def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã"""
    try:
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª
        root_logger = logging.getLogger()
        if hasattr(root_logger, 'current_log_file') and root_logger.current_log_file:
            current_log = root_logger.current_log_file
            
            # –ï—Å–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤
            if current_log.exists() and current_log.stat().st_size > 0:
                try:
                    import shutil
                    archive_dir = ROOT_DIR / "logs" / "archive"
                    archive_dir.mkdir(exist_ok=True)
                    archive_name = f"session_end_{time.strftime('%Y%m%d_%H%M%S')}.log"
                    archive_path = archive_dir / archive_name
                    shutil.copy2(current_log, archive_path)
                    print(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥: {e}")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ AI-EVOLVE Enhanced Edition - Panda3D Version")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        if not check_python_version():
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not check_dependencies():
            return 1
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        create_directories()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        game = initialize_game()
        if not game:
            return 1
        
        print("\nüéâ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
        try:
            if hasattr(game, 'showbase'):
                print(f"‚úÖ ShowBase –≥–æ—Ç–æ–≤")
            if hasattr(game, 'render_system'):
                print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –≥–æ—Ç–æ–≤–∞")
            if hasattr(game, 'state_manager'):
                print(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –≥–æ—Ç–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        
        print("\nüéÆ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ì–û –û–ö–ù–ê –ò–ì–†–´")
        print("=" * 50)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ì–†–´:")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã
            if hasattr(game, 'showbase'):
                print(f"‚úÖ ShowBase: {type(game.showbase).__name__}")
            else:
                print("‚ùå ShowBase: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
            if hasattr(game, 'render_system'):
                print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {type(game.render_system).__name__}")
            else:
                print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
            if hasattr(game, 'state_manager'):
                print(f"‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π: {type(game.state_manager).__name__}")
            else:
                print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
            if hasattr(game, 'running'):
                print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: {'–∑–∞–ø—É—â–µ–Ω–∞' if game.running else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}")
            else:
                print("‚ö†Ô∏è  –ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'running'")
                
        except Exception as diag_e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {diag_e}")
        
        print("\nüé¨ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–≥—Ä—ã...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–≥—Ä—É
        try:
            print(f"\nüöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ì–†–´:")
            print(f"   =================================================")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É
            if not hasattr(game, 'start'):
                raise Exception("–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ 'start'")
            
            print(f"‚úÖ –ú–µ—Ç–æ–¥ 'start' –Ω–∞–π–¥–µ–Ω")
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–≥—Ä—É...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            try:
                game.start()
                print(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            except Exception as start_error:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã: {start_error}")
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã: {start_error}")
            
            print(f"\nüéâ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ì–†–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê!")
            print(f"   üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            print(f"   ü™ü –û–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º")
            print(f"   ‚èπÔ∏è  –î–ª—è –≤—ã—Ö–æ–¥–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–≥—Ä—ã: {e}")
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ì–†–´: {e}")
            print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            try:
                if hasattr(game, 'showbase'):
                    print(f"‚úÖ ShowBase: {type(game.showbase).__name__}")
                else:
                    print("‚ùå ShowBase –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                if hasattr(game, 'render_system'):
                    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {type(game.render_system).__name__}")
                else:
                    print("‚ùå –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
            except Exception as diag_e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_e}")
            
            return 1
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return 1
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º –≤—ã—Ö–æ–¥–µ
        cleanup_on_exit()

if __name__ == "__main__":
    try:
        exit_code = main()
        if exit_code == 0:
            print("\n‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"\n‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {exit_code})")
        sys.exit(exit_code)
    except SystemExit:
        cleanup_on_exit()
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        cleanup_on_exit()
        sys.exit(1)

