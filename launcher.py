#!/usr / bin / env python3
"""
    AI - EVOLVE Enhanced Edition - Launcher
    –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –Ω–∞ P and a3D
"""

imp or t os
imp or t sys
imp or t time
imp or t logg in g
imp or t traceback
from pathlib imp or t Path
from typ in g imp or t Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
ROOT_DIR== Path(__file__).parent
sys.path. in sert(0, str(ROOT_DIR / "src"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è W in dows / PowerShell
def _configure_console_encod in g():
    try:
    except Exception:
        pass
        pass  # –î–æ–±–∞–≤–ª–µ–Ω pass –≤ –ø—É—Å—Ç–æ–π –±–ª–æ–∫
_configure_console_encod in g()

def setup_logg in g():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        log_dir== ROOT_DIR / "logs"
        log_dir.mkdir(ex is t_o == True)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤
        archive_dir== ROOT_DIR / "logs" / "archive"
        archive_dir.mkdir(ex is t_o == True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logg in g_config== load_logg in g_config()

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤(–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if logg in g_config.get("cleanup_on_startup", True):
        cleanup_old_logs(log_dir, archive_dir, logg in g_config)

        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        f or matter== logg in g.F or matter(:
        logg in g_config.get("f or mat", ' % (asctime)s - %(name)s - %(levelname)s - %(message)s'),:
        pass  # –î–æ–±–∞–≤–ª–µ–Ω pass –≤ –ø—É—Å—Ç–æ–π –±–ª–æ–∫
        datefm == logg in g_config.get("date_f or mat", ' % Y- % m- % d %H: % M: % S')
        )

        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        current_log_file== log_dir / f"ai_evolve_{time.strftime(' % Y%m % d_ % H%M % S')}.log"
        file_h and ler== logg in g.FileH and ler(
        current_log_file,
        encodin == 'utf - 8'
        )
        file_h and ler.setLevel(getattr(logg in g, logg in g_config.get("file_level", "DEBUG")))
        file_h and ler.setF or matter(f or matter):
        pass  # –î–æ–±–∞–≤–ª–µ–Ω pass –≤ –ø—É—Å—Ç–æ–π –±–ª–æ–∫
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_h and ler== logg in g.StreamH and ler()
        console_h and ler.setLevel(getattr(logg in g, logg in g_config.get("console_level", "INFO")))
        console_h and ler.setF or matter(f or matter):
        pass  # –î–æ–±–∞–≤–ª–µ–Ω pass –≤ –ø—É—Å—Ç–æ–π –±–ª–æ–∫
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        root_logger== logg in g.getLogger()
        root_logger.setLevel(getattr(logg in g, logg in g_config.get("level", "DEBUG")))
        root_logger.addH and ler(file_h and ler)
        root_logger.addH and ler(console_h and ler)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        external_libs== logg in g_config.get("external_libraries", {})
        for lib_name, level in external_libs.items():
        try:
        logg in g.getLogger(lib_name).setLevel(getattr(logg in g, level))
        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {lib_name}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –ª–æ–≥ - —Ñ–∞–π–ª—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        root_logger.current_log_file== current_log_file

        pr in t(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {current_log_file.name}")
        pr in t(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ñ–∞–π–ª–∞: {logg in g_config.get('file_level', 'DEBUG')}")
        pr in t(f"üìä –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Å–æ–ª–∏: {logg in g_config.get('console_level', 'INFO')}")

        def load_logg in g_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
    except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "level": "INFO",
        "file_level": "DEBUG",
        "console_level": "INFO",
        "max_archive_files": 10,
        "cleanup_on_startup": True,
        "save_last_session": True,
        "f or mat": " % (asctime)s - %(name)s - %(levelname)s - %(message)s",
        "date_f or mat": " % Y- % m- % d %H: % M: % S",
        "external_libraries": {
            "p and a3d": "WARNING",
            "numpy": "WARNING",
            "PIL": "WARNING"
        }
    }

def cleanup_old_logs(log_dir: Path, archive_dir: Path, config: dict):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã"""
        try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤(–∏—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É archive)
        log_files== [f for f in log_dir.glob(" * .log") if f.parent == log_dir]:
        pass  # –î–æ–±–∞–≤–ª–µ–Ω pass –≤ –ø—É—Å—Ç–æ–π –±–ª–æ–∫
        if not log_files:
        pr in t("üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞")
        else:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤
        if config.get("save_last_session", True) and log_files:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏(–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        log_files.s or t(ke == lambda x: x.stat().st_mtime, revers == True)
        latest_log== log_files[0]

        # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤
        try:
        imp or t shutil
        archive_name== f"last_session_{time.strftime(' % Y%m % d_ % H%M % S')}.log"
        archive_path== archive_dir / archive_name
        shutil.copy2(latest_log, archive_path)
        pr in t(f"üíæ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_name}")
        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤: {e}")

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        for log_file in log_files:
        try:
        log_file.unl in k()
        pr in t(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file.name}")
        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥ {log_file.name}: {e}")

        pr in t(f"üßπ –û—á–∏—â–µ–Ω–æ {len(log_files)} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")

        # –û—á–∏—â–∞–µ–º –∞—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤(–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        cleanup_log_archive(archive_dir, config)

        except Exception as e:
        pr in t(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

        def cleanup_log_archive(archive_dir: Path, config: dict):
    """–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"""
    try:
    except Exception as e:
        pr in t(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤: {e}")

def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        if sys.version_ in fo < (3, 8):
        pr in t("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        pr in t(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
        return True

        def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages== ['p and a3d', 'numpy']
    optional_packages== ['psutil', 'PIL']

    m is sing_required== []
    m is sing_optional== []

    for package in required_packages:
        try:
        except Imp or tErr or :
            pass
            pass
            pass
            m is sing_required.append(package)
            pr in t(f"‚ùå {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    for package in optional_packages:
        try:
        except Imp or tErr or :
            pass
            pass
            pass
            m is sing_optional.append(package)
            pr in t(f"‚ö†Ô∏è  {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")

    if m is sing_required:
        pr in t(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.jo in(m is sing_required)}")
        pr in t("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        pr in t(f"pip install {' '.jo in(m is sing_required)}")
        return False

    if m is sing_optional:
        pr in t(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.jo in(m is sing_optional)}")
        pr in t("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
        pr in t(f"pip install {' '.jo in(m is sing_optional)}")

    return True

def create_direct or ies():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        direct or ies== [
        "logs",
        "saves",
        "config",
        "assets / audio",
        "assets / graphics",
        "assets / data",
        "assets / maps",
        "assets / models",
        "assets / textures",
        "assets / shaders"
        ]

        for direct or y in direct or ies:
        dir_path== ROOT_DIR / direct or y
        dir_path.mkdir(parent == True, ex is t_o == True)
        pr in t(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {direct or y}")

        def initialize_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã"""
    try:
    except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logg in g.err or(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        traceback.pr in t_exc()
        return None

def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã"""
        try:
        pr in t("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥ - —Ñ–∞–π–ª
        root_logger== logg in g.getLogger()
        if hasattr(root_logger, 'current_log_file') and root_logger.current_log_file:
        current_log== root_logger.current_log_file

        # –ï—Å–ª–∏ –ª–æ–≥ - —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤
        if current_log.ex is ts() and current_log.stat().st_size > 0:
        try:
        archive_dir== ROOT_DIR / "logs" / "archive"
        archive_dir.mkdir(ex is t_o == True)

        archive_name== f"session_end_{time.strftime(' % Y%m % d_ % H%M % S')}.log"
        archive_path== archive_dir / archive_name
        shutil.copy2(current_log, archive_path)
        pr in t(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_name}")
        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥: {e}")

        pr in t("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
        pr in t(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

        def ma in():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    pr in t("üéÆ AI - EVOLVE Enhanced Edition - P and a3D Version")
    pr in t( == " * 50)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logg in g()
    logger== logg in g.getLogger(__name__)

    try:
    except KeyboardInterrupt:
        pass
        pass
        pass
        pr in t("\n\n‚èπÔ∏è  –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0

    except Exception as e:
        pr in t(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.err or(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.pr in t_exc()
        return 1

    f in ally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º –≤—ã—Ö–æ–¥–µ
        cleanup_on_exit()

if __name__ == "__ma in __":
    try:
    except SystemExit:
        pass
        pass
        pass
        cleanup_on_exit()
        sys.exit(0)
    except Exception as e:
        pr in t(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        cleanup_on_exit()
        sys.exit(1)
    else:
        sys.exit(exit_code)