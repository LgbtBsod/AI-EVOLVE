#!/usr/bin/env python3
"""AI-EVOLVE Enhanced Edition - Launcher
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –Ω–∞ Panda3D"""

import logging
import os
import sys
import time
import traceback
from pathlib import Path
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
ROOT_DIR = Path(__file__).parent
sys.path.insert(0, str(ROOT_DIR / "src"))

def _configure_console_encoding():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows/PowerShell"""
    try:
        if os.name == 'nt':
            os.system('chcp 65001 > nul')
    except Exception:
        pass

_configure_console_encoding()

def load_logging_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return {
            "level": "INFO",
            "file_level": "DEBUG",
            "console_level": "INFO",
            "max_archive_files": 10,
            "cleanup_on_startup": True,
            "save_last_session": True,
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "date_format": "%Y-%m-%d %H:%M:%S",
            "external_libraries": {
                "panda3d": "WARNING",
                "numpy": "WARNING",
                "PIL": "WARNING"
            }
        }
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            "level": "INFO",
            "file_level": "DEBUG",
            "console_level": "INFO",
            "max_archive_files": 10,
            "cleanup_on_startup": True,
            "save_last_session": True,
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            "date_format": "%Y-%m-%d %H:%M:%S",
            "external_libraries": {
                "panda3d": "WARNING",
                "numpy": "WARNING",
                "PIL": "WARNING"
            }
        }

def cleanup_old_logs(log_dir: Path, archive_dir: Path, config: dict):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –ª–æ–≥–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º –ø–∞–ø–∫—É archive)
        log_files = [f for f in log_dir.glob("*.log") if f.parent == log_dir]
        
        if not log_files:
            print("üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞")
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–æ–≥–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤
        if config.get("save_last_session", True) and log_files:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            log_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            latest_log = log_files[0]
            
            # –ö–æ–ø–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤
            try:
                import shutil
                archive_name = f"last_session_{time.strftime('%Y%m%d_%H%M%S')}.log"
                archive_path = archive_dir / archive_name
                shutil.copy2(latest_log, archive_path)
                print(f"üíæ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥ –≤ –∞—Ä—Ö–∏–≤: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏
        for log_file in log_files:
            try:
                log_file.unlink()
                print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file.name}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–≥ {log_file.name}: {e}")
        
        print(f"üßπ –û—á–∏—â–µ–Ω–æ {len(log_files)} —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
        
        # –û—á–∏—â–∞–µ–º –∞—Ä—Ö–∏–≤ –ª–æ–≥–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
        cleanup_log_archive(archive_dir, config)
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤: {e}")

def cleanup_log_archive(archive_dir: Path, config: dict):
    """–û—á–∏—Å—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"""
    try:
        archive_files = list(archive_dir.glob("*.log"))
        if len(archive_files) > config.get("max_archive_files", 10):
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            archive_files.sort(key=lambda x: x.stat().st_mtime)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
            files_to_remove = archive_files[:-config.get("max_archive_files", 10)]
            for file in files_to_remove:
                try:
                    file.unlink()
                    print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–æ–≥: {file.name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–π –ª–æ–≥ {file.name}: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤: {e}")

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
    log_dir = ROOT_DIR / "logs"
    log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥–æ–≤
    archive_dir = ROOT_DIR / "logs" / "archive"
    archive_dir.mkdir(exist_ok=True)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging_config = load_logging_config()
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if logging_config.get("cleanup_on_startup", True):
        cleanup_old_logs(log_dir, archive_dir, logging_config)
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        logging_config.get("format", '%(asctime)s - %(name)s - %(levelname)s - %(message)s'),
        datefmt=logging_config.get("date_format", '%Y-%m-%d %H:%M:%S')
    )
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    current_log_file = log_dir / f"ai_evolve_{time.strftime('%Y%m%d_%H%M%S')}.log"
    file_handler = logging.FileHandler(
        current_log_file,
        encoding='utf-8'
    )
    file_handler.setLevel(getattr(logging, logging_config.get("file_level", "DEBUG")))
    file_handler.setFormatter(formatter)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler()
    console_handler.setLevel(getattr(logging, logging_config.get("console_level", "INFO")))
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    root_logger = logging.getLogger()
    root_logger.setLevel(getattr(logging, logging_config.get("level", "DEBUG")))
    root_logger.addHandler(file_handler)
    root_logger.addHandler(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    external_libs = logging_config.get("external_libraries", {})
    for lib_name, level in external_libs.items():
        try:
            logging.getLogger(lib_name).setLevel(getattr(logging, level))
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {lib_name}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    root_logger.current_log_file = current_log_file
    
    print(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {current_log_file.name}")
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å —Ñ–∞–π–ª–∞: {logging_config.get('file_level', 'DEBUG')}")
    print(f"üìä –£—Ä–æ–≤–µ–Ω—å –∫–æ–Ω—Å–æ–ª–∏: {logging_config.get('console_level', 'INFO')}")

def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    required_packages = [
        "panda3d",
        "numpy"
    ]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    optional_packages = [
        "PIL",
        "cv2",
        "matplotlib"
    ]
    
    missing_required = []
    missing_optional = []
    
    for package in required_packages:
        try:
            if package == "panda3d":
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Panda3D
                import panda3d
                print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–≤–µ—Ä—Å–∏—è: {panda3d.__version__})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏
                try:
                    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞ Panda3D...")
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–º–ø–æ—Ä—Ç–∞ ShowBase
                    try:
                        from panda3d.core import ShowBase, WindowProperties
                        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ panda3d.core —É—Å–ø–µ—à–µ–Ω")
                    except ImportError:
                        try:
                            from direct.showbase.ShowBase import ShowBase
                            print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ direct.showbase.ShowBase —É—Å–ø–µ—à–µ–Ω")
                        except ImportError:
                            try:
                                from direct.showbase import ShowBase
                                print("‚úÖ –ò–º–ø–æ—Ä—Ç –∏–∑ direct.showbase —É—Å–ø–µ—à–µ–Ω")
                            except ImportError:
                                raise ImportError("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ShowBase –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
                    test_base = ShowBase()
                    test_base.destroy()
                    print("‚úÖ Panda3D –æ–∫–Ω–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
                    
                except Exception as window_e:
                    print(f"‚ö†Ô∏è  Panda3D –æ–∫–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è: {window_e}")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, —Ç–∞–∫ –∫–∞–∫ Panda3D –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ headless —Ä–µ–∂–∏–º–µ
                    
            else:
                __import__(package)
                print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError as e:
            missing_required.append(package)
            print(f"‚ùå {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {e}")
        except Exception as e:
            missing_required.append(package)
            print(f"‚ùå {package} - –æ—à–∏–±–∫–∞: {e}")
    
    for package in optional_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            missing_optional.append(package)
            print(f"‚ö†Ô∏è  {package} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
    
    if missing_required:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_required)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:")
        print(f"pip install {' '.join(missing_required)}")
        return False
    
    if missing_optional:
        print(f"\n‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: {', '.join(missing_optional)}")
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
        print(f"pip install {' '.join(missing_optional)}")
    
    print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    directories = [
        "logs",
        "saves",
        "config",
        "assets/audio",
        "assets/graphics",
        "assets/data",
        "assets/maps",
        "assets/models",
        "assets/textures",
        "assets/shaders"
    ]
    
    for directory in directories:
        dir_path = ROOT_DIR / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

def initialize_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã"""
    try:
        print("\nüîß –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú")
        print("=" * 50)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("üì¶ –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        try:
            from src.core.state_manager import StateManager
            print("‚úÖ StateManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ StateManager: {e}")
            raise
        
        try:
            from src.systems.attributes.attribute_system import AttributeSystem
            print("‚úÖ AttributeSystem –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ AttributeSystem: {e}")
            raise
        
        try:
            from src.core.master_integrator import MasterIntegrator
            print("‚úÖ MasterIntegrator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ MasterIntegrator: {e}")
            raise
        
        print("\nüèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å–∏—Å—Ç–µ–º...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
        try:
            state_manager = StateManager()
            print("‚úÖ StateManager —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è StateManager: {e}")
            raise
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        try:
            attribute_system = AttributeSystem()
            print("‚úÖ AttributeSystem —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AttributeSystem: {e}")
            raise
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
        try:
            master_integrator = MasterIntegrator()
            print("‚úÖ MasterIntegrator —Å–æ–∑–¥–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MasterIntegrator: {e}")
            raise
        
        print("\nüîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...")
        try:
            master_integrator.set_architecture_components(state_manager, attribute_system)
            print("‚úÖ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
            raise
        
        print("\nüöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
        try:
            if not master_integrator.initialize():
                raise Exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MasterIntegrator")
            print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
            raise
        
        print("\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
        try:
            if not master_integrator.start():
                raise Exception("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MasterIntegrator")
            print("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º: {e}")
            raise
        
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º...")
        try:
            system_info = master_integrator.get_system_info()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(system_info)} —Å–∏—Å—Ç–µ–º–∞—Ö")
            for key, value in system_info.items():
                print(f"   üìã {key}: {value}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö: {e}")
        
        return master_integrator
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
        print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        return None

def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã"""
    try:
        print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–æ–≥-—Ñ–∞–π–ª
        root_logger = logging.getLogger()
        if hasattr(root_logger, 'current_log_file') and root_logger.current_log_file:
            current_log = root_logger.current_log_file
            
            # –ï—Å–ª–∏ –ª–æ–≥-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π, –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ –≤ –∞—Ä—Ö–∏–≤
            if current_log.exists() and current_log.stat().st_size > 0:
                try:
                    import shutil
                    archive_dir = ROOT_DIR / "logs" / "archive"
                    archive_dir.mkdir(exist_ok=True)
                    archive_name = f"session_end_{time.strftime('%Y%m%d_%H%M%S')}.log"
                    archive_path = archive_dir / archive_name
                    shutil.copy2(current_log, archive_path)
                    print(f"üíæ –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {archive_name}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥: {e}")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ AI-EVOLVE Enhanced Edition - Panda3D Version")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
        if not check_python_version():
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not check_dependencies():
            return 1
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        create_directories()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
        game = initialize_game()
        if not game:
            return 1
        
        print("\nüéâ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º:")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö
        system_info = game.get_system_info()
        for key, value in system_info.items():
            print(f"   {key}: {value}")
        
        print("\nüéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üöÄ –ó–ê–ü–£–°–ö –û–ö–ù–ê –ò–ì–†–´")
        print("=" * 50)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ò–ì–†–´:")
        try:
            if hasattr(game, 'systems'):
                print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏—Å—Ç–µ–º: {len(game.systems)}")
                print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: {list(game.systems.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
                key_systems = ['rendering_system', 'attribute_system', 'content_system']
                for system_name in key_systems:
                    if system_name in game.systems:
                        system = game.systems[system_name]
                        print(f"‚úÖ {system_name}: {type(system).__name__}")
                        
                        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                        if system_name == 'rendering_system':
                            if hasattr(system, 'showbase'):
                                print(f"   üé¨ ShowBase: {type(system.showbase).__name__}")
                            else:
                                print(f"   ‚ö†Ô∏è  ShowBase: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                            
                            if hasattr(system, 'run'):
                                print(f"   ‚ñ∂Ô∏è  –ú–µ—Ç–æ–¥ run: –¥–æ—Å—Ç—É–ø–µ–Ω")
                            else:
                                print(f"   ‚ùå –ú–µ—Ç–æ–¥ run: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    else:
                        print(f"‚ùå {system_name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                print("‚ùå –ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'systems'")
                
            if hasattr(game, 'state'):
                print(f"üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã: {game.state}")
            else:
                print("‚ö†Ô∏è  –ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'state'")
                
        except Exception as diag_e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {diag_e}")
        
        print("\nüé¨ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∏–≥—Ä—ã...")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º
        print("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú:")
        try:
            if hasattr(game, 'systems'):
                for system_name, system in game.systems.items():
                    print(f"üìã {system_name}:")
                    print(f"   üè∑Ô∏è  –¢–∏–ø: {type(system).__name__}")
                    if hasattr(system, 'state'):
                        print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {system.state}")
                    if hasattr(system, 'component_id'):
                        print(f"   üÜî ID: {system.component_id}")
                    if hasattr(system, 'priority'):
                        print(f"   ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {system.priority}")
                    
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
                    if system_name == 'rendering_system':
                        if hasattr(system, 'showbase'):
                            print(f"   üé¨ ShowBase: {type(system.showbase).__name__}")
                            if hasattr(system.showbase, 'win'):
                                print(f"   ü™ü –û–∫–Ω–æ: {type(system.showbase.win).__name__}")
                            else:
                                print(f"   ‚ö†Ô∏è  –û–∫–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        else:
                            print(f"   ‚ö†Ô∏è  ShowBase: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        
                        if hasattr(system, 'run'):
                            print(f"   ‚ñ∂Ô∏è  –ú–µ—Ç–æ–¥ run: –¥–æ—Å—Ç—É–ø–µ–Ω")
                        else:
                            print(f"   ‚ùå –ú–µ—Ç–æ–¥ run: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            else:
                print("‚ùå –ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'systems'")
        except Exception as diag_e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_e}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞–ø—Ä—è–º—É—é
        try:
            print(f"\nüîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –†–ï–ù–î–ï–†–ò–ù–ì–ê:")
            print(f"   =================================================")
            
            if hasattr(game, 'systems') and 'rendering_system' in game.systems:
                rendering_system = game.systems['rendering_system']
                print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω–∞: {type(rendering_system).__name__}")
                
                # 1. –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ê–¢–†–ò–ë–£–¢–û–í RenderingSystem
                print(f"\nüìã 1. –ü–†–û–í–ï–†–ö–ê –ê–¢–†–ò–ë–£–¢–û–í RenderingSystem:")
                all_attrs = dir(rendering_system)
                rendering_attrs = [attr for attr in all_attrs if not attr.startswith('_')]
                
                for attr in rendering_attrs:
                    try:
                        value = getattr(rendering_system, attr)
                        if callable(value):
                            print(f"   üîß {attr}: {type(value).__name__} (callable)")
                        else:
                            print(f"   üìä {attr}: {type(value).__name__} = {value}")
                    except Exception as e:
                        print(f"   ‚ùå {attr}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - {e}")
                
                # 2. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ShowBase
                print(f"\nüé¨ 2. –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê ShowBase:")
                if hasattr(rendering_system, 'showbase'):
                    showbase = rendering_system.showbase
                    print(f"   üè∑Ô∏è  –¢–∏–ø: {type(showbase).__name__}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã ShowBase
                    showbase_attrs = ['render', 'render2d', 'camera', 'win', 'taskMgr', 'mouseWatcherNode', 'dataRoot']
                    for attr in showbase_attrs:
                        if hasattr(showbase, attr):
                            value = getattr(showbase, attr)
                            print(f"   ‚úÖ {attr}: {type(value).__name__}")
                        else:
                            print(f"   ‚ùå {attr}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    # 3. –ü–†–û–í–ï–†–ö–ê –û–ö–ù–ê
                    print(f"\nü™ü 3. –ü–†–û–í–ï–†–ö–ê –û–ö–ù–ê:")
                    if hasattr(showbase, 'win'):
                        win = showbase.win
                        print(f"   üè∑Ô∏è  –¢–∏–ø –æ–∫–Ω–∞: {type(win).__name__}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–∫–Ω–∞
                        window_methods = [
                            'isValid', 'getXSize', 'getYSize', 'getState', 'getTitle',
                            'getOrigin', 'getSize', 'getProperties', 'getPipe'
                        ]
                        
                        for method in window_methods:
                            if hasattr(win, method):
                                try:
                                    if method == 'isValid':
                                        result = win.isValid()
                                        print(f"   ‚úÖ {method}: {result}")
                                    elif method == 'getXSize':
                                        result = win.getXSize()
                                        print(f"   üìè {method}: {result}")
                                    elif method == 'getYSize':
                                        result = win.getYSize()
                                        print(f"   üìè {method}: {result}")
                                    elif method == 'getState':
                                        result = win.getState()
                                        print(f"   üìä {method}: {result}")
                                    elif method == 'getTitle':
                                        result = win.getTitle()
                                        print(f"   üè∑Ô∏è  {method}: {result}")
                                    elif method == 'getOrigin':
                                        result = win.getOrigin()
                                        print(f"   üìç {method}: {result}")
                                    elif method == 'getSize':
                                        result = win.getSize()
                                        print(f"   üìê {method}: {result}")
                                    else:
                                        result = getattr(win, method)()
                                        print(f"   ‚úÖ {method}: {result}")
                                except Exception as e:
                                    print(f"   ‚ö†Ô∏è  {method}: –æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ - {e}")
                            else:
                                print(f"   ‚ùå {method}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–∫–Ω–∞
                        print(f"\n   üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–π—Å—Ç–≤ –æ–∫–Ω–∞:")
                        if hasattr(win, 'getProperties'):
                            try:
                                props = win.getProperties()
                                print(f"      üìã –°–≤–æ–π—Å—Ç–≤–∞ –æ–∫–Ω–∞: {props}")
                            except Exception as e:
                                print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞: {e}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pipe
                        if hasattr(win, 'getPipe'):
                            try:
                                pipe = win.getPipe()
                                print(f"      üîå Pipe: {type(pipe).__name__}")
                            except Exception as e:
                                print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipe: {e}")
                    else:
                        print(f"   ‚ùå –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ShowBase")
                else:
                    print(f"   ‚ùå ShowBase –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
                
                # 4. –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–ê RUN
                print(f"\n‚ñ∂Ô∏è  4. –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–û–î–ê RUN:")
                if hasattr(rendering_system, 'run'):
                    run_method = rendering_system.run
                    print(f"   ‚úÖ –ú–µ—Ç–æ–¥ 'run' –Ω–∞–π–¥–µ–Ω: {type(run_method).__name__}")
                    print(f"   üîß –í—ã–∑—ã–≤–∞–µ–º—ã–π: {callable(run_method)}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
                    import inspect
                    try:
                        sig = inspect.signature(run_method)
                        print(f"   üìù –°–∏–≥–Ω–∞—Ç—É—Ä–∞: {sig}")
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É: {e}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docstring
                    if hasattr(run_method, '__doc__') and run_method.__doc__:
                        print(f"   üìñ Docstring: {run_method.__doc__.strip()}")
                    else:
                        print(f"   ‚ö†Ô∏è  Docstring –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    print(f"   ‚ùå –ú–µ—Ç–æ–¥ 'run' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞")
                    raise Exception("–°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ 'run'")
                
                # 5. –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´
                print(f"\nüìä 5. –ü–†–û–í–ï–†–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –°–ò–°–¢–ï–ú–´:")
                if hasattr(rendering_system, 'state'):
                    print(f"   üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {rendering_system.state}")
                    print(f"   üîç –ó–Ω–∞—á–µ–Ω–∏–µ: {rendering_system.state.value}")
                else:
                    print(f"   ‚ö†Ô∏è  –°–æ—Å—Ç–æ—è–Ω–∏–µ: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                
                # 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
                print(f"\nüöÄ 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú:")
                print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                critical_components = ['showbase']
                missing_components = []
                for component in critical_components:
                    if not hasattr(rendering_system, component):
                        missing_components.append(component)
                
                if missing_components:
                    raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {missing_components}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ showbase –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                showbase_critical = ['render', 'render2d', 'win']
                missing_showbase = []
                for component in showbase_critical:
                    if not hasattr(rendering_system.showbase, component):
                        missing_showbase.append(component)
                
                if missing_showbase:
                    raise Exception(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ShowBase: {missing_showbase}")
                
                print(f"   ‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print(f"   ‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ShowBase –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                print(f"   üöÄ –ó–∞–ø—É—Å–∫ –æ–∫–Ω–∞ –∏–≥—Ä—ã...")
                
                # 7. –ó–ê–ü–£–°–ö –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú
                print(f"\nüé¨ 7. –ó–ê–ü–£–°–ö –° –ú–û–ù–ò–¢–û–†–ò–ù–ì–û–ú:")
                print(f"   üöÄ –í—ã–∑—ã–≤–∞–µ–º rendering_system.run()...")
                
                try:
                    print(f"   üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º run():")
                    print(f"      üìä –°–∏—Å—Ç–µ–º–∞: {rendering_system.state}")
                    print(f"      üé¨ ShowBase: {type(rendering_system.showbase).__name__}")
                    print(f"      ü™ü –û–∫–Ω–æ: {type(rendering_system.showbase.win).__name__}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≥–æ—Ç–æ–≤–æ
                    win = rendering_system.showbase.win
                    if hasattr(win, 'isValid'):
                        is_valid = win.isValid()
                        print(f"      ‚úÖ –û–∫–Ω–æ –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
                    else:
                        print(f"      ‚ö†Ô∏è  –ú–µ—Ç–æ–¥ isValid –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    
                    if hasattr(win, 'getXSize') and hasattr(win, 'getYSize'):
                        width = win.getXSize()
                        height = win.getYSize()
                        print(f"      üìè –†–∞–∑–º–µ—Ä—ã: {width}x{height}")
                    else:
                        print(f"      ‚ö†Ô∏è  –ú–µ—Ç–æ–¥—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                    
                    print(f"   üöÄ –í–´–ó–´–í–ê–ï–ú run()...")
                    
                    # –ü–†–û–ë–£–ï–ú –†–ê–ó–ù–´–ï –°–ü–û–°–û–ë–´ –ó–ê–ü–£–°–ö–ê
                    print(f"\n   üîÑ –ü–†–û–ë–£–ï–ú –†–ê–ó–ù–´–ï –°–ü–û–°–û–ë–´ –ó–ê–ü–£–°–ö–ê:")
                    
                    # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤
                    print(f"   üìã –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ rendering_system.run()")
                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                        import threading
                        import time
                        
                        # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞
                        run_started = threading.Event()
                        run_completed = threading.Event()
                        run_error = None
                        
                        def run_with_monitoring():
                            nonlocal run_error
                            try:
                                run_started.set()
                                print(f"      üìù run() –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                                result = rendering_system.run()
                                print(f"      üìä run() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º: {result}")
                                run_completed.set()
                            except Exception as e:
                                run_error = e
                                print(f"      ‚ùå run() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
                                import traceback
                                print(f"      üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                                traceback.print_exc()
                                run_completed.set()
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        run_thread = threading.Thread(target=run_with_monitoring, daemon=True)
                        run_thread.start()
                        
                        # –ñ–¥–µ–º –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                        if run_started.wait(timeout=5.0):
                            print(f"      ‚úÖ run() –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è")
                            
                            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                            if run_completed.wait(timeout=15.0):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
                                if run_error:
                                    print(f"      ‚ùå run() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {run_error}")
                                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–∫–Ω–∞: {run_error}")
                                else:
                                    print(f"      ‚úÖ run() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ")
                            else:
                                print(f"      ‚ö†Ô∏è  run() –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
                                print(f"      üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞...")
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
                                if hasattr(rendering_system, 'showbase') and hasattr(rendering_system.showbase, 'win'):
                                    win = rendering_system.showbase.win
                                    if hasattr(win, 'isValid'):
                                        try:
                                            is_valid = win.isValid()
                                            print(f"      üìä –û–∫–Ω–æ –≤–∞–ª–∏–¥–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {is_valid}")
                                        except Exception as e:
                                            print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {e}")
                                    
                                    if hasattr(win, 'getXSize') and hasattr(win, 'getYSize'):
                                        try:
                                            width = win.getXSize()
                                            height = win.getYSize()
                                            print(f"      üìè –†–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {width}x{height}")
                                        except Exception as e:
                                            print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã: {e}")
                                else:
                                    print(f"      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
                        else:
                            print(f"      ‚ùå run() –Ω–µ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥")
                            raise Exception("run() –Ω–µ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥")
                        
                    except Exception as e:
                        print(f"      ‚ùå –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
                        print(f"      üîÑ –ü—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 2...")
                        
                        # –°–ø–æ—Å–æ–± 2: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ShowBase –Ω–∞–ø—Ä—è–º—É—é
                        print(f"   üìã –°–ø–æ—Å–æ–± 2: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ showbase.run()")
                        try:
                            if hasattr(rendering_system, 'showbase'):
                                showbase = rendering_system.showbase
                                print(f"      üé¨ –í—ã–∑—ã–≤–∞–µ–º showbase.run() –Ω–∞–ø—Ä—è–º—É—é...")
                                
                                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                def run_showbase_directly():
                                    try:
                                        print(f"         üìù showbase.run() –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
                                        showbase.run()
                                        print(f"         ‚úÖ showbase.run() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                                    except Exception as e:
                                        print(f"         ‚ùå showbase.run() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
                                        import traceback
                                        traceback.print_exc()
                                
                                showbase_thread = threading.Thread(target=run_showbase_directly, daemon=True)
                                showbase_thread.start()
                                
                                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
                                time.sleep(3)
                                print(f"         ‚è∞ showbase.run() –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
                                
                            else:
                                raise Exception("ShowBase –Ω–µ –Ω–∞–π–¥–µ–Ω")
                                
                        except Exception as e2:
                            print(f"      ‚ùå –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e2}")
                            print(f"      üîÑ –ü—Ä–æ–±—É–µ–º —Å–ø–æ—Å–æ–± 3...")
                            
                            # –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –æ–∫–Ω–æ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ
                            print(f"   üìã –°–ø–æ—Å–æ–± 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–∫–Ω–∞")
                            try:
                                if hasattr(rendering_system, 'showbase') and hasattr(rendering_system.showbase, 'win'):
                                    win = rendering_system.showbase.win
                                    print(f"      ü™ü –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ...")
                                    
                                    if hasattr(win, 'isValid'):
                                        is_valid = win.isValid()
                                        print(f"         üìä –û–∫–Ω–æ –≤–∞–ª–∏–¥–Ω–æ: {is_valid}")
                                    
                                    if hasattr(win, 'getXSize') and hasattr(win, 'getYSize'):
                                        width = win.getXSize()
                                        height = win.getYSize()
                                        print(f"         üìè –†–∞–∑–º–µ—Ä—ã: {width}x{height}")
                                    
                                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –æ–∫–Ω–æ –≤–∏–¥–∏–º—ã–º
                                    if hasattr(win, 'setForeground'):
                                        try:
                                            win.setForeground()
                                            print(f"         ‚úÖ –û–∫–Ω–æ –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω")
                                        except Exception as e:
                                            print(f"         ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω: {e}")
                                    
                                    print(f"      üéÆ –û–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º!")
                                    
                                else:
                                    raise Exception("–û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                                    
                            except Exception as e3:
                                print(f"      ‚ùå –°–ø–æ—Å–æ–± 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e3}")
                                raise Exception(f"–í—Å–µ —Å–ø–æ—Å–æ–±—ã –∑–∞–ø—É—Å–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {e3}")
                    
                except Exception as run_error:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ run(): {run_error}")
                    print(f"   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
                    import traceback
                    traceback.print_exc()
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–∫–Ω–∞: {run_error}")
                
                print("‚úÖ –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã –∑–∞–ø—É—â–µ–Ω")
                
                # 8. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê
                print(f"\nüîç 8. –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –ó–ê–ü–£–°–ö–ê:")
                if hasattr(rendering_system, 'showbase') and hasattr(rendering_system.showbase, 'win'):
                    win = rendering_system.showbase.win
                    if hasattr(win, 'isValid'):
                        try:
                            is_valid = win.isValid()
                            print(f"   ‚úÖ –û–∫–Ω–æ –≤–∞–ª–∏–¥–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {is_valid}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {e}")
                    
                    if hasattr(win, 'getXSize') and hasattr(win, 'getYSize'):
                        try:
                            width = win.getXSize()
                            height = win.getYSize()
                            print(f"   üìè –†–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {width}x{height}")
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: {e}")
                else:
                    print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
                
                # 9. –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï –û–ö–ù–ê –û–¢–ö–†–´–¢–´–ú
                print(f"\nüîÑ 9. –ü–û–î–î–ï–†–ñ–ê–ù–ò–ï –û–ö–ù–ê –û–¢–ö–†–´–¢–´–ú:")
                print(f"   üéÆ –û–∫–Ω–æ –∏–≥—Ä—ã –∑–∞–ø—É—â–µ–Ω–æ!")
                print(f"   ü™ü –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
                print(f"   ‚èπÔ∏è  –î–ª—è –≤—ã—Ö–æ–¥–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –∏–≥—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
                
                # –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —á—Ç–æ–±—ã –ª–∞—É–Ω—á–µ—Ä –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è
                print(f"   üîÑ –õ–∞—É–Ω—á–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è...")
                
                try:
                    # –ñ–¥–µ–º –ø–æ–∫–∞ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
                    while True:
                        if hasattr(rendering_system, 'showbase') and hasattr(rendering_system.showbase, 'win'):
                            win = rendering_system.showbase.win
                            if hasattr(win, 'isValid'):
                                try:
                                    is_valid = win.isValid()
                                    if not is_valid:
                                        print(f"   ‚ö†Ô∏è  –û–∫–Ω–æ —Å—Ç–∞–ª–æ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                                        break
                                except Exception as e:
                                    print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–∫–Ω–∞: {e}")
                                    break
                        else:
                            print(f"   ‚ö†Ô∏è  –û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                            break
                        
                        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                        import time
                        time.sleep(1)
                        
                except KeyboardInterrupt:
                    print(f"\n   üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è (Ctrl+C)")
                    print(f"   üö™ –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
                except Exception as e:
                    print(f"\n   ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
                
                print(f"   ‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                print(f"\nüéâ –û–ö–ù–û –ò–ì–†–´ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–û!")
                print(f"   üéÆ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
                print(f"   ü™ü –û–∫–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º")
                print(f"   ‚èπÔ∏è  –î–ª—è –≤—ã—Ö–æ–¥–∞ –∑–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –∏–≥—Ä—ã")
                
            else:
                raise Exception("–°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–≥—Ä–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–∫–Ω–∞ –∏–≥—Ä—ã: {e}")
            print(f"\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –û–ö–ù–ê –ò–ì–†–´: {e}")
            print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print("\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            try:
                if hasattr(game, 'systems'):
                    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: {list(game.systems.keys())}")
                else:
                    print("‚ùå –ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ 'systems'")
                
                if hasattr(game, 'get_system_info'):
                    try:
                        info = game.get_system_info()
                        print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–∞—Ö: {info}")
                    except Exception as info_e:
                        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–∞—Ö: {info_e}")
                else:
                    print("‚ùå –ò–≥—Ä–∞ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ 'get_system_info'")
                    
            except Exception as diag_e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {diag_e}")
            
            return 1
        
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return 1
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –ª—é–±–æ–º –≤—ã—Ö–æ–¥–µ
        cleanup_on_exit()

if __name__ == "__main__":
    try:
        exit_code = main()
        if exit_code == 0:
            print("\n‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print(f"\n‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {exit_code})")
        sys.exit(exit_code)
    except SystemExit:
        cleanup_on_exit()
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        cleanup_on_exit()
        sys.exit(1)

