#!/usr/bin/env python3
"""
AI-EVOLVE: Enhanced Edition - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –≤ –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–í–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–æ –∫—É–ª—å—Ç–æ–≤—ã–º–∏ –∏–≥—Ä–∞–º–∏: Dark Souls, Bloodborne, Hades, Risk of Rain 2, Enter the Gungeon
"""

import sys
import os
import logging
import traceback
from pathlib import Path
from typing import Optional
import time

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        Path('logs').mkdir(exist_ok=True)
    except Exception:
        pass
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s'
    )
    
    handlers = []
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    try:
        from logging.handlers import RotatingFileHandler
        file_handler = RotatingFileHandler(
            'logs/game_enhanced.log', 
            maxBytes=10*1024*1024,  # 10MB
            backupCount=5,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.INFO)
        file_handler.setFormatter(formatter)
        handlers.append(file_handler)
    except Exception:
        # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É —Ñ–∞–π–ª–æ–≤–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        try:
            file_handler = logging.FileHandler('logs/game_enhanced.log', encoding='utf-8')
            file_handler.setLevel(logging.INFO)
            file_handler.setFormatter(formatter)
            handlers.append(file_handler)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞: {e}")
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.WARNING)
    console_handler.setFormatter(formatter)
    handlers.append(console_handler)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    logging.basicConfig(
        level=logging.INFO,
        handlers=handlers,
        format='%(asctime)s - %(levelname)s - %(message)s'
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)


def check_system_requirements() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
    if sys.version_info < (3, 8):
        logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version_info}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
    required_modules = {
        'pygame': 'Pygame –Ω–µ –Ω–∞–π–¥–µ–Ω: pip install pygame',
        'sqlite3': 'SQLite3 –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤—Å—Ç—Ä–æ–µ–Ω –≤ Python)'
    }
    
    for module, error_msg in required_modules.items():
        try:
            __import__(module)
            logger.info(f"‚úÖ {module} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.error(f"‚ùå {error_msg}")
            if module == 'pygame':
                return False
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
    optional_modules = {
        'numpy': '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ',
        'psutil': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    }
    
    for module, warning_msg in optional_modules.items():
        try:
            __import__(module)
            logger.info(f"‚úÖ {module} –¥–æ—Å—Ç—É–ø–µ–Ω")
        except ImportError:
            logger.warning(f"‚ö†Ô∏è {module} –Ω–µ –Ω–∞–π–¥–µ–Ω: {warning_msg}")
    
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True


def initialize_game_environment() -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    directories = ['logs', 'save', 'screenshots', 'data']
    for directory in directories:
        try:
            Path(directory).mkdir(exist_ok=True)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {directory}: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        from core.database_initializer import database_initializer
        if not database_initializer.initialize_database():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return False
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False
    
    logger.info("‚úÖ –ò–≥—Ä–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    return True


def check_enhanced_systems() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Enhanced Edition —Å–∏—Å—Ç–µ–º —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    logger.info("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ Enhanced Edition —Å–∏—Å—Ç–µ–º...")
    
    # –°–ø–∏—Å–æ–∫ —Å–∏—Å—Ç–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    enhanced_systems = [
        ('core.generational_memory_system', 'GenerationalMemorySystem'),
        ('core.emotional_ai_influence', 'EmotionalAIInfluenceSystem'),
        ('core.enhanced_combat_learning', 'EnhancedCombatLearningSystem'),
        ('core.enhanced_content_generator', 'EnhancedContentGenerator'),
        ('core.enhanced_skill_system', 'SkillManager'),
        ('core.enhanced_game_master', 'EnhancedGameMaster'),
        ('core.curse_blessing_system', 'CurseBlessingSystem'),
        ('core.risk_reward_system', 'RiskRewardSystem'),
        ('core.meta_progression_system', 'MetaProgressionSystem'),
        ('core.enhanced_inventory_system', 'EnhancedInventorySystem'),
        ('core.enhanced_ui_system', 'EnhancedUISystem')
    ]
    
    available_systems = 0
    total_systems = len(enhanced_systems)
    
    for module_path, class_name in enhanced_systems:
        try:
            module = __import__(module_path, fromlist=[class_name])
            getattr(module, class_name)
            available_systems += 1
        except ImportError:
            pass
    
    if available_systems >= total_systems * 0.8:  # 80% —Å–∏—Å—Ç–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
        logger.info(f"‚úÖ Enhanced Edition –¥–æ—Å—Ç—É–ø–µ–Ω ({available_systems}/{total_systems})")
        return True
    elif available_systems >= total_systems * 0.5:  # 50% —Å–∏—Å—Ç–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ
        logger.info(f"‚ö†Ô∏è Enhanced Edition —á–∞—Å—Ç–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω ({available_systems}/{total_systems})")
        return True
    else:
        logger.info(f"‚ÑπÔ∏è Enhanced Edition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({available_systems}/{total_systems})")
        return False


def run_game_mode(mode: str) -> bool:
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    logger.info(f"üéÆ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ: {mode}")
    
    try:
        if mode == "gui":
            return run_gui_mode()
        elif mode == "console":
            return run_console_mode()
        elif mode == "test":
            return run_test_mode()
        elif mode == "demo":
            return run_demo_mode()
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {mode}")
            return False
            
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return True
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã: {e}")
        logger.error(traceback.format_exc())
        return False


def run_gui_mode() -> bool:
    """–ó–∞–ø—É—Å–∫ GUI —Ä–µ–∂–∏–º–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    try:
        from core.game_engine import GameEngine, GameConfig
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–≤–∏–∂–æ–∫
        logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
        engine = GameEngine()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Enhanced —Å–∏—Å—Ç–µ–º—ã
        memory_system = engine.get_system('memory_system')
        if memory_system:
            logger.info("‚ú® Enhanced Edition –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            logger.info(f"   - –ü–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π: {getattr(memory_system, 'current_generation', 'N/A')}")
            logger.info(f"   - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò: {'‚úÖ' if engine.get_system('emotional_ai') else '‚ùå'}")
            logger.info(f"   - –ë–æ–µ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ: {'‚úÖ' if engine.get_system('enhanced_combat') else '‚ùå'}")
            logger.info(f"   - –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {'‚úÖ' if engine.get_system('enhanced_content') else '‚ùå'}")
            logger.info(f"   - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ã–∫–æ–≤: {'‚úÖ' if engine.get_system('skill_manager') else '‚ùå'}")
        else:
            logger.info("‚ÑπÔ∏è –ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        return engine.run() == 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ GUI —Ä–µ–∂–∏–º–∞: {e}")
        return False


def run_console_mode() -> bool:
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    try:
        from core.game_loop import RefactoredGameLoop
        
        game_loop = RefactoredGameLoop(use_pygame=False)
        if game_loop.initialize():
            game_loop.run()
            return True
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        return False


def run_test_mode() -> bool:
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        from core.effect_system import EffectDatabase
        from core.genetic_system import AdvancedGeneticSystem
        from core.emotion_system import AdvancedEmotionSystem
        from core.ai_system import AdaptiveAISystem
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        effect_db = EffectDatabase()
        genetic_system = AdvancedGeneticSystem(effect_db)
        emotion_system = AdvancedEmotionSystem(effect_db)
        ai_system = AdaptiveAISystem("TEST_AI")
        
        logger.info("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Enhanced —Å–∏—Å—Ç–µ–º—ã
        try:
            from core.generational_memory_system import GenerationalMemorySystem
            from core.enhanced_combat_learning import EnhancedCombatLearningSystem
            
            memory_system = GenerationalMemorySystem("test_save")
            combat_system = EnhancedCombatLearningSystem(memory_system, None)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã Enhanced Edition
            try:
                from core.enhanced_game_master import EnhancedGameMaster
                from core.curse_blessing_system import CurseBlessingSystem
                from core.risk_reward_system import RiskRewardSystem
                from core.meta_progression_system import MetaProgressionSystem
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
                game_master = EnhancedGameMaster(1600, 900)
                curse_blessing_system = CurseBlessingSystem(memory_system)
                risk_reward_system = RiskRewardSystem(memory_system, curse_blessing_system)
                meta_progression_system = MetaProgressionSystem(memory_system)
                
                logger.info("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ Enhanced Edition —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–æ–≤—ã–µ Enhanced —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            
            logger.info("‚úÖ Enhanced Edition —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Enhanced —Å–∏—Å—Ç–µ–º—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        logger.error(traceback.format_exc())
        return False


def run_demo_mode() -> bool:
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    logger.info("üé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º Enhanced —Å–∏—Å—Ç–µ–º—ã
        try:
            from core.enhanced_content_generator import EnhancedContentGenerator, BiomeType
            from core.generational_memory_system import GenerationalMemorySystem
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–∏—Å—Ç–µ–º—ã
            memory_system = GenerationalMemorySystem("demo_save")
            content_generator = EnhancedContentGenerator(memory_system)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç
            enemy = content_generator.generate_enemy(
                BiomeType.FOREST, 1, {"level_width": 1000, "level_height": 1000}
            )
            
            logger.info(f"‚ú® Enhanced –≤—Ä–∞–≥ —Å–æ–∑–¥–∞–Ω: {enemy.name}")
            logger.info(f"   –¢–∏–ø: {enemy.enemy_type.value}")
            logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã: {enemy.get_power_level():.1f}")
            logger.info(f"   –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏: {len(enemy.abilities)}")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π
            memory_stats = memory_system.get_memory_statistics()
            logger.info(f"üß† –ü–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π: {memory_stats['current_generation']}")
            logger.info(f"   –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {memory_stats['total_memories']}")
            logger.info(f"   –ö–ª–∞—Å—Ç–µ—Ä–æ–≤: {memory_stats['total_clusters']}")
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã Enhanced Edition
            try:
                from core.enhanced_game_master import EnhancedGameMaster
                from core.curse_blessing_system import CurseBlessingSystem
                from core.risk_reward_system import RiskRewardSystem
                from core.meta_progression_system import MetaProgressionSystem
                
                # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–∏—Å—Ç–µ–º—ã
                game_master = EnhancedGameMaster(1600, 900)
                curse_blessing_system = CurseBlessingSystem(memory_system)
                risk_reward_system = RiskRewardSystem(memory_system, curse_blessing_system)
                meta_progression_system = MetaProgressionSystem(memory_system)
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∫–ª—è—Ç–∏—è –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏—è
                curse_id = curse_blessing_system.apply_random_curse(intensity_range=(0.5, 1.0))
                blessing_id = curse_blessing_system.apply_random_blessing(intensity_range=(0.5, 1.0))
                
                logger.info(f"üé≠ Enhanced —Å–∏—Å—Ç–µ–º—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã:")
                logger.info(f"   - Game Master: {'‚úÖ' if game_master else '‚ùå'}")
                logger.info(f"   - –ü—Ä–æ–∫–ª—è—Ç–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {curse_id[:8] if curse_id else '‚ùå'}")
                logger.info(f"   - –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {blessing_id[:8] if blessing_id else '‚ùå'}")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–∏—Å–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥
                risk_event = risk_reward_system.create_risk_reward_event(
                    "demo_treasure", 
                    [{"type": "demo_item", "value": 100}],
                    risk_reward_system._current_risk_level
                )
                logger.info(f"   - –°–æ–±—ã—Ç–∏–µ —Ä–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–æ: {risk_event[:8] if risk_event else '‚ùå'}")
                
                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞-–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
                meta_stats = meta_progression_system.get_meta_statistics()
                logger.info(f"   - –ú–µ—Ç–∞-–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è: {meta_stats.get('total_runs', 0)} –∑–∞—Ö–æ–¥–æ–≤")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö Enhanced —Å–∏—Å—Ç–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Enhanced –¥–µ–º–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: {e}")
            
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –¥–µ–º–æ
            from core.content_generator import ContentGenerator
            from core.advanced_entity import AdvancedGameEntity
            
            generator = ContentGenerator()
            world = generator.generate_world(biome="forest", size="small", difficulty=0.5)
            
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤—ã–π –¥–µ–º–æ-–º–∏—Ä —Å–æ–∑–¥–∞–Ω: {world.name}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ —Ä–µ–∂–∏–º–∞: {e}")
        logger.error(traceback.format_exc())
        return False


def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = """
üéÆ AI-EVOLVE: Enhanced Edition
–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å

‚ú® –û–°–û–ë–ï–ù–ù–û–°–¢–ò ENHANCED EDITION:
   ‚Ä¢ –ü–∞–º—è—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–ª—è –ò–ò
   ‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –±–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –æ–±—É—á–µ–Ω–∏–µ–º
   ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ã–∫–æ–≤ —Å AI-–æ–±—É—á–µ–Ω–∏–µ–º
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∫–ª—è—Ç–∏–π –∏ –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π (The Binding of Isaac)
   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–∞–≥—Ä–∞–¥ (Spelunky, Hades)
   ‚Ä¢ –ú–µ—Ç–∞-–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –º–µ–∂–¥—É –∑–∞—Ö–æ–¥–∞–º–∏ (Rogue Legacy)
   ‚Ä¢ Enhanced Game Master - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º

üìã –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python main.py [—Ä–µ–∂–∏–º]

üéØ –†–ï–ñ–ò–ú–´:
    gui     - –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å Enhanced Edition (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    console - –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    test    - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
    demo    - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Enhanced –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üöÄ –ü–†–ò–ú–ï–†–´:
    python main.py          # –ó–∞–ø—É—Å–∫ Enhanced Edition GUI
    python main.py console  # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º
    python main.py test     # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Enhanced —Å–∏—Å—Ç–µ–º
    python main.py demo     # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π

üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –í –ò–ì–†–ï:
    WASD/–°—Ç—Ä–µ–ª–∫–∏ - –î–≤–∏–∂–µ–Ω–∏–µ
    C - –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É
    M - –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–∞—è–∫—É
    1-4 - –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ (Enhanced –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
    5-8 - –≠–º–æ—Ü–∏–∏ (–≤–ª–∏—è—é—Ç –Ω–∞ –ò–ò)
    I - –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    G - –ì–µ–Ω—ã
    E - –≠–º–æ—Ü–∏–∏
    V - –≠–≤–æ–ª—é—Ü–∏—è
    –ü—Ä–æ–±–µ–ª - –ê–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å

üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
    Python 3.8+, Pygame, NumPy, SQLite3
"""
    print(help_text)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
    start_time = time.time()
    
    print("üéÆ AI-EVOLVE: Enhanced Edition")
    print("–≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è: –ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π –†–µ–∑–æ–Ω–∞–Ω—Å")
    print("=" * 70)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º
    mode = "gui"
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
    
    if mode == "help":
        show_help()
        return 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_system_requirements():
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Enhanced —Å–∏—Å—Ç–µ–º—ã
    enhanced_available = check_enhanced_systems()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not initialize_game_environment():
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    success = run_game_mode(mode)
    
    execution_time = time.time() - start_time
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if success:
        logger.info("‚úÖ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return 0
    else:
        logger.error("‚ùå –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)
