#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –ø—Ä–æ–µ–∫—Ç–∞ AI EVOLVE.
"""

import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)


def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        from config.settings_manager import settings_manager
        logger.info("‚úì settings_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from core.data_manager import data_manager
        logger.info("‚úì data_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from core.game_state_manager import game_state_manager
        logger.info("‚úì game_state_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from entities.entity_factory import entity_factory
        logger.info("‚úì entity_factory –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from items.item_manager import item_manager
        logger.info("‚úì item_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from core.game_logic_manager import GameLogicManager
        logger.info("‚úì GameLogicManager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from ai.ai_manager import ai_manager
        logger.info("‚úì ai_manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def test_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from config.settings_manager import settings_manager
        from core.data_manager import data_manager
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_manager.reload_settings()
        logger.info("‚úì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
        data_manager.reload_data()
        logger.info("‚úì –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def test_entity_creation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π...")
    
    try:
        from entities.entity_factory import entity_factory
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
        player = entity_factory.create_player("test_player", (0, 0))
        if player:
            logger.info("‚úì –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–∞–≥–∞
        enemy = entity_factory.create_enemy("warrior", 1, (100, 100))
        if enemy:
            logger.info("‚úì –í—Ä–∞–≥ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–∞–≥–∞")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
        return False


def test_ai_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å–∏—Å—Ç–µ–º—É"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from ai.ai_manager import ai_manager
        from entities.entity_factory import entity_factory
        
        # –°–æ–∑–¥–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —Å AI
        entity = entity_factory.create_enemy("warrior", 1, (0, 0))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ AI —Å–∏—Å—Ç–µ–º–µ
        if hasattr(entity, 'ai_core'):
            ai_manager.register_entity(entity, entity.ai_core)
            logger.info("‚úì –°—É—â–Ω–æ—Å—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ AI —Å–∏—Å—Ç–µ–º–µ")
        else:
            logger.warning("‚ö† –°—É—â–Ω–æ—Å—Ç—å –Ω–µ –∏–º–µ–µ—Ç AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º AI
        ai_manager.update(0.016)  # 60 FPS
        logger.info("‚úì AI —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def test_item_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")
    
    try:
        from items.item_manager import item_manager
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
        item = item_manager.create_item("health_potion")
        if item:
            logger.info("‚úì –ü—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        
        return True
        
    except Exception as e:
        logger.error(f"‚úó –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("=" * 50)
    logger.info("–ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ï–ö–¢–ê AI EVOLVE")
    logger.info("=" * 50)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", test_initialization),
        ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π", test_entity_creation),
        ("AI —Å–∏—Å—Ç–µ–º–∞", test_ai_system),
        ("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", test_item_system),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\n--- –¢–µ—Å—Ç: {test_name} ---")
        if test_func():
            passed += 1
            logger.info(f"‚úì {test_name} - –ü–†–û–ô–î–ï–ù")
        else:
            logger.error(f"‚úó {test_name} - –ü–†–û–í–ê–õ–ï–ù")
    
    logger.info("\n" + "=" * 50)
    logger.info(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        return 0
    else:
        logger.error(f"‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return 1


if __name__ == "__main__":
    sys.exit(main())
