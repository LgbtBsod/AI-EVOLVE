#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã AI-EVOLVE
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
"""

import sys
import os
import time
import logging
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        from src.core.constants import (
            DamageType, ItemType, EmotionType, GeneType, 
            BASE_STATS, PROBABILITY_CONSTANTS, SKILL_GENERATION_TEMPLATES
        )
        print("‚úÖ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
        from src.entities import BaseEntity, Player, NPC, Enemy, Item
        print("‚úÖ –°—É—â–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
        from src.core.interfaces import ISystem, SystemPriority, SystemState
        print("‚úÖ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        from src.core.config_manager import ConfigManager
        from src.core.event_system import EventSystem
        from src.core.system_manager import SystemManager
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_entity_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—É—â–Ω–æ—Å—Ç–µ–π"""
    print("\nüéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å—É—â–Ω–æ—Å—Ç–µ–π...")
    
    try:
        from src.entities import BaseEntity, Player, NPC, Enemy, Item, Weapon, Armor
        from src.core.constants import EntityType, DamageType, EmotionType
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
        base_entity = BaseEntity("test_1", EntityType.ENEMY, "Test Entity")
        print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
        player = Player("player_1", "Test Player")
        print("‚úÖ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ NPC
        npc = NPC("npc_1", "Test NPC")
        print("‚úÖ NPC —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–∞–≥–∞
        enemy = Enemy("enemy_1", "Test Enemy")
        print("‚úÖ –í—Ä–∞–≥ —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        weapon = Weapon("sword_1", "Test Sword", "A test sword")
        armor = Armor("armor_1", "Test Armor", "A test armor")
        print("‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
        player.add_item(weapon)
        player.equip_item(weapon, "weapon")
        print("‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —ç–∫–∏–ø–∏—Ä–æ–≤–∞–Ω—ã")
        
        player.take_damage(10, DamageType.PHYSICAL)
        print(f"‚úÖ –£—Ä–æ–Ω –ø–æ–ª—É—á–µ–Ω, –∑–¥–æ—Ä–æ–≤—å–µ: {player.stats.current_health}")
        
        player.add_emotion(EmotionType.JOY, 0.5, 10.0)
        print("‚úÖ –≠–º–æ—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
        return False

def test_game_systems():
    """–¢–µ—Å—Ç –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...")
    
    try:
        from src.core.config_manager import ConfigManager
        from src.core.event_system import EventSystem
        from src.core.system_manager import SystemManager
        from src.core.system_factory import SystemFactory
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        config_manager = ConfigManager()
        event_system = EventSystem()
        system_manager = SystemManager(event_system)
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º
        system_factory = SystemFactory(config_manager, event_system, system_manager)
        print("‚úÖ –§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º
        systems_to_test = [
            'unified_ai_system',
            'combat_system', 
            'effect_system',
            'skill_system',
            'damage_system',
            'inventory_system',
            'item_system',
            'emotion_system',
            'evolution_system'
        ]
        
        created_systems = 0
        for system_name in systems_to_test:
            try:
                system = system_factory.create_system(system_name)
                if system:
                    created_systems += 1
                    print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {system_name} —Å–æ–∑–¥–∞–Ω–∞")
                else:
                    print(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ)")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–∏—Å—Ç–µ–º: {created_systems}/{len(systems_to_test)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: {e}")
        return False

def test_content_generation():
    """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        from src.systems.content.content_generator import ContentGenerator
        from src.core.constants import ContentType, ContentRarity
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content_gen = ContentGenerator()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        items = content_gen.generate_items(5, "common")
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(items)}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–≤—ã–∫–æ–≤
        skills = content_gen.generate_skills(3, "rare")
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–≤—ã–∫–æ–≤: {len(skills)}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        effects = content_gen.generate_effects(2, "epic")
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤: {len(effects)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
        return False

def test_ai_system():
    """–¢–µ—Å—Ç AI —Å–∏—Å—Ç–µ–º—ã"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from src.systems.ai.unified_ai_system import UnifiedAISystem
        from src.core.constants import AIBehavior, AIState, AIDifficulty
        
        # –°–æ–∑–¥–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã
        ai_system = UnifiedAISystem()
        print("‚úÖ AI —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è AI —Å—É—â–Ω–æ—Å—Ç–∏
        ai_entity_data = ai_system.create_ai_entity(
            "ai_test_1", "enemy", AIBehavior.AGGRESSIVE, AIDifficulty.NORMAL
        )
        print("‚úÖ AI —Å—É—â–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        decision = ai_system.make_decision("ai_test_1", {"target": "player_1"})
        print(f"‚úÖ –†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ: {decision.decision_type if decision else 'None'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def test_combat_system():
    """–¢–µ—Å—Ç –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\n‚öîÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        from src.systems.combat.combat_system import CombatSystem
        from src.core.constants import CombatState, AttackType
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        combat_system = CombatSystem()
        print("‚úÖ –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        combat_stats = combat_system.create_combat_stats("test_entity")
        print("‚úÖ –ë–æ–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç –∞—Ç–∞–∫–∏
        attack_result = combat_system.perform_attack("attacker", "target", AttackType.MELEE)
        print(f"‚úÖ –ê—Ç–∞–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —É—Ä–æ–Ω: {attack_result.damage_dealt}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def test_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        from src.core.performance_manager import PerformanceManager
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        perf_manager = PerformanceManager()
        print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        start_time = time.time()
        time.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        end_time = time.time()
        
        execution_time = end_time - start_time
        print(f"‚úÖ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.3f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫
        metrics = perf_manager.get_performance_metrics()
        print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã: {len(metrics)} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã AI-EVOLVE")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–°–∏—Å—Ç–µ–º–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π", test_entity_system),
        ("–ò–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã", test_game_systems),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", test_content_generation),
        ("AI —Å–∏—Å—Ç–µ–º–∞", test_ai_system),
        ("–ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞", test_combat_system),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", test_performance),
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
    
    print("\n" + "=" * 50)
    print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
