#!/usr/bin/env python3
"""–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –∏–≥—Ä—ã"""

import logging
import logging.handlers
import os
import sys
import time
import json
import traceback
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Callable
import threading
import queue
import atexit

class GameLogger:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã"""
    
    def __init__(self, log_dir: str = "logs", max_log_size: int = 10 * 1024 * 1024, 
                 backup_count: int = 5, log_level: str = "INFO"):
        self.log_dir = Path(log_dir)
        self.max_log_size = max_log_size
        self.backup_count = backup_count
        self.log_level = getattr(logging, log_level.upper())
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
        self.log_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–æ–≤
        self.loggers: Dict[str, logging.Logger] = {}
        self.log_queue = queue.Queue()
        self.async_logging = True
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self._setup_main_logger()
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.async_logging:
            self._start_async_logging()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        self._setup_exception_handlers()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self._cleanup)
        
        self.loggers["game"].info("GameLogger initialized successfully")
    
    def _setup_exception_handlers(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        sys.excepthook = self._handle_uncaught_exception
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–∞—Ö
        threading.excepthook = self._handle_thread_exception
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º KeyboardInterrupt
        import signal
        try:
            signal.signal(signal.SIGINT, self._handle_signal)
            signal.signal(signal.SIGTERM, self._handle_signal)
        except (AttributeError, OSError):
            pass  # Windows –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    
    def _handle_uncaught_exception(self, exc_type, exc_value, exc_traceback):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
        if issubclass(exc_type, KeyboardInterrupt):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º KeyboardInterrupt
            sys.__excepthook__(exc_type, exc_value, exc_traceback)
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        error_msg = f"UNCAUGHT EXCEPTION: {exc_type.__name__}: {exc_value}"
        self.loggers["game"].critical(error_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π traceback
        traceback_lines = traceback.format_exception(exc_type, exc_value, exc_traceback)
        for line in traceback_lines:
            self.loggers["game"].critical(line.strip())
        
        # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {error_msg}")
        print("üìã –ü–æ–ª–Ω—ã–π traceback –∑–∞–ø–∏—Å–∞–Ω –≤ –ª–æ–≥")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
    
    def _handle_thread_exception(self, args):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤ –ø–æ—Ç–æ–∫–∞—Ö"""
        if args.exc_type == KeyboardInterrupt:
            return
        
        error_msg = f"THREAD EXCEPTION in {args.thread.name}: {args.exc_type.__name__}: {args.exc_value}"
        self.loggers["game"].error(error_msg)
        
        # –õ–æ–≥–∏—Ä—É–µ–º traceback
        if args.exc_traceback:
            traceback_lines = traceback.format_exception(args.exc_type, args.exc_value, args.exc_traceback)
            for line in traceback_lines:
                self.loggers["game"].error(line.strip())
        
        print(f"‚ö†Ô∏è  –û–®–ò–ë–ö–ê –í –ü–û–¢–û–ö–ï: {error_msg}")
    
    def _handle_signal(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal_name = "SIGINT" if signum == 2 else "SIGTERM"
        self.loggers["game"].info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        print(f"\nüîÑ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        try:
            self.loggers["game"].info("GameLogger cleanup started")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if self.async_logging:
                self.log_queue.put(None)  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                if hasattr(self, '_async_thread') and self._async_thread.is_alive():
                    self._async_thread.join(timeout=2)
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            for logger in self.loggers.values():
                for handler in logger.handlers[:]:
                    handler.close()
                    logger.removeHandler(handler)
            
            self.loggers["game"].info("GameLogger cleanup completed")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ GameLogger: {e}")
    
    def _setup_main_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
        main_logger = logging.getLogger("game")
        main_logger.setLevel(self.log_level)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        log_file = self.log_dir / f"game_{datetime.now().strftime('%Y%m%d')}.log"
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=self.max_log_size,
            backupCount=self.backup_count,
            encoding='utf-8'
        )
        file_handler.setLevel(self.log_level)
        file_handler.setFormatter(formatter)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        console_handler = logging.StreamHandler(sys.stdout)
        console_handler.setLevel(self.log_level)
        console_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        main_logger.addHandler(file_handler)
        main_logger.addHandler(console_handler)
        
        self.loggers["game"] = main_logger
    
    def _start_async_logging(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        def async_logger():
            while True:
                try:
                    log_entry = self.log_queue.get(timeout=1)
                    if log_entry is None:  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                        break
                    
                    logger_name = log_entry["logger"]
                    level = log_entry["level"]
                    message = log_entry["message"]
                    extra = log_entry.get("extra", {})
                    
                    if logger_name not in self.loggers:
                        self._create_logger(logger_name)
                    
                    logger_obj = self.loggers[logger_name]
                    logger_obj.log(level, message, extra=extra)
                    
                except queue.Empty:
                    continue
                except Exception as e:
                    print(f"Error in async logging: {e}")
        
        self._async_thread = threading.Thread(target=async_logger, daemon=True)
        self._async_thread.start()
    
    def _create_logger(self, name: str) -> logging.Logger:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger_obj = logging.getLogger(f"game.{name}")
        logger_obj.setLevel(self.log_level)
        
        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä
        formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
        log_file = self.log_dir / f"{name}_{datetime.now().strftime('%Y%m%d')}.log"
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=self.max_log_size,
            backupCount=self.backup_count,
            encoding='utf-8'
        )
        file_handler.setLevel(self.log_level)
        file_handler.setFormatter(formatter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        logger_obj.addHandler(file_handler)
        
        self.loggers[name] = logger_obj
        return logger_obj
    
    def get_logger(self, name: str) -> logging.Logger:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã"""
        if name not in self.loggers:
            return self._create_logger(name)
        return self.loggers[name]
    
    def log_system_event(self, system: str, event: str, details: Dict[str, Any] = None, 
                        level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        log_entry = {
            "logger": system,
            "level": getattr(logging, level.upper()),
            "message": f"SYSTEM_EVENT: {event}",
            "extra": {
                "event_type": "system_event",
                "event": event,
                "details": details or {},
                "timestamp": time.time()
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger(system)
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_error(self, system: str, error: Exception, context: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        error_details = {
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "context": context or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": system,
            "level": logging.ERROR,
            "message": f"ERROR: {error}",
            "extra": {
                "event_type": "error",
                "error_details": error_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger(system)
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_performance(self, system: str, operation: str, duration: float, 
                       details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        perf_details = {
            "operation": operation,
            "duration": duration,
            "details": details or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": system,
            "level": logging.DEBUG,
            "message": f"PERFORMANCE: {operation} took {duration:.4f}s",
            "extra": {
                "event_type": "performance",
                "performance_details": perf_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger(system)
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_critical_error(self, system: str, error: Exception, context: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        error_details = {
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "context": context or {},
            "timestamp": time.time()
        }
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        print(f"\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Å–∏—Å—Ç–µ–º–µ {system}:")
        print(f"   –¢–∏–ø: {error_details['error_type']}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_details['error_message']}")
        print(f"   Traceback: {error_details['traceback']}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        log_entry = {
            "logger": system,
            "level": logging.CRITICAL,
            "message": f"CRITICAL ERROR: {error}",
            "extra": {
                "event_type": "critical_error",
                "error_details": error_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger(system)
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_warning(self, system: str, warning: str, context: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        warning_details = {
            "warning_message": warning,
            "context": context or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": system,
            "level": logging.WARNING,
            "message": f"WARNING: {warning}",
            "extra": {
                "event_type": "warning",
                "warning_details": warning_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger(system)
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_user_action(self, user_id: str, action: str, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        action_details = {
            "user_id": user_id,
            "action": action,
            "details": details or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": "user_actions",
            "level": logging.INFO,
            "message": f"USER_ACTION: {user_id} - {action}",
            "extra": {
                "event_type": "user_action",
                "action_details": action_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger("user_actions")
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_game_state(self, system: str, state: str, data: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã"""
        state_details = {
            "state": state,
            "data": data or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": system,
            "level": logging.INFO,
            "message": f"STATE_CHANGE: {state}",
            "extra": {
                "event_type": "state_change",
                "state_details": state_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger(system)
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_ai_decision(self, ai_id: str, decision: str, reasoning: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ò–ò"""
        decision_details = {
            "ai_id": ai_id,
            "decision": decision,
            "reasoning": reasoning or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": "ai_system",
            "level": logging.DEBUG,
            "message": f"AI_DECISION: {ai_id} - {decision}",
            "extra": {
                "event_type": "ai_decision",
                "decision_details": decision_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger("ai_system")
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_memory_event(self, entity_id: str, memory_type: str, action: str, 
                        details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–∞–º—è—Ç–∏"""
        memory_details = {
            "entity_id": entity_id,
            "memory_type": memory_type,
            "action": action,
            "details": details or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": "memory_system",
            "level": logging.DEBUG,
            "message": f"MEMORY_EVENT: {entity_id} - {memory_type} - {action}",
            "extra": {
                "event_type": "memory_event",
                "memory_details": memory_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger("memory_system")
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_combat_event(self, attacker_id: str, target_id: str, action: str, 
                        damage: float = None, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        combat_details = {
            "attacker_id": attacker_id,
            "target_id": target_id,
            "action": action,
            "damage": damage,
            "details": details or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": "combat_system",
            "level": logging.INFO,
            "message": f"COMBAT: {attacker_id} -> {target_id} - {action}",
            "extra": {
                "event_type": "combat_event",
                "combat_details": combat_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger("combat_system")
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_inventory_event(self, entity_id: str, action: str, item_id: str = None,
                           quantity: int = None, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
        inventory_details = {
            "entity_id": entity_id,
            "action": action,
            "item_id": item_id,
            "quantity": quantity,
            "details": details or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": "inventory_system",
            "level": logging.INFO,
            "message": f"INVENTORY: {entity_id} - {action}",
            "extra": {
                "event_type": "inventory_event",
                "inventory_details": inventory_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger("inventory_system")
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def log_content_generation(self, session_id: str, content_type: str, 
                              generation_time: float, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        generation_details = {
            "session_id": session_id,
            "content_type": content_type,
            "generation_time": generation_time,
            "details": details or {},
            "timestamp": time.time()
        }
        
        log_entry = {
            "logger": "content_generator",
            "level": logging.INFO,
            "message": f"CONTENT_GENERATION: {session_id} - {content_type}",
            "extra": {
                "event_type": "content_generation",
                "generation_details": generation_details
            }
        }
        
        if self.async_logging:
            self.log_queue.put(log_entry)
        else:
            logger_obj = self.get_logger("content_generator")
            logger_obj.log(log_entry["level"], log_entry["message"], extra=log_entry["extra"])
    
    def export_logs(self, output_file: str, start_time: float = None, end_time: float = None,
                   systems: List[str] = None, event_types: List[str] = None):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            exported_logs = []
            
            for log_file in self.log_dir.glob("*.log"):
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        try:
                            # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
                            parts = line.strip().split(' - ', 3)
                            if len(parts) >= 4:
                                timestamp_str, logger_name, level, message = parts
                                timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S').timestamp()
                                
                                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                                if start_time and timestamp < start_time:
                                    continue
                                if end_time and timestamp > end_time:
                                    continue
                                
                                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∏—Å—Ç–µ–º–∞–º
                                if systems and not any(system in logger_name for system in systems):
                                    continue
                                
                                exported_logs.append({
                                    "timestamp": timestamp,
                                    "logger": logger_name,
                                    "level": level,
                                    "message": message
                                })
                        except Exception as e:
                            print(f"Error parsing log line: {e}")
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            exported_logs.sort(key=lambda x: x["timestamp"])
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(exported_logs, f, indent=2, ensure_ascii=False)
            
            self.loggers["game"].info(f"Exported {len(exported_logs)} log entries to {output_file}")
            
        except Exception as e:
            self.loggers["game"].error(f"Failed to export logs: {e}")
    
    def cleanup_old_logs(self, max_age_days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            cutoff_time = time.time() - (max_age_days * 24 * 3600)
            deleted_files = 0
            
            for log_file in self.log_dir.glob("*.log"):
                if log_file.stat().st_mtime < cutoff_time:
                    log_file.unlink()
                    deleted_files += 1
            
            self.loggers["game"].info(f"Cleaned up {deleted_files} old log files")
            
        except Exception as e:
            self.loggers["game"].error(f"Failed to cleanup old logs: {e}")
    
    def get_log_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤"""
        try:
            stats = {
                "total_log_files": 0,
                "total_log_entries": 0,
                "systems": {},
                "levels": {},
                "recent_errors": []
            }
            
            for log_file in self.log_dir.glob("*.log"):
                stats["total_log_files"] += 1
                
                with open(log_file, 'r', encoding='utf-8') as f:
                    for line in f:
                        stats["total_log_entries"] += 1
                        
                        try:
                            parts = line.strip().split(' - ', 3)
                            if len(parts) >= 4:
                                logger_name, level = parts[1], parts[2]
                                
                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º
                                if logger_name not in stats["systems"]:
                                    stats["systems"][logger_name] = 0
                                stats["systems"][logger_name] += 1
                                
                                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
                                if level not in stats["levels"]:
                                    stats["levels"][level] = 0
                                stats["levels"][level] += 1
                                
                                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏
                                if level == "ERROR" and len(stats["recent_errors"]) < 10:
                                    stats["recent_errors"].append(line.strip())
                        except:
                            pass
            
            return stats
            
        except Exception as e:
            self.loggers["game"].error(f"Failed to get log stats: {e}")
            return {}
    
    def shutdown(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.async_logging:
            self.log_queue.put(None)  # –°–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            if hasattr(self, '_async_thread') and self._async_thread.is_alive():
                self._async_thread.join(timeout=5)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for logger_obj in self.loggers.values():
            for handler in logger_obj.handlers[:]:
                handler.close()
                logger_obj.removeHandler(handler)
        
        self.loggers["game"].info("GameLogger shutdown completed")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
game_logger = None

def initialize_logging(log_dir: str = "logs", log_level: str = "INFO") -> GameLogger:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global game_logger
    game_logger = GameLogger(log_dir, log_level=log_level)
    return game_logger

def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞"""
    if game_logger is None:
        initialize_logging()
    return game_logger.get_logger(name)

def log_system_event(system: str, event: str, details: Dict[str, Any] = None, level: str = "INFO"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
    if game_logger is None:
        initialize_logging()
    game_logger.log_system_event(system, event, details, level)

def log_error(system: str, error: Exception, context: Dict[str, Any] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
    if game_logger is None:
        initialize_logging()
    game_logger.log_error(system, error, context)

def log_performance(system: str, operation: str, duration: float, details: Dict[str, Any] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if game_logger is None:
        initialize_logging()
    game_logger.log_performance(system, operation, duration, details)

def log_critical_error(system: str, error: Exception, context: Dict[str, Any] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
    if game_logger is None:
        initialize_logging()
    game_logger.log_critical_error(system, error, context)

def log_warning(system: str, warning: str, context: Dict[str, Any] = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    if game_logger is None:
        initialize_logging()
    game_logger.log_warning(system, warning, context)
