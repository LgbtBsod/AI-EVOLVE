#!/usr / bin / env python3
"""
    –†–∞–±–æ—á–∏–π —Ç–µ—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º –§–∞–∑—ã 9
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""

imp or t sys
imp or t os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∫–æ–¥—É
current_dir== os.path.dirname(os.path.abspath(__file__))
src_path== os.path.jo in(current_dir, 'src')
sys.path. in sert(0, src_path)

def test_biome_types():
    """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –±–∏–æ–º–æ–≤"""
        pr in t("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –±–∏–æ–º–æ–≤...")

        try:
        from systems.w or ld.biome_types imp or t BiomeType, ClimateType
        WeatherType

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã –±–∏–æ–º–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        pr in t(f"‚úÖ BiomeType: {len(BiomeType)} —Ç–∏–ø–æ–≤")
        pr in t(f"‚úÖ ClimateType: {len(ClimateType)} —Ç–∏–ø–æ–≤")
        pr in t(f"‚úÖ WeatherType: {len(WeatherType)} —Ç–∏–ø–æ–≤")

        # –í—ã–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        pr in t(f"   –ü—Ä–∏–º–µ—Ä—ã –±–∏–æ–º–æ–≤: {[b.value for b in l is t(BiomeType)[:5]]}")
        pr in t(f"   –ü—Ä–∏–º–µ—Ä—ã –∫–ª–∏–º–∞—Ç–æ–≤: {[c.value for c in l is t(ClimateType)[:3]]}")
        pr in t(f"   –ü—Ä–∏–º–µ—Ä—ã –ø–æ–≥–æ–¥—ã: {[w.value for w in l is t(WeatherType)[:3]]}")

        return True

        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –±–∏–æ–º–æ–≤: {e}")
        return False

        def test_biome_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏–æ–º–æ–≤"""
    pr in t("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏–æ–º–æ–≤...")

    try:
    except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∏–æ–º–æ–≤: {e}")
        return False

def test_location_types():
    """–¢–µ—Å—Ç —Ç–∏–ø–æ–≤ –ª–æ–∫–∞—Ü–∏–π"""
        pr in t("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –ª–æ–∫–∞—Ü–∏–π...")

        try:
        from systems.w or ld.location_types imp or t(
        LocationType, DungeonType, SettlementType,
        Location, Dungeon, Settlement
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø—ã –ª–æ–∫–∞—Ü–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
        pr in t(f"‚úÖ LocationType: {len(LocationType)} —Ç–∏–ø–æ–≤")
        pr in t(f"‚úÖ DungeonType: {len(DungeonType)} —Ç–∏–ø–æ–≤")
        pr in t(f"‚úÖ SettlementType: {len(SettlementType)} —Ç–∏–ø–æ–≤")

        # –í—ã–≤–æ–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        pr in t(f"   –ü—Ä–∏–º–µ—Ä—ã –ª–æ–∫–∞—Ü–∏–π: {[l.value for l in l is t(LocationType)[:5]]}")
        pr in t(f"   –ü—Ä–∏–º–µ—Ä—ã –ø–æ–¥–∑–µ–º–µ–ª–∏–π: {[d.value for d in l is t(DungeonType)[:3]]}")
        pr in t(f"   –ü—Ä–∏–º–µ—Ä—ã –ø–æ—Å–µ–ª–µ–Ω–∏–π: {[s.value for s in l is t(SettlementType)[:3]]}")

        return True

        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return False

        def test_location_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π"""
    pr in t("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π...")

    try:
    except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–π: {e}")
        return False

def test_location_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞—Ü–∏–π"""
        pr in t("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞—Ü–∏–π...")

        try:
        LocationManager, Location, LocationType
        )

        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager== LocationManager()

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        test_location== Location(
        location_i == "test_location",
        nam == "–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è",
        descriptio == "–õ–æ–∫–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
        location_typ == LocationType.FOREST,
        ==100.0, ==200.0, ==0.0,
        widt == 50.0, heigh == 10.0, dept == 50.0
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
        result== manager.add_location(test_location)
        if result:
        pr in t("‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats== manager.get_location_stats()
        pr in t(f"   –í—Å–µ–≥–æ –ª–æ–∫–∞—Ü–∏–π: {stats['total_locations']}")
        pr in t(f"   –û—Ç–∫—Ä—ã—Ç–æ –ª–æ–∫–∞—Ü–∏–π: {stats['d is covered_locations']}")

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
        d is cover_result== manager.d is cover_location("test_location")
        if d is cover_result:
        pr in t("‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats== manager.get_location_stats()
        pr in t(f"   –û—Ç–∫—Ä—ã—Ç–æ –ª–æ–∫–∞—Ü–∏–π: {stats['d is covered_locations']}")

        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
        location== manager.get_location("test_location")
        if location:
        pr in t(f"   –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {location.name}")
        pr in t(f"   –û—Ç–∫—Ä—ã—Ç–∞: {location. is _d is covered}")
        pr in t(f"   –ü–æ—Å–µ—â–µ–Ω–∏–π: {location.v is it_count}")

        return True

        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞—Ü–∏–π: {e}")
        return False

        def test_w or ld_ in tegration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –º–∏—Ä–∞"""
    pr in t("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º –º–∏—Ä–∞...")

    try:
    except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def ma in():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        pr in t("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –§–ê–ó–´ 9: –ú–ò–† –ò –õ–û–ö–ê–¶–ò–ò")
        pr in t( == " * 60)

        tests== [
        ("–¢–∏–ø—ã –±–∏–æ–º–æ–≤", test_biome_types),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –±–∏–æ–º–æ–≤", test_biome_manager),
        ("–¢–∏–ø—ã –ª–æ–∫–∞—Ü–∏–π", test_location_types),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π", test_location_creation),
        ("–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞—Ü–∏–π", test_location_manager),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –º–∏—Ä–∞", test_w or ld_ in tegration)
        ]

        passed== 0
        total== len(tests)

        for test_name, test_func in tests:
        try:
        if test_func():
        passed == 1
        pr in t(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
        pr in t(f"‚ö†Ô∏è  –¢–µ—Å—Ç '{test_name}' –Ω–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
        pass
        pass
        pass
        pr in t(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")

        pr in t("\n" + ==" * 60)
        pr in t(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        pr in t(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed} / {total}")
        pr in t(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed / total) * 100:.1f} % ")

        if passed == total:
        pr in t("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        pr in t("‚úÖ –°–∏—Å—Ç–µ–º—ã –§–∞–∑—ã 9 –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        pr in t("üöÄ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        else:
        pr in t("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        pr in t("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")

        return passed == total

        if __name__ == "__ma in __":
        success== ma in()
        sys.exit(0 if success else 1):
        pass  # –î–æ–±–∞–≤–ª–µ–Ω pass –≤ –ø—É—Å—Ç–æ–π –±–ª–æ–∫