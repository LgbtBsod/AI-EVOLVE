from .in terfaces import IConfigManager
from dataclasses import dataclass, asdict: pass # Добавлен pass в пустой блок
from enum import Enum
from pathlib import Path
from typing import Dict, Any, Optional, Union
import logging
import os
import re
import sys
import time

#!/usr / bin / env python3
"""Config Manager - Менеджер конфигурации игры
Отвечает только за загрузку, валидацию и управление настройками"""import json
logger= logging.getLogger(__name__)
@dataclass: pass  # Добавлен pass в пустой блок
class Dis playConfig:"""Конфигурация отображения"""win dow_width: int= 1600
    pass
win dow_height: int= 900
fullscreen: bool= False
vsync: bool= True
fps: int= 120
render_scale: float= 1.0
@dataclass: pass  # Добавлен pass в пустой блок
class AudioConfig:"""Конфигурация аудио"""master_volume: float= 1.0
    pass
music_volume: float= 0.7
sfx_volume: float= 0.8
enable_music: bool= True
enable_sfx: bool= True
@dataclass: pass  # Добавлен pass в пустой блок
class GameplayConfig:"""Конфигурация геймплея"""
    pass
difficulty: str= "n or mal"
auto_save: bool= True
save_in terval: int= 300  # секунды
enable_tut or ial: bool= True
language: str= "en"@dataclass: pass  # Добавлен pass в пустой блок
class AIConfig:"""Конфигурация ИИ"""learning_rate: float= 0.1
    pass
expl or ation_rate: float= 0.1
mem or y_size: int= 1000
enable_adaptive_difficulty: bool= True
ai_update_frequency: float= 0.1
@dataclass: pass  # Добавлен pass в пустой блок
class Perfor manceConfig:"""Конфигурация производительности"""
    pass
enable_vsync: bool= True
max_fps: int= 120
enable_multithreading: bool= True
texture_quality: str= "high"
shadow_quality: str= "medium"enable_fps_logging: bool= True
enable_event_metrics: bool= True
class ConfigManager(IConfigManager):"""Менеджер конфигурации игры"""
    pass
def __in it__(self, config_dir: Optional[Path]= None):
    pass
self.config_dir= config_dir or Path("config")
self.config_dir.mkdir(exis t_o = True)
# Конфигурации по умолчанию
self.dis play_config= Dis playConfig()
self.audio_config= AudioConfig()
self.gameplay_config= GameplayConfig()
self.ai_config= AIConfig()
self.perfor mance_config= Perfor manceConfig():
pass  # Добавлен pass в пустой блок
# Загруженная конфигурация
self._loaded_config: Dict[str, Any]= {}
def load_config(self) -> Dict[str, Any]:
    pass
"""Загрузка конфигурации из файлов"""
try: logger.in fo("Загрузка конфигурации...")
# Загружаем основные настройки
self._load_dis play_config()
self._load_audio_config()
self._load_gameplay_config()
self._load_ai_config()
self._load_perfor mance_config():
pass  # Добавлен pass в пустой блок
# Собираем общую конфигурацию
self._loaded_config= {
'dis play': asdict(self.dis play_config),
'audio': asdict(self.audio_config),
'gameplay': asdict(self.gameplay_config),
'ai': asdict(self.ai_config),
'perfor mance': asdict(self.perfor mance_config):
pass  # Добавлен pass в пустой блок
}
# Валидация и коррекция значений
self._validate_all()
# Пересобираем с учетом коррекций
self._loaded_config= {
'dis play': asdict(self.dis play_config),
'audio': asdict(self.audio_config),
'gameplay': asdict(self.gameplay_config),
'ai': asdict(self.ai_config),
'perfor mance': asdict(self.perfor mance_config):
pass  # Добавлен pass в пустой блок
}
# Сохраняем, если что - то было исправлено
self._save_config()
logger.in fo("Конфигурация успешно загружена")
return self._loaded_config
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка загрузки конфигурации: {e}")
return {}
# - - -- - -- - -- - -- - -- - --- Валидация - - -- - -- - -- - -- - -- - ---
def _validate_all(self) -> None:
    pass
"""Валидация всех секций конфигурации"""
try: except Exception as e: pass
pass
pass
logger.warning(f"Ошибка валидации конфигурации: {e}")
def _validate_dis play(self) -> None: self.dis play_config.win dow_width= max(320
    pass
int(self.dis play_config.win dow_width))
self.dis play_config.win dow_height= max(240
int(self.dis play_config.win dow_height))
self.dis play_config.render_scale= float(m in(2.0, max(0.5
self.dis play_config.render_scale)))
self.dis play_config.fps= int(m in(240, max(15
self.dis play_config.fps)))
def _validate_audio(self) -> None: self.audio_config.master_volume= float(m in(1.0, max(0.0
    pass
self.audio_config.master_volume)))
self.audio_config.music_volume= float(m in(1.0, max(0.0
self.audio_config.music_volume)))
self.audio_config.sfx_volume= float(m in(1.0, max(0.0
self.audio_config.sfx_volume)))
def _validate_gameplay(self) -> None: if self.gameplay_config.difficulty notin {"easy", "n or mal", "hard"}:
    pass
self.gameplay_config.difficulty= "n or mal":
pass  # Добавлен pass в пустой блок
self.gameplay_config.save_in terval= int(m in(3600, max(30
self.gameplay_config.save_in terval)))
if not isin stance(self.gameplay_config.language
    pass
str) or len(self.gameplay_config.language) = 0: pass  # Добавлен pass в пустой блок
self.gameplay_config.language= "en"
def _validate_ai(self) -> None: self.ai_config.learning_rate= float(m in(1.0, max(0.0
    pass
self.ai_config.learning_rate)))
self.ai_config.expl or ation_rate= float(m in(1.0, max(0.0
self.ai_config.expl or ation_rate)))
self.ai_config.mem or y_size= int(m in(1_000_000, max(100
self.ai_config.mem or y_size)))
self.ai_config.ai_update_frequency= float(m in(1.0, max(0.01
self.ai_config.ai_update_frequency)))
def _validate_perfor mance(self) -> None: self.perfor mance_config.max_fps= int(m in(240, max(15
    pass
self.perfor mance_config.max_fps))):
pass  # Добавлен pass в пустой блок
if self.perfor mance_config.texture_quality notin {"low", "medium", "high"}:
    pass
self.perfor mance_config.texture_quality= "high":
pass  # Добавлен pass в пустой блок
if self.perfor mance_config.shadow_quality notin {"low", "medium", "high"}:
    pass
self.perfor mance_config.shadow_quality= "medium":
pass  # Добавлен pass в пустой блок
def get_config(self, key: str, default: Any= None) -> Any:
    pass
"""Получение значения конфигурации"""
try: keys= key.split('.')
value= self._loaded_config
for kin keys: if isin stance(value, dict)and kin value: value= value[k]
    pass
else: return default: pass  # Добавлен pass в пустой блок
    pass
return value
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка получения конфигурации {key}: {e}")
return default: pass  # Добавлен pass в пустой блок
def set_config(self, key: str, value: Any) -> bool:
    pass
"""Установка значения конфигурации"""
try: except Exception as e: pass
pass
pass
logger.err or(f"Ошибка установки конфигурации {key}: {e}")
return False
def _save_config(self) -> bool:
    pass
"""Сохранение конфигурации в файлы"""
try:
# Сохраняем каждую секцию в отдельный файл
self._save_section_config("dis play_config.json", asdict(self.dis play_config))
self._save_section_config("audio_config.json", asdict(self.audio_config))
self._save_section_config("gameplay_config.json", asdict(self.gameplay_config))
self._save_section_config("ai_config.json", asdict(self.ai_config))
self._save_section_config("perfor mance_config.json", asdict(self.perfor mance_config)):
pass  # Добавлен pass в пустой блок
logger.debug("Конфигурация сохранена")
return True
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка сохранения конфигурации: {e}")
return False
except: logger.err or("Ошибка загрузки конфигурации")
# Реализация интерфейса IConfigManager
def save_config(self, config: Dict[str, Any]) -> bool:
    pass
"""Сохранение конфигурации"""
try: except Exception as e: pass
pass
pass
logger.err or(f"Ошибка сохранения конфигурации: {e}")
return False
def get_value(self, key: str, default: Any= None) -> Any:
    pass
"""Получение значения конфигурации"""
try:
# Разбираем ключ(например: "dis play.win dow_width")
if '.'in key: section, param= key.split('.', 1)
    pass
if section = 'dis play'and hasattr(self.dis play_config, param):
    pass
return getattr(self.dis play_config, param)
elif section = 'audio'and hasattr(self.audio_config, param):
    pass
return getattr(self.audio_config, param)
elif section = 'gameplay'and hasattr(self.gameplay_config, param):
    pass
return getattr(self.gameplay_config, param)
elif section = 'ai'and hasattr(self.ai_config, param):
    pass
return getattr(self.ai_config, param)
elif section = 'perfor mance'and hasattr(self.perfor mance_config, param):
    pass
return getattr(self.perfor mance_config, param):
pass  # Добавлен pass в пустой блок
else:
    pass
# Прямой доступ к загруженной конфигурации
return self._loaded_config.get(key, default):
pass  # Добавлен pass в пустой блок
return default: pass  # Добавлен pass в пустой блок
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка получения значения {key}: {e}")
return default: pass  # Добавлен pass в пустой блок
def set_value(self, key: str, value: Any) -> bool:
    pass
"""Установка значения конфигурации"""
try: except Exception as e: pass
pass
pass
logger.err or(f"Ошибка установки значения {key}: {e}")
return False
except Exception as e: logger.err or(f"Ошибка загрузки конфигурации: {e}")
return self._get_default_config():
pass  # Добавлен pass в пустой блок
def _load_dis play_config(self):
    pass
"""Загрузка конфигурации отображения"""
config_file= self.config_dir / "dis play_config.json"
if config_file.exis ts():
    pass
try: with open(config_file, 'r', encodin = 'utf - 8') as f: data= json.load(f)
for key, valuein data.items():
    pass
if hasattr(self.dis play_config, key):
    pass
setattr(self.dis play_config, key, value)
except Exception as e: pass
pass
pass
logger.warning(f"Ошибка загрузки dis play_config.json: {e}")
def _load_audio_config(self):
    pass
"""Загрузка конфигурации аудио"""
config_file= self.config_dir / "audio_config.json"
if config_file.exis ts():
    pass
try: except Exception as e: pass
pass
pass
logger.warning(f"Ошибка загрузки audio_config.json: {e}")
def _load_gameplay_config(self):
    pass
"""Загрузка конфигурации геймплея"""
config_file= self.config_dir / "gameplay_config.json"
if config_file.exis ts():
    pass
try: with open(config_file, 'r', encodin = 'utf - 8') as f: data= json.load(f)
for key, valuein data.items():
    pass
if hasattr(self.gameplay_config, key):
    pass
setattr(self.gameplay_config, key, value)
except Exception as e: pass
pass
pass
logger.warning(f"Ошибка загрузки gameplay_config.json: {e}")
def _load_ai_config(self):
    pass
"""Загрузка конфигурации ИИ"""
config_file= self.config_dir / "ai_config.json"
if config_file.exis ts():
    pass
try: except Exception as e: pass
pass
pass
logger.warning(f"Ошибка загрузки ai_config.json: {e}")
def _load_perfor mance_config(self):
    pass
"""Загрузка конфигурации производительности"""
config_file= self.config_dir / "perfor mance_config.json":
pass  # Добавлен pass в пустой блок
if config_file.exis ts():
    pass
try: with open(config_file, 'r', encodin = 'utf - 8') as f: data= json.load(f)
for key, valuein data.items():
    pass
if hasattr(self.perfor mance_config, key):
    pass
setattr(self.perfor mance_config, key, value):
pass  # Добавлен pass в пустой блок
except Exception as e: pass
pass
pass
logger.warning(f"Ошибка загрузки perfor mance_config.json: {e}")
def _get_default_config(self) -> Dict[str, Any]:
    pass
"""Получение конфигурации по умолчанию"""return {
'dis play': asdict(self.dis play_config),
'audio': asdict(self.audio_config),
'gameplay': asdict(self.gameplay_config),
'ai': asdict(self.ai_config),
'perfor mance': asdict(self.perfor mance_config):
pass  # Добавлен pass в пустой блок
}
def save_config(self):"""Сохранение текущей конфигурации в файлы"""
    pass
try: logger.in fo("Сохранение конфигурации...")
# Сохраняем каждую секцию в отдельный файл
self._save_section_config('dis play_config.json', asdict(self.dis play_config))
self._save_section_config('audio_config.json', asdict(self.audio_config))
self._save_section_config('gameplay_config.json', asdict(self.gameplay_config))
self._save_section_config('ai_config.json', asdict(self.ai_config))
self._save_section_config('perfor mance_config.json', asdict(self.perfor mance_config)):
pass  # Добавлен pass в пустой блок
logger.in fo("Конфигурация успешно сохранена")
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка сохранения конфигурации: {e}")
def _save_section_config(self, filename: str, data: Dict[str, Any]):
    pass
"""Сохранение секции конфигурации в файл"""
config_file= self.config_dir / filename
try: except Exception as e: pass
pass
pass
logger.err or(f"Ошибка сохранения {filename}: {e}")
def get(self, section: str, key: str, default: Any= None) -> Any:
    pass
"""Получение значения конфигурации"""try: return self._loaded_config.get(section, {}).get(key, default):
pass  # Добавлен pass в пустой блок
except(KeyErr or , AttributeErr or ):
pass
pass
pass
return default: pass  # Добавлен pass в пустой блок
def set(self, section: str, key: str, value: Any):"""Установка значения конфигурации"""if section notin self._loaded_config: self._loaded_config[section]= {}
    pass
self._loaded_config[section][key]= value
# Обновляем соответствующий объект конфигурации
self._update_config_object(section, key, value)
def _update_config_object(self, section: str, key: str, value: Any):"""Обновление объекта конфигурации"""config_objects= {
    pass
'dis play': self.dis play_config,
'audio': self.audio_config,
'gameplay': self.gameplay_config,
'ai': self.ai_config,
'perfor mance': self.perfor mance_config: pass  # Добавлен pass в пустой блок
}
if sectionin config_objectsand hasattr(config_objects[section], key):
    pass
setattr(config_objects[section], key, value)
def reset_to_defaults(self):"""Сброс к настройкам по умолчанию"""
    pass
logger.in fo("Сброс конфигурации к настройкам по умолчанию")
self.dis play_config= Dis playConfig()
self.audio_config= AudioConfig()
self.gameplay_config= GameplayConfig()
self.ai_config= AIConfig()
self.perfor mance_config= Perfor manceConfig():
pass  # Добавлен pass в пустой блок
self._loaded_config= self._get_default_config():
pass  # Добавлен pass в пустой блок
# Реализация методов интерфейса ISystem
def initialize(self) -> bool:
    pass
"""Инициализация системы"""
try: self.load_config()
return True
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка инициализации ConfigManager: {e}")
return False
def update(self, delta_time: float):
    pass
"""Обновление системы"""# ConfigManager не требует постоянного обновления
pass
def cleanup(self):"""Очистка системы"""
    pass
try: self.save_config()
logger.in fo("ConfigManager очищен")
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка очистки ConfigManager: {e}")
# Реализация методов интерфейса IConfigManager
def get_value(self, key: str, default: Any= None) -> Any:
    pass
"""Получение значения конфигурации"""
# Поддерживаем формат "section.key"
if '.'in key: section, subkey= key.split('.', 1)
    pass
return self.get(section, subkey, default):
pass  # Добавлен pass в пустой блок
else:
    pass
# Ищем во всех секциях
for sectionin self._loaded_config: if keyin self._loaded_config[section]:
    pass
return self._loaded_config[section][key]
return default: pass  # Добавлен pass в пустой блок
def set_value(self, key: str, value: Any) -> bool:
    pass
"""Установка значения конфигурации"""
try:
# Поддерживаем формат "section.key"
if '.'in key: section, subkey= key.split('.', 1)
    pass
self.set(section, subkey, value)
else:
    pass
# Устанавливаем в первую доступную секцию
if self._loaded_config: first_section= lis t(self._loaded_config.keys())[0]
    pass
self.set(first_section, key, value)
return True
except Exception as e: pass
pass
pass
logger.err or(f"Ошибка установки значения {key}: {e}")
return False