#!/usr/bin/env python3
"""
System Factory - –§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∏–≥—Ä–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import logging
import sys
from pathlib import Path
from typing import Dict, Any, Optional, Type
from .interfaces import ISystem
from .event_system import EventSystem

logger = logging.getLogger(__name__)

class SystemFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –∏–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self, event_system: EventSystem):
        self.event_system = event_system
        self.system_registry: Dict[str, Type[ISystem]] = {}
        self.system_instances: Dict[str, ISystem] = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self._register_systems()
        
        logger.info("–§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _register_systems(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        systems_to_register = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        root_dir = Path(__file__).parent.parent.parent
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏–º–ø–æ—Ä—Ç–∞
        system_modules = [
            ("render", "src.systems.rendering.render_system", "RenderSystem"),
            ("ui", "src.systems.ui.ui_system", "UISystem"),
            ("ai", "src.systems.ai.ai_system", "AISystem"),
            ("pytorch_ai", "src.systems.ai.pytorch_ai_system", "PyTorchAISystem"),
            ("combat", "src.systems.combat.combat_system", "CombatSystem"),
            ("content_database", "src.systems.content.content_database", "ContentDatabase"),
            ("content_generator", "src.systems.content.content_generator", "ContentGenerator"),
            ("ai_integration", "src.systems.ai.ai_integration_system", "AIIntegrationSystem"),
            ("entity_stats", "src.systems.entity.entity_stats_system", "EntityStatsSystem")
        ]
        
        for system_name, module_path, class_name in system_modules:
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
                if str(root_dir) not in sys.path:
                    sys.path.insert(0, str(root_dir))
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module = __import__(module_path, fromlist=[class_name])
                system_class = getattr(module, class_name)
                
                if system_class and issubclass(system_class, ISystem):
                    systems_to_register[system_name] = system_class
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {system_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å {class_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π ISystem")
                    
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module_path}: {e}")
            except AttributeError as e:
                logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_path}: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_path}: {e}")
        
        self.system_registry.update(systems_to_register)
        
        logger.info(f"üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.system_registry)} —Å–∏—Å—Ç–µ–º")
        logger.info(f"üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: {list(self.system_registry.keys())}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        if not systems_to_register:
            logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π...")
            for system_name, module_path, class_name in system_modules:
                try:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
                    module_file = root_dir / module_path.replace('.', '/') / "__init__.py"
                    if module_file.exists():
                        logger.info(f"üìÅ –ú–æ–¥—É–ª—å {module_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    else:
                        logger.warning(f"üìÅ –ú–æ–¥—É–ª—å {module_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                    try:
                        test_module = __import__(module_path, fromlist=[class_name])
                        if hasattr(test_module, class_name):
                            logger.info(f"‚úÖ –ö–ª–∞—Å—Å {class_name} –Ω–∞–π–¥–µ–Ω –≤ {module_path}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_path}")
                    except Exception as import_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_path}: {import_error}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {module_path}: {e}")
    
    def create_system(self, system_name: str, **kwargs) -> Optional[ISystem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏–º–µ–Ω–∏"""
        try:
            if system_name not in self.system_registry:
                logger.error(f"–°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return None
            
            system_class = self.system_registry[system_name]
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Å —É—á–µ—Ç–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            if system_name == "render":
                # RenderSystem —Ç—Ä–µ–±—É–µ—Ç render_node –∏ window
                if "render_node" not in kwargs or "window" not in kwargs:
                    logger.error("RenderSystem —Ç—Ä–µ–±—É–µ—Ç render_node –∏ window")
                    return None
                system = system_class(kwargs["render_node"], kwargs["window"])
            
            elif system_name == "ai":
                # –ë–∞–∑–æ–≤–∞—è AI —Å–∏—Å—Ç–µ–º–∞
                system = system_class()
            
            elif system_name == "pytorch_ai":
                # PyTorch AI —Å–∏—Å—Ç–µ–º–∞
                system = system_class()
            
            elif system_name == "content_database":
                # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                system = system_class()
            
            elif system_name == "content_generator":
                # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                system = system_class()
            
            elif system_name == "ai_integration":
                # –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI
                system = system_class()
            
            elif system_name == "entity_stats":
                # –°–∏—Å—Ç–µ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
                system = system_class()
            
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                system = system_class()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            if system.initialize():
                self.system_instances[system_name] = system
                logger.info(f"–°–∏—Å—Ç–µ–º–∞ {system_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return system
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É {system_name}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
            return None
    
    def get_system(self, system_name: str) -> Optional[ISystem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏–º–µ–Ω–∏"""
        return self.system_instances.get(system_name)
    
    def has_system(self, system_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        return system_name in self.system_instances
    
    def get_all_systems(self) -> Dict[str, ISystem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        return self.system_instances.copy()
    
    def destroy_system(self, system_name: str) -> bool:
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if system_name not in self.system_instances:
                return False
            
            system = self.system_instances[system_name]
            system.cleanup()
            
            del self.system_instances[system_name]
            logger.info(f"–°–∏—Å—Ç–µ–º–∞ {system_name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
            return False
    
    def destroy_all_systems(self):
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
        
        for system_name in list(self.system_instances.keys()):
            self.destroy_system(system_name)
        
        logger.info("–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã")
    
    def get_system_info(self, system_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        if system_name not in self.system_instances:
            return None
        
        system = self.system_instances[system_name]
        return {
            "name": system_name,
            "type": type(system).__name__,
            "initialized": hasattr(system, 'is_initialized') and system.is_initialized,
            "active": hasattr(system, 'is_active') and system.is_active
        }
    
    def get_all_systems_info(self) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö"""
        return {name: self.get_system_info(name) for name in self.system_instances}
    
    def create_default_systems(self, render_node, window) -> Dict[str, ISystem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º...")
        
        created_systems = {}
        
        try:
            # –°–∏—Å—Ç–µ–º–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            render_system = self.create_system("render", render_node=render_node, window=window)
            if render_system:
                created_systems["render"] = render_system
            
            # –°–∏—Å—Ç–µ–º–∞ UI
            ui_system = self.create_system("ui")
            if ui_system:
                created_systems["ui"] = ui_system
            
            # –°–∏—Å—Ç–µ–º–∞ AI (–ø—Ä–æ–±—É–µ–º PyTorch, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è - –±–∞–∑–æ–≤–∞—è)
            ai_system = self.create_system("pytorch_ai")
            if ai_system:
                created_systems["ai"] = ai_system
            else:
                # Fallback –Ω–∞ –±–∞–∑–æ–≤—É—é AI —Å–∏—Å—Ç–µ–º—É
                ai_system = self.create_system("ai")
                if ai_system:
                    created_systems["ai"] = ai_system
            
            # –°–∏—Å—Ç–µ–º–∞ –±–æ—è
            combat_system = self.create_system("combat")
            if combat_system:
                created_systems["combat"] = combat_system
            
            # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_db = self.create_system("content_database")
            if content_db:
                created_systems["content_database"] = content_db
            
            # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content_gen = self.create_system("content_generator")
            if content_gen:
                created_systems["content_generator"] = content_gen
            
            # –°–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI
            ai_integration = self.create_system("ai_integration")
            if ai_integration:
                created_systems["ai_integration"] = ai_integration
            
            # –°–∏—Å—Ç–µ–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π
            entity_stats = self.create_system("entity_stats")
            if entity_stats:
                created_systems["entity_stats"] = entity_stats
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(created_systems)} —Å–∏—Å—Ç–µ–º")
            return created_systems
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º: {e}")
            return created_systems
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º...")
        self.destroy_all_systems()
        self.system_instances.clear()
        logger.info("–§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º –æ—á–∏—â–µ–Ω–∞")
