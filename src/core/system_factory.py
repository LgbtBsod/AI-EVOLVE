#!/usr/bin/env python3
"""
–§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º - —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
"""

import importlib
import logging
from typing import Dict, List, Optional, Type, Any
from .interfaces import ISystem, SystemPriority, SystemState

logger = logging.getLogger(__name__)

class SystemFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"""
    
    def __init__(self):
        self.registered_systems: Dict[str, Type[ISystem]] = {}
        self.system_instances: Dict[str, ISystem] = {}
        self.system_configs: Dict[str, Dict[str, Any]] = {}
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –∫ —Å–∏—Å—Ç–µ–º–∞–º
        self.system_paths = {
            'render': 'src.systems.rendering.render_system.RenderSystem',
            'ui': 'src.systems.ui.ui_system.UISystem',
            'ai': 'src.systems.ai.ai_system.AISystem',
            'pytorch_ai': 'src.systems.ai.pytorch_ai_system.PyTorchAISystem',
            'combat': 'src.systems.combat.combat_system.CombatSystem',
            'content_database': 'src.systems.content.content_database.ContentDatabase',
            'content_generator': 'src.systems.content.content_generator.ContentGenerator',
            'ai_integration': 'src.systems.ai.ai_integration_system.AIIntegrationSystem',
            'entity_stats': 'src.systems.entity.entity_stats_system.EntityStatsSystem',
            'evolution': 'src.systems.evolution.evolution_system.EvolutionSystem',
            'genome': 'src.systems.genome.genome_system.GenomeSystem',
            'emotion': 'src.systems.emotion.emotion_system.EmotionSystem',
            'skills': 'src.systems.skills.skill_system.SkillSystem',
            'effects': 'src.systems.effects.effect_system.EffectSystem',
            'items': 'src.systems.items.item_system.ItemSystem',
            'inventory': 'src.systems.inventory.inventory_system.InventorySystem',
            'crafting': 'src.systems.crafting.crafting_system.CraftingSystem'
        }
        
        logger.info("–§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def register_system(self, system_name: str, system_class: Type[ISystem]) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤ —Ñ–∞–±—Ä–∏–∫–µ"""
        try:
            if not issubclass(system_class, ISystem):
                logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å {system_class.__name__} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π ISystem")
                return False
            
            self.registered_systems[system_name] = system_class
            logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {system_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {system_class.__name__}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
            return False
    
    def auto_discover_systems(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º"""
        logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º...")
        
        discovered_count = 0
        
        for system_name, system_path in self.system_paths.items():
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ –º–æ–¥—É–ª—å –∏ –∫–ª–∞—Å—Å
                module_path, class_name = system_path.rsplit('.', 1)
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                module = importlib.import_module(module_path)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã
                system_class = getattr(module, class_name, None)
                
                if system_class is None:
                    logger.warning(f"üìÅ –ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {module_path}")
                    continue
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
                if self.register_system(system_name, system_class):
                    discovered_count += 1
                
            except ImportError as e:
                logger.warning(f"üìÅ –ú–æ–¥—É–ª—å {module_path} –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {discovered_count} —Å–∏—Å—Ç–µ–º")
        return discovered_count > 0
    
    def create_system(self, system_name: str, **kwargs) -> Optional[ISystem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            if system_name not in self.registered_systems:
                logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return None
            
            system_class = self.registered_systems[system_name]
            system_instance = system_class(**kwargs)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            if hasattr(system_instance, '_system_state'):
                system_instance._system_state = SystemState.INITIALIZING
            
            self.system_instances[system_name] = system_instance
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã {system_name}")
            return system_instance
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
            return None
    
    def get_system(self, system_name: str) -> Optional[ISystem]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ –∏–º–µ–Ω–∏"""
        return self.system_instances.get(system_name)
    
    def get_registered_systems(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        return list(self.registered_systems.keys())
    
    def get_system_info(self, system_name: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
        if system_name not in self.registered_systems:
            return None
        
        system_class = self.registered_systems[system_name]
        system_instance = self.system_instances.get(system_name)
        
        info = {
            'name': system_name,
            'class': system_class.__name__,
            'module': system_class.__module__,
            'registered': True,
            'instantiated': system_instance is not None
        }
        
        if system_instance:
            info.update({
                'state': getattr(system_instance, 'system_state', SystemState.UNINITIALIZED),
                'priority': getattr(system_instance, 'system_priority', SystemPriority.NORMAL),
                'dependencies': getattr(system_instance, 'dependencies', [])
            })
        
        return info
    
    def create_standard_systems(self) -> Dict[str, ISystem]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º"""
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º...")
        
        created_systems = {}
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        priority_order = [
            SystemPriority.CRITICAL,
            SystemPriority.HIGH,
            SystemPriority.NORMAL,
            SystemPriority.LOW,
            SystemPriority.BACKGROUND
        ]
        
        for priority in priority_order:
            for system_name in self.registered_systems:
                try:
                    system_class = self.registered_systems[system_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏—Å—Ç–µ–º—ã
                    if hasattr(system_class, 'system_priority'):
                        if system_class.system_priority != priority:
                            continue
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
                    system_instance = self.create_system(system_name)
                    if system_instance:
                        created_systems[system_name] = system_instance
                        logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {system_name} —Å–æ–∑–¥–∞–Ω–∞")
                    else:
                        logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(created_systems)} —Å–∏—Å—Ç–µ–º")
        return created_systems
    
    def initialize_all_systems(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
        
        success_count = 0
        total_count = len(self.system_instances)
        
        for system_name, system_instance in self.system_instances.items():
            try:
                if system_instance.initialize():
                    success_count += 1
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {system_name} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                else:
                    logger.error(f"‚ùå –°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{total_count} —Å–∏—Å—Ç–µ–º")
        return success_count == total_count
    
    def update_all_systems(self, delta_time: float) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        success_count = 0
        total_count = len(self.system_instances)
        
        for system_name, system_instance in self.system_instances.items():
            try:
                if system_instance.update(delta_time):
                    success_count += 1
                else:
                    logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        return success_count == total_count
    
    def cleanup_all_systems(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
        
        success_count = 0
        total_count = len(self.system_instances)
        
        for system_name, system_instance in self.system_instances.items():
            try:
                if system_instance.cleanup():
                    success_count += 1
                    logger.info(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {system_name} –æ—á–∏—â–µ–Ω–∞")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ {system_name} –Ω–µ –æ—á–∏—â–µ–Ω–∞")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
        self.system_instances.clear()
        
        logger.info(f"–û—á–∏—â–µ–Ω–æ {success_count}/{total_count} —Å–∏—Å—Ç–µ–º")
        return success_count == total_count
    
    def destroy_all_systems(self) -> None:
        """–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
        
        for system_name in list(self.system_instances.keys()):
            try:
                system_instance = self.system_instances[system_name]
                system_instance.cleanup()
                del self.system_instances[system_name]
                logger.debug(f"–°–∏—Å—Ç–µ–º–∞ {system_name} —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã {system_name}: {e}")
        
        logger.info("–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã")
    
    def cleanup(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–±—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º...")
        
        self.destroy_all_systems()
        self.registered_systems.clear()
        self.system_configs.clear()
        
        logger.info("–§–∞–±—Ä–∏–∫–∞ —Å–∏—Å—Ç–µ–º –æ—á–∏—â–µ–Ω–∞")
    
    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä"""
        self.cleanup()
