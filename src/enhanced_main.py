#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import logging
import time
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('enhanced_game.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

class EnhancedGame:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è –∏–≥—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º"""
    
    def __init__(self):
        self.running = False
        self.render_system = None
        self.state_manager = None
        self.input_manager = None
        self.keys = {}
        
        # Panda3D –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.showbase = None
        self.render = None
        self.cam = None
        self.aspect2d = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._initialize_panda3d()
        self._initialize_systems()
        self._register_states()
        
    def _initialize_panda3d(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Panda3D"""
        try:
            from direct.showbase.ShowBase import ShowBase
            from panda3d.core import WindowProperties
            
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Panda3D...")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–∫–Ω–æ
            self.showbase = ShowBase()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–∫–Ω–∞
            props = WindowProperties()
            props.setTitle("AI-EVOLVE Enhanced Edition")
            props.setSize(1280, 720)
            props.setFullscreen(False)
            props.setCursorHidden(False)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
            self.showbase.win.requestProperties(props)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.render = self.showbase.render
            self.cam = self.showbase.cam
            self.aspect2d = self.showbase.aspect2d
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
            self.cam.setPos(10, -10, 8)
            self.cam.lookAt(0, 0, 0)
            
            logger.info("Panda3D –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Panda3D: {e}")
            raise
            
    def _initialize_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            from src.systems.rendering.render_system import RenderSystem
            self.render_system = RenderSystem(self)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
            from src.core.enhanced_state_manager import EnhancedStateManager
            self.state_manager = EnhancedStateManager(self)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
            from src.systems.particle_system import ParticleSystem
            self.particle_system = ParticleSystem(self)
            self.particle_system.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —Å–∏—Å—Ç–µ–º—É –æ—Å–≤–µ—â–µ–Ω–∏—è
            from src.systems.advanced_lighting import AdvancedLighting
            self.lighting_system = AdvancedLighting(self)
            self.lighting_system.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—É
            from src.systems.audio_system import AudioSystem
            self.audio_system = AudioSystem(self)
            self.audio_system.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            from src.systems.performance_optimizer import PerformanceOptimizer
            self.performance_optimizer = PerformanceOptimizer(self)
            self.performance_optimizer.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤–≤–æ–¥–∞
            self._setup_input()
            
            logger.info("–ò–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
            raise
            
    def _setup_input(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–≤–æ–¥–∞"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            self.showbase.accept("escape", self.quit)
            self.showbase.accept("p", self.toggle_pause)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à
            self.showbase.accept("w", self._key_down, ["w"])
            self.showbase.accept("w-up", self._key_up, ["w"])
            self.showbase.accept("s", self._key_down, ["s"])
            self.showbase.accept("s-up", self._key_up, ["s"])
            self.showbase.accept("a", self._key_down, ["a"])
            self.showbase.accept("a-up", self._key_up, ["a"])
            self.showbase.accept("d", self._key_down, ["d"])
            self.showbase.accept("d-up", self._key_up, ["d"])
            self.showbase.accept("space", self._key_down, ["space"])
            self.showbase.accept("space-up", self._key_up, ["space"])
            
            logger.info("–°–∏—Å—Ç–µ–º–∞ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–≤–æ–¥–∞: {e}")
            
    def _key_down(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        self.keys[key] = True
        
    def _key_up(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏"""
        self.keys[key] = False
        
    def _register_states(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–≥—Ä—ã"""
        try:
            from src.ui.simple_enhanced_start_screen import SimpleEnhancedStartScreen
            from src.ui.pause_screen import PauseScreen
            from src.ui.settings_screen import SettingsScreen
            from src.ui.death_screen import DeathScreen
            from src.scenes.enhanced_game_scene import EnhancedGameScene
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.state_manager.register_state("start", SimpleEnhancedStartScreen)
            self.state_manager.register_state("game", EnhancedGameScene)
            self.state_manager.register_state("pause", PauseScreen)
            self.state_manager.register_state("settings", SettingsScreen)
            self.state_manager.register_state("death", DeathScreen)
            
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π: {e}")
            raise
            
    def start(self):
        """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã"""
        try:
            logger.info("=" * 60)
            logger.info("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô –ò–ì–†–´ AI-EVOLVE")
            logger.info("=" * 60)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if not self.state_manager.change_state("start"):
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
            self.running = True
            self._main_loop()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã: {e}")
            raise
            
    def _main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª"""
        try:
            last_time = time.time()
            
            while self.running:
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞
                current_time = time.time()
                dt = current_time - last_time
                last_time = current_time
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞
                if dt > 0.1:
                    dt = 0.1
                    
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
                self.update(dt)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥
                self.handle_input()
                
                # –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞–¥—Ä
                self.render_frame()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è Panda3D
                self.showbase.taskMgr.step()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            raise
            
    def update(self, dt: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if self.state_manager:
                self.state_manager.update(dt)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
            if hasattr(self, 'particle_system'):
                self.particle_system.update(dt)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Å–≤–µ—â–µ–Ω–∏—è
            if hasattr(self, 'lighting_system'):
                self.lighting_system.update(dt)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if hasattr(self, 'performance_optimizer'):
                # –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á–∏
                pass
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")
            
    def handle_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if self.state_manager:
                self.state_manager.handle_input(self.keys)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞: {e}")
            
    def render_frame(self):
        """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–¥—Ä–∞"""
        try:
            # Panda3D –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞–¥—Ä
            pass
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: {e}")
            
    def toggle_pause(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞—É–∑—ã"""
        try:
            current_state = self.state_manager.get_current_state_name()
            
            if current_state == "game":
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞—É–∑—É
                self.state_manager.push_state("pause")
            elif current_state == "pause":
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏–≥—Ä—É
                self.state_manager.pop_state()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–∞—É–∑—ã: {e}")
            
    def quit(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã"""
        try:
            logger.info("–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã...")
            self.running = False
            
            # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
            self.cleanup()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã: {e}")
            
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
            if self.state_manager and self.state_manager.current_state:
                self.state_manager.current_state.exit()
                
            # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            if self.render_system:
                self.render_system.cleanup()
                
            # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É —á–∞—Å—Ç–∏—Ü
            if hasattr(self, 'particle_system'):
                self.particle_system.destroy()
                
            # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ—Å–≤–µ—â–µ–Ω–∏—è
            if hasattr(self, 'lighting_system'):
                self.lighting_system.destroy()
                
            # –û—á–∏—â–∞–µ–º –∞—É–¥–∏–æ —Å–∏—Å—Ç–µ–º—É
            if hasattr(self, 'audio_system'):
                self.audio_system.destroy()
                
            # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if hasattr(self, 'performance_optimizer'):
                self.performance_optimizer.destroy()
                
            logger.info("–†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        logger.info("=" * 60)
        logger.info("üéÆ –ó–ê–ü–£–°–ö AI-EVOLVE ENHANCED EDITION")
        logger.info("=" * 60)
        
        # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä—É
        game = EnhancedGame()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        game.start()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return 1
        
    return 0

if __name__ == "__main__":
    sys.exit(main())
