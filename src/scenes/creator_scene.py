#!/usr/bin/env python3
"""
Creator Scene - –°—Ü–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ "–¢–≤–æ—Ä–µ—Ü –º–∏—Ä–∞" –Ω–∞ Panda3D
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, –ª–æ–≤—É—à–∫–∏, —Å—É–Ω–¥—É–∫–∏ –∏ –≤—Ä–∞–≥–æ–≤
"""

import logging
import math
import random
from typing import List, Optional, Dict, Any, Tuple
from panda3d.core import NodePath, PandaNode, Vec3, Point3, LVector3
from panda3d.core import OrthographicLens, PerspectiveLens
from panda3d.core import DirectionalLight, AmbientLight
from panda3d.core import TransparencyAttrib, AntialiasAttrib
from panda3d.core import TextNode, PandaNode
from direct.gui.OnscreenText import OnscreenText
from direct.gui.OnscreenImage import OnscreenImage
from direct.gui.DirectButton import DirectButton
from direct.gui.DirectFrame import DirectFrame
from direct.gui.DirectLabel import DirectLabel

from core.scene_manager import Scene
from systems.world.world_manager import WorldManager, WorldObjectType, ObjectState
from systems.ui.ui_system import UISystem, WorldObjectTemplate, ObjectCategory

logger = logging.getLogger(__name__)

class CreatorCamera:
    """–ö–∞–º–µ—Ä–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è"""
    
    def __init__(self, camera_node: NodePath):
        self.camera_node = camera_node
        
        # –ü–æ–∑–∏—Ü–∏—è –∫–∞–º–µ—Ä—ã
        self.world_x = 0.0
        self.world_y = -15.0
        self.world_z = 10.0
        
        # –ú–∞—Å—à—Ç–∞–±
        self.zoom = 1.0
        self.min_zoom = 0.5
        self.max_zoom = 3.0
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏
        self._setup_orthographic_projection()
    
    def _setup_orthographic_projection(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏"""
        lens = OrthographicLens()
        lens.setFilmSize(40, 30)
        lens.setNearFar(-100, 100)
        self.camera_node.node().setLens(lens)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        self.camera_node.setPos(self.world_x, self.world_y, self.world_z)
        self.camera_node.lookAt(0, 0, 0)
    
    def move(self, dx: float, dy: float, dz: float = 0):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã"""
        self.world_x += dx
        self.world_y += dy
        self.world_z += dz
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
        self.camera_node.setPos(self.world_x, self.world_y, self.world_z)
    
    def set_zoom(self, zoom: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Å—à—Ç–∞–±–∞"""
        self.zoom = max(self.min_zoom, min(self.max_zoom, zoom))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é
        lens = self.camera_node.node().getLens()
        if isinstance(lens, OrthographicLens):
            lens.setFilmSize(40 / self.zoom, 30 / self.zoom)
    
    def screen_to_world(self, screen_x: float, screen_y: float) -> Tuple[float, float]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —ç–∫—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –º–∏—Ä–æ–≤—ã–µ"""
        # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ä—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–µ–∫—Ü–∏–∏
        world_x = screen_x * 20 / self.zoom + self.world_x
        world_y = screen_y * 15 / self.zoom + self.world_y
        return world_x, world_y

class CreatorScene(Scene):
    """–°—Ü–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ "–¢–≤–æ—Ä–µ—Ü –º–∏—Ä–∞" –Ω–∞ Panda3D"""
    
    def __init__(self):
        super().__init__("creator")
        
        # –°–∏—Å—Ç–µ–º—ã
        self.world_manager: Optional[WorldManager] = None
        self.ui_system: Optional[UISystem] = None
        
        # Panda3D —É–∑–ª—ã
        self.scene_root = None
        self.world_root = None
        self.ui_root = None
        
        # –ö–∞–º–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è
        self.camera: Optional[CreatorCamera] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.creation_mode = False
        self.selected_template: Optional[WorldObjectTemplate] = None
        self.preview_object = None
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã Panda3D
        self.toolbar_frame = None
        self.templates_frame = None
        self.properties_frame = None
        self.stats_frame = None
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        self.info_text = None
        self.stats_text = None
        self.help_text = None
        
        # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.tool_buttons = {}
        
        logger.info("–°—Ü–µ–Ω–∞ —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ Panda3D —Å–æ–∑–¥–∞–Ω–∞")
    
    def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞"""
        try:
            logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ Panda3D...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö —É–∑–ª–æ–≤
            self._create_scene_nodes()
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞–º–µ—Ä—É —Å–æ–∑–¥–∞–Ω–∏—è
            if hasattr(self, 'scene_manager') and self.scene_manager:
                from panda3d.core import Camera
                camera_node = self.scene_manager.render_node.find("**/+Camera")
                if camera_node.isEmpty():
                    camera = Camera('creator_camera')
                    camera_node = self.scene_manager.render_node.attachNewNode(camera)
                self.camera = CreatorCamera(camera_node)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
            self._initialize_systems()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            self._create_ui_elements()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è
            self._setup_lighting()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            self._create_placement_grid()
            
            logger.info("–°—Ü–µ–Ω–∞ —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ Panda3D —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞: {e}")
            return False
    
    def _create_scene_nodes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö —É–∑–ª–æ–≤ —Å—Ü–µ–Ω—ã"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å—Ü–µ–Ω
        if self.scene_root:
            self.world_root = self.scene_root.attachNewNode("world")
            self.ui_root = self.scene_root.attachNewNode("ui")
        else:
            # Fallback –µ—Å–ª–∏ –∫–æ—Ä–Ω–µ–≤—ã–µ —É–∑–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
            if hasattr(self, 'scene_manager') and self.scene_manager:
                self.scene_root = self.scene_manager.render_node.attachNewNode("creator_scene")
                self.world_root = self.scene_root.attachNewNode("world")
                self.ui_root = self.scene_root.attachNewNode("ui")
    
    def _initialize_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–∏—Ä–∞
            self.world_manager = WorldManager()
            if hasattr(self.world_manager, 'initialize'):
                self.world_manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º UI —Å–∏—Å—Ç–µ–º—É
            self.ui_system = UISystem()
            if hasattr(self.ui_system, 'initialize'):
                self.ui_system.initialize()
            
            logger.debug("–°–∏—Å—Ç–µ–º—ã —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def _create_ui_elements(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            self.toolbar_frame = DirectFrame(
                frameColor=(0, 0, 0, 0.8),
                frameSize=(-1, 1, 0.9, 1),
                parent=self.ui_root
            )
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_label = DirectLabel(
                text="üé® –†–ï–ñ–ò–ú –¢–í–û–†–¶–ê –ú–ò–†–ê",
                scale=0.05,
                pos=(0, 0, 0.95),
                frameColor=(0, 0, 0, 0),
                text_fg=(0, 255, 255, 1),
                parent=self.toolbar_frame
            )
            
            # –ö–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            tool_configs = [
                ("placement", "üéØ –†–∞–∑–º–µ—â–µ–Ω–∏–µ", (-0.8, 0, 0.92), (0, 255, 100, 0.8)),
                ("edit", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", (-0.6, 0, 0.92), (255, 100, 255, 0.8)),
                ("preview", "üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä", (-0.4, 0, 0.92), (255, 193, 7, 0.8)),
                ("clear", "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", (-0.2, 0, 0.92), (255, 100, 100, 0.8))
            ]
            
            for tool_id, text, pos, color in tool_configs:
                button = DirectButton(
                    text=text,
                    scale=0.04,
                    pos=pos,
                    frameColor=color,
                    text_fg=(1, 1, 1, 1),
                    relief=1,
                    command=self._handle_tool_button,
                    extraArgs=[tool_id],
                    parent=self.toolbar_frame
                )
                self.tool_buttons[tool_id] = button
            
            # –ü–∞–Ω–µ–ª—å —à–∞–±–ª–æ–Ω–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
            self.templates_frame = DirectFrame(
                frameColor=(0, 0, 0, 0.7),
                frameSize=(-1, -0.7, -0.8, 0.8),
                parent=self.ui_root
            )
            
            templates_label = DirectLabel(
                text="üì¶ –®–ê–ë–õ–û–ù–´ –û–ë–™–ï–ö–¢–û–í",
                scale=0.04,
                pos=(-0.85, 0, 0.75),
                frameColor=(0, 0, 0, 0),
                text_fg=(255, 255, 255, 1),
                parent=self.templates_frame
            )
            
            # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_configs = [
                ("combat", "‚öîÔ∏è –ë–æ–π", (-0.85, 0, 0.6), (217, 83, 79, 0.8)),
                ("exploration", "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", (-0.85, 0, 0.5), (91, 192, 222, 0.8)),
                ("environment", "üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ", (-0.85, 0, 0.4), (92, 184, 92, 0.8)),
                ("rewards", "üí∞ –ù–∞–≥—Ä–∞–¥—ã", (-0.85, 0, 0.3), (255, 193, 7, 0.8))
            ]
            
            for category_id, text, pos, color in category_configs:
                button = DirectButton(
                    text=text,
                    scale=0.035,
                    pos=pos,
                    frameColor=color,
                    text_fg=(1, 1, 1, 1),
                    relief=1,
                    command=self._handle_category_button,
                    extraArgs=[category_id],
                    parent=self.templates_frame
                )
                self.tool_buttons[f"category_{category_id}"] = button
            
            # –ü–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤
            self.properties_frame = DirectFrame(
                frameColor=(0, 0, 0, 0.7),
                frameSize=(0.7, 1, -0.8, 0.8),
                parent=self.ui_root
            )
            
            properties_label = DirectLabel(
                text="‚öôÔ∏è –°–í–û–ô–°–¢–í–ê",
                scale=0.04,
                pos=(0.85, 0, 0.75),
                frameColor=(0, 0, 0, 0),
                text_fg=(255, 255, 255, 1),
                parent=self.properties_frame
            )
            
            # –ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats_frame = DirectFrame(
                frameColor=(0, 0, 0, 0.8),
                frameSize=(-1, 1, -1, -0.8),
                parent=self.ui_root
            )
            
            self.stats_text = DirectLabel(
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –û–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: 0",
                scale=0.035,
                pos=(-0.9, 0, -0.95),
                frameColor=(0, 0, 0, 0),
                text_fg=(255, 255, 255, 1),
                parent=self.stats_frame
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            self.info_text = DirectLabel(
                text="üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è",
                scale=0.04,
                pos=(0, 0, 0.8),
                frameColor=(0, 0, 0, 0.7),
                text_fg=(0, 255, 255, 1),
                parent=self.ui_root
            )
            
            # –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏
            self.help_text = DirectLabel(
                text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –õ–ö–ú - —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç, –ü–ö–ú - –æ—Ç–º–µ–Ω–∏—Ç—å, –ö–æ–ª–µ—Å–æ –º—ã—à–∏ - –º–∞—Å—à—Ç–∞–±",
                scale=0.03,
                pos=(0, 0, -0.9),
                frameColor=(0, 0, 0, 0.7),
                text_fg=(255, 255, 100, 1),
                parent=self.ui_root
            )
            
            logger.debug("UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {e}")
    
    def _setup_lighting(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω—ã"""
        if not self.scene_root:
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        dlight = DirectionalLight('creator_dlight')
        dlight.setColor((0.8, 0.8, 0.8, 1))
        dlnp = self.scene_root.attachNewNode(dlight)
        dlnp.setHpr(45, -45, 0)
        self.scene_root.setLight(dlnp)
        
        # –§–æ–Ω–æ–≤–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ
        alight = AmbientLight('creator_alight')
        alight.setColor((0.4, 0.4, 0.4, 1))
        alnp = self.scene_root.attachNewNode(alight)
        self.scene_root.setLight(alnp)
        
        logger.debug("–û—Å–≤–µ—â–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    def _create_placement_grid(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤"""
        try:
            from panda3d.core import GeomNode, Geom, GeomVertexData, GeomVertexFormat
            from panda3d.core import GeomVertexWriter, GeomLines
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é —Å–µ—Ç–∫–∏
            format = GeomVertexFormat.getV3c4()
            vdata = GeomVertexData('grid', format, Geom.UHStatic)
            
            vertex = GeomVertexWriter(vdata, 'vertex')
            color = GeomVertexWriter(vdata, 'color')
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
            grid_size = 20
            grid_spacing = 1.0
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            for i in range(-grid_size, grid_size + 1):
                y = i * grid_spacing
                vertex.addData3(-grid_size * grid_spacing, y, 0)
                vertex.addData3(grid_size * grid_spacing, y, 0)
                color.addData4(0.3, 0.3, 0.3, 0.5)
                color.addData4(0.3, 0.3, 0.3, 0.5)
            
            # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
            for i in range(-grid_size, grid_size + 1):
                x = i * grid_spacing
                vertex.addData3(x, -grid_size * grid_spacing, 0)
                vertex.addData3(x, grid_size * grid_spacing, 0)
                color.addData4(0.3, 0.3, 0.3, 0.5)
                color.addData4(0.3, 0.3, 0.3, 0.5)
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏–∏
            lines = GeomLines(Geom.UHStatic)
            for i in range((grid_size * 2 + 1) * 2):
                lines.addVertices(i * 2, i * 2 + 1)
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
            geom = Geom(vdata)
            geom.addPrimitive(lines)
            
            # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
            node = GeomNode('grid')
            node.addGeom(geom)
            
            # –°–æ–∑–¥–∞–µ–º NodePath
            grid_np = self.world_root.attachNewNode(node)
            grid_np.setTransparency(True)
            
            logger.debug("–°–µ—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ç–∫—É —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {e}")
    
    def _handle_tool_button(self, tool_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        try:
            if tool_id == "placement":
                self.creation_mode = True
                self.info_text.setText("üéØ –†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            elif tool_id == "edit":
                self.creation_mode = False
                self.info_text.setText("‚úèÔ∏è –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            elif tool_id == "preview":
                self.creation_mode = False
                self.info_text.setText("üëÅÔ∏è –†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: –ù–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –º–∏—Ä–æ–º")
            elif tool_id == "clear":
                self._clear_world()
                self.info_text.setText("üóëÔ∏è –ú–∏—Ä –æ—á–∏—â–µ–Ω")
            
            logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool_id}: {e}")
    
    def _handle_category_button(self, category_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            if not self.ui_system:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = ObjectCategory(category_id)
            templates = self.ui_system.get_available_templates(category)
            
            if templates:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω—ã –≤ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤
                self._show_templates_in_properties(templates)
                self.info_text.setText(f"üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.value}")
            else:
                self.info_text.setText(f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category.value}")
            
            logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {e}")
    
    def _show_templates_in_properties(self, templates: List[WorldObjectTemplate]):
        """–ü–æ–∫–∞–∑ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏ —Å–≤–æ–π—Å—Ç–≤"""
        try:
            # –û—á–∏—â–∞–µ–º –ø–∞–Ω–µ–ª—å —Å–≤–æ–π—Å—Ç–≤
            for child in self.properties_frame.getChildren():
                child.destroy()
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            DirectLabel(
                text="üì¶ –î–û–°–¢–£–ü–ù–´–ï –û–ë–™–ï–ö–¢–´",
                scale=0.035,
                pos=(0.85, 0, 0.75),
                frameColor=(0, 0, 0, 0),
                text_fg=(255, 255, 255, 1),
                parent=self.properties_frame
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            for i, template in enumerate(templates[:8]):  # –ú–∞–∫—Å–∏–º—É–º 8 —à–∞–±–ª–æ–Ω–æ–≤
                button = DirectButton(
                    text=f"{template.icon} {template.name}",
                    scale=0.03,
                    pos=(0.85, 0, 0.6 - i * 0.08),
                    frameColor=(0, 100, 200, 0.8),
                    text_fg=(1, 1, 1, 1),
                    relief=1,
                    command=self._select_template,
                    extraArgs=[template.template_id],
                    parent=self.properties_frame
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
    
    def _select_template(self, template_id: str):
        """–í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        try:
            if not self.ui_system:
                return
            
            # –í—ã–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω
            if self.ui_system.select_template(template_id):
                self.selected_template = self.ui_system.selected_template
                self.info_text.setText(f"üéØ –í—ã–±—Ä–∞–Ω: {self.selected_template.name}. –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
                logger.info(f"–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω: {self.selected_template.name}")
            else:
                self.info_text.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
    
    def _clear_world(self):
        """–û—á–∏—Å—Ç–∫–∞ –º–∏—Ä–∞"""
        try:
            if self.world_manager:
                # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
                for object_id in list(self.world_manager.world_objects.keys()):
                    self.world_manager.remove_world_object(object_id)
                
                logger.info("–ú–∏—Ä –æ—á–∏—â–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –º–∏—Ä–∞: {e}")
    
    def handle_mouse_click(self, x: float, y: float, button: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –º—ã—à–∏"""
        try:
            if not self.camera:
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–∏—Ä–æ–≤—ã–µ
            world_x, world_y = self.camera.screen_to_world(x, y)
            
            if button == "left" and self.creation_mode and self.selected_template:
                # –†–∞–∑–º–µ—â–∞–µ–º –æ–±—ä–µ–∫—Ç
                self._place_object(world_x, world_y)
            elif button == "right":
                # –û—Ç–º–µ–Ω—è–µ–º –≤—ã–±–æ—Ä
                self.selected_template = None
                self.info_text.setText("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –º—ã—à–∏: {e}")
    
    def _place_object(self, world_x: float, world_y: float):
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∏—Ä–µ"""
        try:
            if not self.world_manager or not self.selected_template:
                return
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–∞
            object_data = {
                'id': f"{self.selected_template.template_id}_{self.world_manager.world_stats['total_objects']}",
                'template_id': self.selected_template.template_id,
                'type': self.selected_template.object_type.value,
                'name': self.selected_template.name,
                'x': world_x,
                'y': world_y,
                'z': 0,
                'properties': self.selected_template.properties.copy(),
                'created_by': 'user',
                'creation_time': time.time()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∏—Ä
            object_id = self.world_manager.add_world_object(object_data)
            
            if object_id:
                # –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
                self._create_visual_object(object_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._update_stats()
                
                self.info_text.setText(f"‚úÖ –†–∞–∑–º–µ—â–µ–Ω: {self.selected_template.name}")
                logger.info(f"–†–∞–∑–º–µ—â–µ–Ω –æ–±—ä–µ–∫—Ç: {self.selected_template.name} –≤ ({world_x}, {world_y})")
            else:
                self.info_text.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ–±—ä–µ–∫—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞: {e}")
    
    def _create_visual_object(self, object_data: Dict[str, Any]):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
        try:
            from panda3d.core import GeomNode, Geom, GeomVertexData, GeomVertexFormat
            from panda3d.core import GeomVertexWriter, GeomTriangles
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–±—ä–µ–∫—Ç–∞
            format = GeomVertexFormat.getV3c4()
            vdata = GeomVertexData('object', format, Geom.UHStatic)
            
            vertex = GeomVertexWriter(vdata, 'vertex')
            color = GeomVertexWriter(vdata, 'color')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞
            width = object_data['properties'].get('width', 1.0)
            height = object_data['properties'].get('height', 1.0)
            depth = object_data['properties'].get('depth', 1.0)
            obj_color = object_data['properties'].get('color', (1.0, 1.0, 1.0, 1.0))
            
            # –°–æ–∑–¥–∞–µ–º –∫—É–±
            half_w = width / 2
            half_h = height / 2
            half_d = depth / 2
            
            # –í–µ—Ä—à–∏–Ω—ã –∫—É–±–∞
            vertices = [
                (-half_w, -half_d, -half_h), (half_w, -half_d, -half_h),
                (half_w, half_d, -half_h), (-half_w, half_d, -half_h),
                (-half_w, -half_d, half_h), (half_w, -half_d, half_h),
                (half_w, half_d, half_h), (-half_w, half_d, half_h)
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—ã
            for v in vertices:
                vertex.addData3(*v)
                color.addData4(*obj_color)
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏
            prim = GeomTriangles(Geom.UHStatic)
            
            # –ì—Ä–∞–Ω–∏ –∫—É–±–∞
            faces = [
                (0, 1, 2), (2, 3, 0),  # –ü–µ—Ä–µ–¥–Ω—è—è –≥—Ä–∞–Ω—å
                (1, 5, 6), (6, 2, 1),  # –ü—Ä–∞–≤–∞—è –≥—Ä–∞–Ω—å
                (5, 4, 7), (7, 6, 5),  # –ó–∞–¥–Ω—è—è –≥—Ä–∞–Ω—å
                (4, 0, 3), (3, 7, 4),  # –õ–µ–≤–∞—è –≥—Ä–∞–Ω—å
                (3, 2, 6), (6, 7, 3),  # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω—å
                (4, 5, 1), (1, 0, 4)   # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω—å
            ]
            
            for face in faces:
                prim.addVertices(*face)
                prim.closePrimitive()
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é
            geom = Geom(vdata)
            geom.addPrimitive(prim)
            
            # –°–æ–∑–¥–∞–µ–º —É–∑–µ–ª
            node = GeomNode('world_object')
            node.addGeom(geom)
            
            # –°–æ–∑–¥–∞–µ–º NodePath –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º
            np = self.world_root.attachNewNode(node)
            np.setPos(object_data['x'], object_data['y'], object_data['z'])
            np.setTransparency(True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —É–∑–µ–ª –≤ –æ–±—ä–µ–∫—Ç–µ –º–∏—Ä–∞
            if self.world_manager and object_data['id'] in self.world_manager.world_objects:
                self.world_manager.world_objects[object_data['id']].node = np
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {e}")
    
    def _update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if self.world_manager:
                stats = self.world_manager.get_world_stats()
                self.stats_text.setText(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –û–±—ä–µ–∫—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_objects']} | "
                    f"–ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π: {stats['obstacles_count']} | "
                    f"–õ–æ–≤—É—à–µ–∫: {stats['traps_count']} | "
                    f"–°—É–Ω–¥—É–∫–æ–≤: {stats['chests_count']} | "
                    f"–í—Ä–∞–≥–æ–≤: {stats['enemies_count']}"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def update(self, delta_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã
        if self.world_manager:
            self.world_manager.update(delta_time)
        
        if self.ui_system:
            self.ui_system.update(delta_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats()
    
    def render(self, render_node):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞"""
        # Panda3D –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ü–µ–Ω—É
        pass
    
    def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Panda3D
        pass
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞"""
        logger.info("–û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ Panda3D...")
        
        # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—ã
        if self.world_manager:
            self.world_manager.cleanup()
        
        if self.ui_system:
            self.ui_system.cleanup()
        
        # –û—á–∏—â–∞–µ–º Panda3D —É–∑–ª—ã
        if self.scene_root:
            self.scene_root.removeNode()
        
        # –û—á–∏—â–∞–µ–º UI —ç–ª–µ–º–µ–Ω—Ç—ã
        if self.toolbar_frame:
            self.toolbar_frame.destroy()
        if self.templates_frame:
            self.templates_frame.destroy()
        if self.properties_frame:
            self.properties_frame.destroy()
        if self.stats_frame:
            self.stats_frame.destroy()
        
        logger.info("–°—Ü–µ–Ω–∞ —Ç–≤–æ—Ä—Ü–∞ –º–∏—Ä–∞ Panda3D –æ—á–∏—â–µ–Ω–∞")
