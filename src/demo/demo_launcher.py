"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è AI-EVOLVE: –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –ê–¥–∞–ø—Ç–∞—Ü–∏—è
–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ö–∞–Ω–∏–∫ –∏ —Å–∏—Å—Ç–µ–º
"""

import sys
import os
import time
import threading
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from src.systems.integration.system_integrator import SystemIntegrator, DemoScenario
from src.systems.ui.ui_system import UISystem
from src.systems.ui.hud_system import HUDSystem
from src.systems.combat.combat_system import CombatSystem
from src.systems.health.health_system import HealthSystem
from src.systems.inventory.inventory_system import InventorySystem
from src.systems.skills.skill_system import SkillSystem
from src.systems.effects.effect_system import EffectSystem
from src.core.architecture import ComponentManager, EventBus, StateManager
from src.core.game_engine import GameEngine


class DemoLauncher:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏
    """
    
    def __init__(self):
        self.system_integrator = SystemIntegrator()
        self.component_manager = ComponentManager()
        self.event_bus = EventBus()
        self.state_manager = StateManager()
        self.game_engine = None
        
        # –ò–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
        self.ui_system = None
        self.hud_system = None
        self.combat_system = None
        self.health_system = None
        self.inventory_system = None
        self.skill_system = None
        self.effect_system = None
        
        # –î–µ–º–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_scenario = None
        self.is_running = False
        self.demo_thread = None
        
    def initialize_demo(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏"""
        try:
            print("üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ AI-EVOLVE...")
            print("=" * 60)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.component_manager.initialize()
            self.event_bus.initialize()
            self.state_manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
            self.game_engine = GameEngine()
            self.game_engine.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            self._create_game_systems()
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–µ
            self._register_systems()
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
            self._integrate_all_systems()
            
            print("‚úÖ –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def _create_game_systems(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º...")
            
            # UI —Å–∏—Å—Ç–µ–º–∞
            self.ui_system = UISystem()
            self.ui_system.initialize()
            print("   ‚úÖ UISystem —Å–æ–∑–¥–∞–Ω–∞")
            
            # HUD —Å–∏—Å—Ç–µ–º–∞
            self.hud_system = HUDSystem()
            self.hud_system.initialize()
            print("   ‚úÖ HUDSystem —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
            self.combat_system = CombatSystem()
            self.combat_system.initialize()
            print("   ‚úÖ CombatSystem —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤—å—è
            self.health_system = HealthSystem()
            self.health_system.initialize()
            print("   ‚úÖ HealthSystem —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            self.inventory_system = InventorySystem()
            self.inventory_system.initialize()
            print("   ‚úÖ InventorySystem —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤—ã–∫–æ–≤
            self.skill_system = SkillSystem()
            self.skill_system.initialize()
            print("   ‚úÖ SkillSystem —Å–æ–∑–¥–∞–Ω–∞")
            
            # –°–∏—Å—Ç–µ–º–∞ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            self.effect_system = EffectSystem()
            self.effect_system.initialize()
            print("   ‚úÖ EffectSystem —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: {e}")
            raise
    
    def _register_systems(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–µ"""
        try:
            print("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–µ...")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            self.system_integrator.register_system("ComponentManager", self.component_manager)
            self.system_integrator.register_system("EventBus", self.event_bus)
            self.system_integrator.register_system("StateManager", self.state_manager)
            self.system_integrator.register_system("GameEngine", self.game_engine)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            self.system_integrator.register_system("UISystem", self.ui_system)
            self.system_integrator.register_system("HUDSystem", self.hud_system)
            self.system_integrator.register_system("CombatSystem", self.combat_system)
            self.system_integrator.register_system("HealthSystem", self.health_system)
            self.system_integrator.register_system("InventorySystem", self.inventory_system)
            self.system_integrator.register_system("SkillSystem", self.skill_system)
            self.system_integrator.register_system("EffectSystem", self.effect_system)
            
            print(f"   ‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.system_integrator.get_registered_systems())} —Å–∏—Å—Ç–µ–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
            raise
    
    def _integrate_all_systems(self):
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        try:
            print("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º...")
            
            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
            success = self.system_integrator.integrate_all_systems()
            
            if success:
                print("   ‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print("   ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            status = self.system_integrator.get_integration_summary()
            print(f"   üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {status['integrated_systems']}/{status['total_systems']} —Å–∏—Å—Ç–µ–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
            raise
    
    def show_demo_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏"""
        print("\nüéÆ –î–ï–ú–û-–í–ï–†–°–ò–Ø AI-EVOLVE: –≠–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ê–î–ê–ü–¢–ê–¶–ò–Ø")
        print("=" * 60)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
        
        scenarios = self.system_integrator.list_demo_scenarios()
        for i, scenario in enumerate(scenarios, 1):
            print(f"   {i}. {scenario.name}")
            print(f"      {scenario.description}")
            print(f"      –°–∏—Å—Ç–µ–º—ã: {', '.join(scenario.systems_required)}")
            print()
        
        print("–ö–æ–º–∞–Ω–¥—ã:")
        print("   <–Ω–æ–º–µ—Ä> - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
        print("   all - –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        print("   status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        print("   quit - –≤—ã—Ö–æ–¥")
        print("=" * 60)
    
    def run_demo_scenario(self, scenario_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏—è"""
        try:
            if not self.system_integrator.is_system_integrated("UISystem"):
                print("‚ùå UI —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                return False
            
            print(f"\nüé¨ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
            success = self.system_integrator.start_demo_scenario(scenario_id)
            
            if success:
                self.current_scenario = scenario_id
                print("‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.is_running = True
                self.demo_thread = threading.Thread(target=self._run_demo_loop, args=(scenario_id,))
                self.demo_thread.daemon = True
                self.demo_thread.start()
                
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            return False
    
    def _run_demo_loop(self, scenario_id: str):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–µ–º–æ"""
        try:
            print(f"üîÑ –î–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–π {scenario_id} –∑–∞–ø—É—â–µ–Ω...")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –¥–µ–º–æ
            for i in range(10):  # 10 —Å–µ–∫—É–Ω–¥ –¥–µ–º–æ
                if not self.is_running:
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º—ã
                self._update_demo_systems()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = (i + 1) * 10
                print(f"   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%")
                
                time.sleep(1)
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ
            self.stop_demo()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ —Ü–∏–∫–ª–µ: {e}")
            self.stop_demo()
    
    def _update_demo_systems(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ —Å–∏—Å—Ç–µ–º"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            if self.ui_system:
                self.ui_system.update(1.0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º HUD
            if self.hud_system:
                self.hud_system.update(1.0)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã
            if self.combat_system:
                self.combat_system.update(1.0)
            
            if self.health_system:
                self.health_system.update(1.0)
            
            if self.inventory_system:
                self.inventory_system.update(1.0)
            
            if self.skill_system:
                self.skill_system.update(1.0)
            
            if self.effect_system:
                self.effect_system.update(1.0)
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º: {e}")
    
    def stop_demo(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ"""
        try:
            if self.current_scenario:
                self.system_integrator.stop_demo_scenario()
                self.current_scenario = None
            
            self.is_running = False
            
            if self.demo_thread and self.demo_thread.is_alive():
                self.demo_thread.join(timeout=1.0)
            
            print("‚úÖ –î–µ–º–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ: {e}")
    
    def show_integration_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            print("\nüìä –°–¢–ê–¢–£–° –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ò–°–¢–ï–ú")
            print("=" * 60)
            
            status = self.system_integrator.get_integration_summary()
            
            print(f"–í—Å–µ–≥–æ —Å–∏—Å—Ç–µ–º: {status['total_systems']}")
            print(f"–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {status['integrated_systems']}")
            print(f"–û—à–∏–±–æ–∫: {status['error_systems']}")
            print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {status['integration_percentage']:.1f}%")
            
            if status['active_scenario']:
                print(f"–ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {status['active_scenario']}")
            
            print(f"–î–æ—Å—Ç—É–ø–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {status['available_scenarios']}")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º—ã
            print("\n–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å:")
            system_status = self.system_integrator.get_integration_status()
            
            for system_name, info in system_status.items():
                status_icon = "‚úÖ" if info.status.value == "fully_integrated" else "‚ùå" if info.status.value == "error" else "‚ö†Ô∏è"
                print(f"   {status_icon} {system_name}: {info.status.value}")
                if info.error_message:
                    print(f"      –û—à–∏–±–∫–∞: {info.error_message}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def run_all_scenarios(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        try:
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
            
            scenarios = self.system_integrator.list_demo_scenarios()
            
            for scenario in scenarios:
                print(f"\nüé¨ –ó–∞–ø—É—Å–∫: {scenario.name}")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                success = self.run_demo_scenario(scenario.scenario_id)
                
                if success:
                    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    while self.is_running:
                        time.sleep(0.5)
                    
                    print(f"‚úÖ {scenario.name} –∑–∞–≤–µ—Ä—à–µ–Ω")
                else:
                    print(f"‚ùå {scenario.name} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å")
                
                time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            
            print("\nüéâ –í—Å–µ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
    
    def run_interactive_demo(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –¥–µ–º–æ"""
        try:
            print("üéÆ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–º–æ...")
            
            while True:
                self.show_demo_menu()
                
                command = input("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()
                
                if command == "quit":
                    break
                elif command == "status":
                    self.show_integration_status()
                elif command == "all":
                    self.run_all_scenarios()
                elif command.isdigit():
                    # –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                    scenarios = self.system_integrator.list_demo_scenarios()
                    index = int(command) - 1
                    
                    if 0 <= index < len(scenarios):
                        scenario = scenarios[index]
                        self.run_demo_scenario(scenario.scenario_id)
                        
                        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                        while self.is_running:
                            time.sleep(0.5)
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è")
                else:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
                print()
            
        except KeyboardInterrupt:
            print("\n\n‚ö†Ô∏è –î–µ–º–æ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–º–æ: {e}")
        finally:
            self.stop_demo()
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–µ–º–æ...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ
            self.stop_demo()
            
            # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º—ã
            if self.effect_system:
                self.effect_system.shutdown()
            if self.skill_system:
                self.skill_system.shutdown()
            if self.inventory_system:
                self.inventory_system.shutdown()
            if self.health_system:
                self.health_system.shutdown()
            if self.combat_system:
                self.combat_system.shutdown()
            if self.hud_system:
                self.hud_system.shutdown()
            if self.ui_system:
                self.ui_system.shutdown()
            
            # –û—á–∏—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if self.game_engine:
                self.game_engine.shutdown()
            if self.state_manager:
                self.state_manager.shutdown()
            if self.event_bus:
                self.event_bus.shutdown()
            if self.component_manager:
                self.component_manager.shutdown()
            
            print("‚úÖ –†–µ—Å—É—Ä—Å—ã –¥–µ–º–æ –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–µ–º–æ: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ"""
    print("üéÆ AI-EVOLVE: –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏")
    print("=" * 60)
    
    launcher = DemoLauncher()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ–º–æ
        if not launcher.initialize_demo():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é")
            return False
        
        # –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–º–æ
        launcher.run_interactive_demo()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–µ–º–æ: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        launcher.cleanup()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
