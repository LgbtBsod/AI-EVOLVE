"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import sys
import os
import time
import traceback
from typing import Dict, List, Optional, Any

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..', '..'))

from src.systems.testing.integration_tester import IntegrationTester, TestStatus, TestPriority
from src.systems.integration.system_integrator import SystemIntegrator
from src.core.architecture import ComponentManager, EventBus, StateManager
from src.core.game_engine import GameEngine


class TestRunner:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    """
    
    def __init__(self):
        self.tester = IntegrationTester()
        self.system_integrator = SystemIntegrator()
        self.component_manager = ComponentManager()
        self.event_bus = EventBus()
        self.state_manager = StateManager()
        self.game_engine = None
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.test_results = {}
        self.overall_success = False
        
    def setup_test_environment(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã"""
        try:
            print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.component_manager.initialize()
            self.event_bus.initialize()
            self.state_manager.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –¥–≤–∏–∂–æ–∫
            self.game_engine = GameEngine()
            self.game_engine.initialize()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.tester.set_system_integrator(self.system_integrator)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–µ
            self._register_all_systems()
            
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã: {e}")
            traceback.print_exc()
            return False
    
    def _register_all_systems(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–µ"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            self.system_integrator.register_system("ComponentManager", self.component_manager)
            self.system_integrator.register_system("EventBus", self.event_bus)
            self.system_integrator.register_system("StateManager", self.state_manager)
            self.system_integrator.register_system("GameEngine", self.game_engine)
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            try:
                from src.systems.ui.ui_system import UISystem
                ui_system = UISystem()
                self.system_integrator.register_system("UISystem", ui_system)
            except ImportError:
                print("‚ö†Ô∏è UISystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            try:
                from src.systems.ui.hud_system import HUDSystem
                hud_system = HUDSystem()
                self.system_integrator.register_system("HUDSystem", hud_system)
            except ImportError:
                print("‚ö†Ô∏è HUDSystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            try:
                from src.systems.combat.combat_system import CombatSystem
                combat_system = CombatSystem()
                self.system_integrator.register_system("CombatSystem", combat_system)
            except ImportError:
                print("‚ö†Ô∏è CombatSystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            try:
                from src.systems.health.health_system import HealthSystem
                health_system = HealthSystem()
                self.system_integrator.register_system("HealthSystem", health_system)
            except ImportError:
                print("‚ö†Ô∏è HealthSystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            try:
                from src.systems.inventory.inventory_system import InventorySystem
                inventory_system = InventorySystem()
                self.system_integrator.register_system("InventorySystem", inventory_system)
            except ImportError:
                print("‚ö†Ô∏è InventorySystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            try:
                from src.systems.skills.skill_system import SkillSystem
                skill_system = SkillSystem()
                self.system_integrator.register_system("SkillSystem", skill_system)
            except ImportError:
                print("‚ö†Ô∏è SkillSystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            try:
                from src.systems.effects.effect_system import EffectSystem
                effect_system = EffectSystem()
                self.system_integrator.register_system("EffectSystem", effect_system)
            except ImportError:
                print("‚ö†Ô∏è EffectSystem –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(self.system_integrator.get_registered_systems())} —Å–∏—Å—Ç–µ–º")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
            traceback.print_exc()
    
    def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            print("\nüöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
            print("=" * 60)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            results = self.tester.run_all_tests()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._analyze_test_results(results)
            
            return results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {e}")
            traceback.print_exc()
            return {}
    
    def _analyze_test_results(self, results: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            print("\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            print("=" * 60)
            
            total_tests = len(results)
            passed_tests = sum(1 for r in results.values() if r.status == TestStatus.PASSED)
            failed_tests = sum(1 for r in results.values() if r.status in [TestStatus.FAILED, TestStatus.ERROR])
            skipped_tests = sum(1 for r in results.values() if r.status == TestStatus.SKIPPED)
            
            success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
            
            print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
            print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
            print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
            print(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_tests}")
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%")
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            self._analyze_by_priority(results)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
            if failed_tests > 0:
                self._analyze_failed_tests(results)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —É—Å–ø–µ—Ö
            self.overall_success = failed_tests == 0 and passed_tests > 0
            
            if self.overall_success:
                print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            else:
                print(f"\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã: {failed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            traceback.print_exc()
    
    def _analyze_by_priority(self, results: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"""
        try:
            print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:")
            
            for priority in [TestPriority.CRITICAL, TestPriority.HIGH, TestPriority.MEDIUM, TestPriority.LOW]:
                priority_tests = [name for name, result in results.items() 
                                if hasattr(result, 'priority') and result.priority == priority]
                
                if priority_tests:
                    passed = sum(1 for name in priority_tests 
                               if results[name].status == TestStatus.PASSED)
                    total = len(priority_tests)
                    rate = (passed / total * 100) if total > 0 else 0
                    
                    print(f"   {priority.value.upper()}: {passed}/{total} ({rate:.1f}%)")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º: {e}")
    
    def _analyze_failed_tests(self, results: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        try:
            print(f"\n‚ùå –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:")
            
            for test_name, result in results.items():
                if result.status in [TestStatus.FAILED, TestStatus.ERROR]:
                    print(f"   üî¥ {test_name}:")
                    print(f"      –°—Ç–∞—Ç—É—Å: {result.status.value}")
                    if result.error_message:
                        print(f"      –û—à–∏–±–∫–∞: {result.error_message}")
                    if result.execution_time > 0:
                        print(f"      –í—Ä–µ–º—è: {result.execution_time:.2f}—Å")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {e}")
    
    def run_demo_scenarios(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
        try:
            if not self.overall_success:
                print("‚ö†Ô∏è –î–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω—ã - –µ—Å—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã")
                return False
            
            print("\nüéÆ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
            print("=" * 60)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
            scenarios = self.system_integrator.list_demo_scenarios()
            
            if not scenarios:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤")
                return False
            
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
            for scenario in scenarios:
                print(f"\nüé¨ –ó–∞–ø—É—Å–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è: {scenario.name}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {scenario.description}")
                print(f"   –¢—Ä–µ–±—É–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã: {', '.join(scenario.systems_required)}")
                
                try:
                    success = self.system_integrator.start_demo_scenario(scenario.scenario_id)
                    if success:
                        print("   ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                        
                        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å—Ü–µ–Ω–∞—Ä–∏—è
                        time.sleep(2)
                        
                        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                        self.system_integrator.stop_demo_scenario()
                        print("   ‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    else:
                        print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è")
                        
                except Exception as e:
                    print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {e}")
            
            print("\nüéâ –í—Å–µ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
            traceback.print_exc()
            return False
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            
            if self.game_engine:
                self.game_engine.shutdown()
            
            if self.component_manager:
                self.component_manager.shutdown()
            
            if self.event_bus:
                self.event_bus.shutdown()
            
            if self.state_manager:
                self.state_manager.shutdown()
            
            print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            report = []
            report.append("üìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
            report.append("=" * 50)
            report.append(f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"–í–µ—Ä—Å–∏—è: 2.4.0")
            report.append("")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            summary = self.tester.get_test_summary()
            report.append("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            report.append(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
            report.append(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {summary['passed_tests']}")
            report.append(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {summary['failed_tests']}")
            report.append(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {summary['skipped_tests']}")
            report.append(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {summary['success_rate']:.1f}%")
            report.append("")
            
            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            report.append("üîç –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            for test_name, result in summary['test_results'].items():
                status_icon = "‚úÖ" if result.status == TestStatus.PASSED else "‚ùå" if result.status in [TestStatus.FAILED, TestStatus.ERROR] else "‚ö†Ô∏è"
                report.append(f"   {status_icon} {test_name}: {result.status.value}")
                if result.execution_time > 0:
                    report.append(f"      –í—Ä–µ–º—è: {result.execution_time:.2f}—Å")
                if result.error_message:
                    report.append(f"      –û—à–∏–±–∫–∞: {result.error_message}")
            
            report.append("")
            report.append("üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
            if self.overall_success:
                report.append("   –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                report.append("   –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.")
            else:
                report.append("   –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
                report.append("   –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞.")
            
            return "\n".join(report)
            
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéÆ AI-EVOLVE: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    runner = TestRunner()
    
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
        if not runner.setup_test_environment():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É")
            return False
        
        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        results = runner.run_all_tests()
        
        if not results:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
            return False
        
        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏)
        if runner.overall_success:
            runner.run_demo_scenarios()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        report = runner.generate_report()
        print("\n" + report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        try:
            with open("test_report.txt", "w", encoding="utf-8") as f:
                f.write(report)
            print("\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª test_report.txt")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
        
        return runner.overall_success
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
        return False
        
    finally:
        runner.cleanup()


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
